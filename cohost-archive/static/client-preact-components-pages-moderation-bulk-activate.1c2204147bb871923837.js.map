{"version":3,"file":"client-preact-components-pages-moderation-bulk-activate.1c2204147bb871923837.js","mappings":"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","sources":["webpack:///./preact/components/elements/button.tsx","webpack:///./preact/components/pages/moderation/bulk-activate.tsx","webpack:///../node_modules/.pnpm/@heroicons+react@2.0.13_react@18.0.0/node_modules/@heroicons/react/24/outline/esm/ChevronLeftIcon.js"],"sourcesContent":["import classnames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { z } from \"zod\";\n\nexport const ButtonStyle = z.enum([\"pill\", \"roundrect\", \"authn\"]);\nexport type ButtonStyle = z.infer<typeof ButtonStyle>;\n\nexport const ButtonColor = z.enum([\n    \"cherry\",\n    \"strawberry\",\n    \"mango\",\n    \"not-black\",\n    \"red\",\n    \"green\",\n    \"accent\",\n    \"secondary\",\n    \"authn-primary\",\n    \"authn-other\",\n]);\nexport type ButtonColor = z.infer<typeof ButtonColor>;\n\nexport const SharedProps = z.object({\n    buttonStyle: ButtonStyle,\n    color: ButtonColor,\n    className: z.string().optional(),\n});\nexport type SharedProps = z.infer<typeof SharedProps>;\n\nconst baseColors = classnames(\"bg-notWhite\", \"hover:text-notWhite\");\n\n// WHY NOT HAVE THESE AS INTERPOLATED CLASS NAMES?\n// tailwind jit doesn't handle interpolated class names!\n// you have to have the full class name written for it to pick up on a string as\n// a class name! so we do this\nconst pillClasses = classnames(\n    \"font-atkinson\",\n    \"font-bold\",\n    \"rounded-full\",\n    \"border-2\"\n);\n\nconst roundrectClasses = classnames(\"body-2\", \"rounded-lg\");\n\nconst authnStyleClasses = classnames(\n    \"flex\",\n    \"h-12\",\n    \"items-center\",\n    \"justify-center\",\n    \"rounded-lg\",\n    \"px-6\",\n    \"text-lg\"\n);\n\nconst cherryClasses = classnames(\n    \"border-cherry\",\n    \"hover:bg-cherry\",\n    \"text-cherry\",\n    \"active:bg-cherry-600\",\n    \"active:border-cherry-600\",\n    \"disabled:text-cherry-300\",\n    \"disabled:border-cherry-300\",\n    \"focus:outline-cherry\",\n    \"focus:ring-cherry\",\n    baseColors\n);\nconst strawberryClasses = classnames(\n    \"border-strawberry\",\n    \"hover:bg-strawberry\",\n    \"text-strawberry\",\n    \"active:bg-strawberry-600\",\n    \"active:border-strawberry-600\",\n    \"disabled:text-strawberry-300\",\n    \"disabled:border-strawberry-300\",\n    \"focus:outline-strawberry\",\n    \"focus:ring-strawberry\",\n    baseColors\n);\n\nconst redClasses = classnames(\n    \"border-red\",\n    \"hover:bg-red\",\n    \"text-red\",\n    \"active:bg-red-600\",\n    \"active:border-red-600\",\n    \"disabled:text-red-300\",\n    \"disabled:border-red-300\",\n    \"focus:outline-red\",\n    baseColors\n);\n\nconst greenClasses = classnames(\n    \"border-green\",\n    \"hover:bg-green\",\n    \"text-green\",\n    \"active:bg-green-600\",\n    \"active:border-green-600\",\n    \"disabled:text-green-300\",\n    \"disabled:border-green-300\",\n    \"focus:outline-green\",\n    baseColors\n);\nconst mangoClasses = classnames(\n    \"border-mango\",\n    \"hover:bg-mango\",\n    \"text-mango\",\n    \"bg-notBlack\",\n    \"hover:text-notBlack\"\n);\nconst notBlackClasses = classnames(\n    \"border-notBlack\",\n    \"hover:bg-notBlack\",\n    \"text-notBlack\",\n    \"focus:outline-notBlack\",\n    \"focus:ring-notBlack\",\n    baseColors\n);\n\nconst accentClasses = classnames(\n    \"border-accent\",\n    \"text-accent\",\n    \"bg-foreground\",\n    \"hover:bg-accent\",\n    \"hover:text-text\"\n);\n\nconst secondaryClasses = classnames(\n    \"bg-secondary\",\n    \"text-notWhite\",\n    \"dark:text-notBlack\",\n    \"hover:bg-secondary-600\"\n);\n\nconst authnPrimaryColorClasses = classnames(\n    \"bg-foreground\",\n    \"text-text\",\n    \"hover:bg-foreground-600\",\n    \"active:bg-foreground-700\",\n    \"disabled:bg-foreground-200\"\n);\n\nconst authnOtherColorClasses = classnames(\n    \"border-2\",\n    \"border-foreground\",\n    \"text-foreground\",\n    \"hover:bg-longan-200\"\n);\n\nconst sharedClasses = (props: SharedProps) =>\n    classnames(\n        \"leading-none\",\n        \"align-middle\",\n        \"py-2\",\n        \"px-4\",\n        \"no-select\",\n        props.className,\n        {\n            [pillClasses]: props.buttonStyle === \"pill\",\n            [roundrectClasses]: props.buttonStyle === \"roundrect\",\n            [authnStyleClasses]: props.buttonStyle === \"authn\",\n            [cherryClasses]: props.color === \"cherry\",\n            [strawberryClasses]: props.color === \"strawberry\",\n            [mangoClasses]: props.color === \"mango\",\n            [notBlackClasses]: props.color === \"not-black\",\n            [redClasses]: props.color === \"red\",\n            [accentClasses]: props.color === \"accent\",\n            [greenClasses]: props.color === \"green\",\n            [secondaryClasses]: props.color === \"secondary\",\n            [authnPrimaryColorClasses]: props.color === \"authn-primary\",\n            [authnOtherColorClasses]: props.color === \"authn-other\",\n        }\n    );\n\nexport const Button: FunctionComponent<\n    SharedProps &\n        React.ButtonHTMLAttributes<HTMLButtonElement> & {\n            ref?: React.Ref<HTMLButtonElement>;\n        }\n> = React.forwardRef(({ buttonStyle, color, className, ...props }, ref) => {\n    const classes = sharedClasses({\n        buttonStyle,\n        color,\n        className,\n        ...props,\n    });\n    return (\n        <button {...props} className={classes} ref={ref}>\n            {props.children}\n        </button>\n    );\n});\nButton.displayName = \"Button\";\n\nexport const LinkButton: FunctionComponent<\n    SharedProps &\n        React.AnchorHTMLAttributes<HTMLAnchorElement> & {\n            ref?: React.Ref<HTMLAnchorElement>;\n        }\n> = React.forwardRef(({ buttonStyle, color, ...props }, ref) => {\n    const classes = sharedClasses({ buttonStyle, color, ...props });\n    return (\n        <a {...props} className={classes} ref={ref}>\n            {props.children}\n        </a>\n    );\n});\nLinkButton.displayName = \"LinkButton\";\n","import sitemap from \"@/shared/sitemap\";\nimport { ChevronLeftIcon } from \"@heroicons/react/24/outline\";\nimport { DateTime } from \"luxon\";\nimport React, { FunctionComponent, Suspense, useEffect, useId } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { AuthnButton } from \"../../partials/authn-button\";\nimport { Disclosure } from \"@headlessui/react\";\nimport { Button } from \"../../elements/button\";\nimport { trpc } from \"@/client/lib/trpc\";\nimport { Loading } from \"../../loading\";\nimport { useForm } from \"react-hook-form\";\nimport { UserId } from \"@/shared/types/ids\";\nimport { useCallback } from \"react\";\n\ninterface Values {\n    users: { selected: boolean }[];\n    banReason: string;\n}\n\nconst UserList: FunctionComponent = () => {\n    const pendingUsers = trpc.moderation.user.unactivatedUsers.useInfiniteQuery(\n        { limit: 50 },\n        {\n            suspense: true,\n            getNextPageParam: (lastPage) => lastPage.nextCursor,\n        }\n    );\n    const activateMany = trpc.moderation.user.activateMany.useMutation();\n    const banMany = trpc.moderation.user.banMany.useMutation();\n    const { register, handleSubmit, watch } = useForm<Values>();\n\n    const usersValues = watch(\"users\", []);\n    let anyUsersSelected = false;\n\n    for (const usersValue of usersValues) {\n        // don't care which user or how many, just as long as one user is selected\n        if (usersValue?.selected) {\n            anyUsersSelected = true;\n            break;\n        }\n    }\n\n    const onActivateMany = useCallback(\n        async (values: Values) => {\n            const userIds: UserId[] = values.users\n                .map((val, index) => ({\n                    userId: index as UserId,\n                    selected: val.selected,\n                }))\n                .filter((val) => val.selected)\n                .map((val) => val.userId);\n\n            await activateMany.mutateAsync({ userIds });\n            location.reload();\n        },\n        [activateMany]\n    );\n\n    const onBanMany = useCallback(\n        async (values: Values) => {\n            const userIds: UserId[] = values.users\n                .map((val, index) => ({\n                    userId: index as UserId,\n                    selected: val.selected,\n                }))\n                .filter((val) => val.selected)\n                .map((val) => val.userId);\n\n            await banMany.mutateAsync({ userIds, reason: values.banReason });\n            location.reload();\n        },\n        [banMany]\n    );\n\n    return (\n        <>\n            <table>\n                <thead>\n                    <tr>\n                        <th>select</th>\n                        <th>e-mail</th>\n                        <th>self-project handle</th>\n                        <th>actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {pendingUsers.data?.pages.map((page) =>\n                        page.users.map((user) => (\n                            <tr key={user.userId}>\n                                <td>\n                                    <input\n                                        type=\"checkbox\"\n                                        {...register(\n                                            `users.${user.userId}.selected` as const\n                                        )}\n                                    />\n                                </td>\n                                <td>{user.email}</td>\n                                <td>{user.selfProject.handle}</td>\n                                <td>\n                                    <ul>\n                                        <li>\n                                            <a\n                                                href={sitemap.public.moderation\n                                                    .manageUser({\n                                                        userId: user.userId,\n                                                    })\n                                                    .toString()}\n                                            >\n                                                manage user\n                                            </a>\n                                        </li>\n                                        <li>\n                                            <a\n                                                href={sitemap.public.moderation\n                                                    .manageProject({\n                                                        projectHandle:\n                                                            user.selfProject\n                                                                .handle,\n                                                    })\n                                                    .toString()}\n                                            >\n                                                manage project\n                                            </a>\n                                        </li>\n                                    </ul>\n                                </td>\n                            </tr>\n                        ))\n                    )}\n                </tbody>\n            </table>\n            {pendingUsers.hasNextPage && (\n                <Button\n                    buttonStyle=\"authn\"\n                    color=\"authn-other\"\n                    onClick={() => pendingUsers.fetchNextPage()}\n                    disabled={pendingUsers.isFetchingNextPage}\n                >\n                    load more\n                </Button>\n            )}\n            <Button\n                buttonStyle=\"authn\"\n                color=\"authn-other\"\n                disabled={!anyUsersSelected}\n                onClick={handleSubmit(onActivateMany)}\n            >\n                activate selected users\n            </Button>\n            <div className=\"mt-3 flex max-w-fit flex-col gap-2 rounded-lg border border-accent p-3\">\n                <label>reason for banning users:</label>\n                <textarea {...register(\"banReason\")} />\n                <Button\n                    buttonStyle=\"authn\"\n                    color=\"authn-other\"\n                    disabled={!anyUsersSelected}\n                    onClick={handleSubmit(onBanMany)}\n                >\n                    ban selected users\n                </Button>\n            </div>\n        </>\n    );\n};\n\nconst BulkActivatePage: FunctionComponent<{\n    numUnactivated: number;\n    numUnactivatable: number;\n    mostRecentInviteDate: string;\n}> = ({ numUnactivated, numUnactivatable, mostRecentInviteDate }) => {\n    const id = useId();\n    const utils = trpc.useContext();\n\n    useEffect(() => {\n        // prefetch the first page of the unactivated user list\n        void utils.moderation.user.unactivatedUsers.prefetchInfinite({\n            limit: 50,\n        });\n    }, [utils.moderation.user.unactivatedUsers]);\n\n    return (\n        <>\n            <Helmet title=\"bulk activate\" />\n            <div>\n                <h1>Bulk user activation</h1>\n                <a href={sitemap.public.moderation.home().toString()}>\n                    <ChevronLeftIcon className=\"inline h-6 w-6\" />\n                    back to moderation home\n                </a>\n                <p>\n                    There are currently {numUnactivated} unactivated users. (\n                    {numUnactivatable} without verified email)\n                </p>\n                <p>\n                    Last invite generated{\" \"}\n                    {DateTime.fromISO(mostRecentInviteDate).toRelative({\n                        style: \"long\",\n                    })}\n                </p>\n                <form\n                    method=\"post\"\n                    className=\"my-3 flex flex-col gap-3 rounded-lg border border-accent p-3\"\n                >\n                    <input type=\"hidden\" value={0} name=\"numToActivate\" />\n                    <AuthnButton as=\"button\" type=\"submit\">\n                        activate all users\n                    </AuthnButton>\n                </form>\n                <form\n                    method=\"post\"\n                    className=\"my-3 flex flex-col gap-3 rounded-lg border border-accent p-3\"\n                >\n                    <fieldset className=\"flex flex-col gap-1\">\n                        <label htmlFor={`${id}:numToActivate`}>\n                            number to activate\n                        </label>\n                        <input\n                            type=\"number\"\n                            min={1}\n                            max={Math.min(numUnactivated, 999)}\n                            step={1}\n                            id={`${id}:numToActivate`}\n                            name=\"numToActivate\"\n                            defaultValue={Math.min(numUnactivated, 999)}\n                        />\n                    </fieldset>\n                    <AuthnButton as=\"button\" type=\"submit\">\n                        activate users\n                    </AuthnButton>\n                </form>\n            </div>\n            <hr />\n            <div>\n                <Disclosure>\n                    <Disclosure.Button\n                        as={Button}\n                        buttonStyle=\"authn\"\n                        color=\"authn-primary\"\n                    >\n                        show unactivated users\n                    </Disclosure.Button>\n                    <Disclosure.Panel>\n                        <Suspense fallback={<Loading />}>\n                            <UserList />\n                        </Suspense>\n                    </Disclosure.Panel>\n                </Disclosure>\n            </div>\n        </>\n    );\n};\n\nexport default BulkActivatePage;\n","import * as React from \"react\";\n\nfunction ChevronLeftIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M15.75 19.5L8.25 12l7.5-7.5\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ChevronLeftIcon);\nexport default ForwardRef;"],"names":["ButtonStyle","z","ButtonColor","baseColors","buttonStyle","color","className","optional","classnames","pillClasses","roundrectClasses","authnStyleClasses","cherryClasses","strawberryClasses","redClasses","greenClasses","mangoClasses","notBlackClasses","accentClasses","secondaryClasses","authnPrimaryColorClasses","authnOtherColorClasses","sharedClasses","props","Button","React","ref","classes","_extends","children","displayName","LinkButton","UserList","pendingUsers","trpc","limit","suspense","getNextPageParam","lastPage","nextCursor","activateMany","banMany","register","handleSubmit","watch","useForm","usersValues","anyUsersSelected","usersValue","selected","onActivateMany","useCallback","async","userIds","values","users","map","val","index","userId","filter","mutateAsync","location","reload","onBanMany","reason","banReason","data","pages","page","user","key","type","email","selfProject","handle","href","sitemap","toString","projectHandle","hasNextPage","onClick","fetchNextPage","disabled","isFetchingNextPage","BulkActivatePage","numUnactivated","numUnactivatable","mostRecentInviteDate","id","useId","utils","useEffect","moderation","unactivatedUsers","prefetchInfinite","Helmet","title","ChevronLeftIcon","DateTime","toRelative","style","method","value","name","AuthnButton","as","htmlFor","min","max","Math","step","defaultValue","Disclosure","Suspense","fallback","Loading","ForwardRef","titleId","svgRef","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d"],"sourceRoot":""}