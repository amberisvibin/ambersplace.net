{"version":3,"file":"client-preact-components-pages-user-settings.41d3820dcc9ac54eddfa.js","mappings":"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","sources":["webpack:///./lib/auth-helpers.ts","webpack:///./preact/components/elements/button.tsx","webpack:///./preact/components/elements/settings-row.tsx","webpack:///./preact/components/elements/styled-input.tsx","webpack:///./preact/components/settings/user-settings/change-email-form.tsx","webpack:///./preact/components/settings/user-settings/change-password-form.tsx","webpack:///./preact/components/settings/user-settings/cw-filters-form.tsx","webpack:///./preact/components/settings/user-settings/display-settings-form.tsx","webpack:///./preact/components/settings/user-settings/invites-form.tsx","webpack:///./preact/components/settings/user-settings/moderator-settings-form.tsx","webpack:///./preact/components/settings/user-settings/queue-display.tsx","webpack:///../shared/api-types/subscriptions.ts","webpack:///./preact/components/settings/user-settings/subscription-form.tsx","webpack:///./preact/components/settings/user-settings/tag-filters-form.tsx","webpack:///./lib/2fa-management-machine.ts","webpack:///./preact/components/settings/user-settings/two-factor-management.tsx","webpack:///./preact/components/elements/project-chooser.tsx","webpack:///./preact/components/settings/user-settings/change-self-project-form.tsx","webpack:///./preact/components/settings/user-settings/queue-for-delete-form.tsx","webpack:///./preact/components/pages/user-settings.tsx","webpack:///./preact/components/settings/form-submit-button-row.tsx","webpack:///./preact/components/settings/shared.tsx","webpack:///./preact/components/unfriendly-timestamp.tsx"],"sourcesContent":["import * as LoginV1Types from \"@/shared/api-types/login-v1\";\n\nexport default class AuthHelpers {\n    static async getSalt(email: string): Promise<string> {\n        const url = new URL(\"/api/v1/login/salt\", document.URL);\n        url.searchParams.append(\"email\", email);\n\n        const response = await fetch(url.toString()).then((resp) =>\n            resp.json().then((data) => data as LoginV1Types.GetSaltResp)\n        );\n\n        return response.salt;\n    }\n\n    static async hashPasswordInWorker(\n        email: string,\n        salt: string,\n        password: string\n    ): Promise<string> {\n        // run this slow hash function in the background\n        // const hashWorker = new Worker(\"/static/hash-worker.js\");\n        const hashWorker = new Worker(\n            new URL(\"./hash-worker.ts\", import.meta.url)\n        );\n\n        return new Promise((resolve) => {\n            hashWorker.onmessage = (\n                e: MessageEvent<{\n                    clientHash: string;\n                }>\n            ): void => {\n                resolve(e.data.clientHash);\n            };\n\n            hashWorker.postMessage({ email, password, salt });\n        });\n    }\n}\n","import classnames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { z } from \"zod\";\n\nexport const ButtonStyle = z.enum([\"pill\", \"roundrect\", \"authn\"]);\nexport type ButtonStyle = z.infer<typeof ButtonStyle>;\n\nexport const ButtonColor = z.enum([\n    \"cherry\",\n    \"strawberry\",\n    \"mango\",\n    \"not-black\",\n    \"red\",\n    \"green\",\n    \"accent\",\n    \"secondary\",\n    \"authn-primary\",\n    \"authn-other\",\n]);\nexport type ButtonColor = z.infer<typeof ButtonColor>;\n\nexport const SharedProps = z.object({\n    buttonStyle: ButtonStyle,\n    color: ButtonColor,\n    className: z.string().optional(),\n});\nexport type SharedProps = z.infer<typeof SharedProps>;\n\nconst baseColors = classnames(\"bg-notWhite\", \"hover:text-notWhite\");\n\n// WHY NOT HAVE THESE AS INTERPOLATED CLASS NAMES?\n// tailwind jit doesn't handle interpolated class names!\n// you have to have the full class name written for it to pick up on a string as\n// a class name! so we do this\nconst pillClasses = classnames(\n    \"font-atkinson\",\n    \"font-bold\",\n    \"rounded-full\",\n    \"border-2\"\n);\n\nconst roundrectClasses = classnames(\"body-2\", \"rounded-lg\");\n\nconst authnStyleClasses = classnames(\n    \"flex\",\n    \"h-12\",\n    \"items-center\",\n    \"justify-center\",\n    \"rounded-lg\",\n    \"px-6\",\n    \"text-lg\"\n);\n\nconst cherryClasses = classnames(\n    \"border-cherry\",\n    \"hover:bg-cherry\",\n    \"text-cherry\",\n    \"active:bg-cherry-600\",\n    \"active:border-cherry-600\",\n    \"disabled:text-cherry-300\",\n    \"disabled:border-cherry-300\",\n    \"focus:outline-cherry\",\n    \"focus:ring-cherry\",\n    baseColors\n);\nconst strawberryClasses = classnames(\n    \"border-strawberry\",\n    \"hover:bg-strawberry\",\n    \"text-strawberry\",\n    \"active:bg-strawberry-600\",\n    \"active:border-strawberry-600\",\n    \"disabled:text-strawberry-300\",\n    \"disabled:border-strawberry-300\",\n    \"focus:outline-strawberry\",\n    \"focus:ring-strawberry\",\n    baseColors\n);\n\nconst redClasses = classnames(\n    \"border-red\",\n    \"hover:bg-red\",\n    \"text-red\",\n    \"active:bg-red-600\",\n    \"active:border-red-600\",\n    \"disabled:text-red-300\",\n    \"disabled:border-red-300\",\n    \"focus:outline-red\",\n    baseColors\n);\n\nconst greenClasses = classnames(\n    \"border-green\",\n    \"hover:bg-green\",\n    \"text-green\",\n    \"active:bg-green-600\",\n    \"active:border-green-600\",\n    \"disabled:text-green-300\",\n    \"disabled:border-green-300\",\n    \"focus:outline-green\",\n    baseColors\n);\nconst mangoClasses = classnames(\n    \"border-mango\",\n    \"hover:bg-mango\",\n    \"text-mango\",\n    \"bg-notBlack\",\n    \"hover:text-notBlack\"\n);\nconst notBlackClasses = classnames(\n    \"border-notBlack\",\n    \"hover:bg-notBlack\",\n    \"text-notBlack\",\n    \"focus:outline-notBlack\",\n    \"focus:ring-notBlack\",\n    baseColors\n);\n\nconst accentClasses = classnames(\n    \"border-accent\",\n    \"text-accent\",\n    \"bg-foreground\",\n    \"hover:bg-accent\",\n    \"hover:text-text\"\n);\n\nconst secondaryClasses = classnames(\n    \"bg-secondary\",\n    \"text-notWhite\",\n    \"dark:text-notBlack\",\n    \"hover:bg-secondary-600\"\n);\n\nconst authnPrimaryColorClasses = classnames(\n    \"bg-foreground\",\n    \"text-text\",\n    \"hover:bg-foreground-600\",\n    \"active:bg-foreground-700\",\n    \"disabled:bg-foreground-200\"\n);\n\nconst authnOtherColorClasses = classnames(\n    \"border-2\",\n    \"border-foreground\",\n    \"text-foreground\",\n    \"hover:bg-longan-200\"\n);\n\nconst sharedClasses = (props: SharedProps) =>\n    classnames(\n        \"leading-none\",\n        \"align-middle\",\n        \"py-2\",\n        \"px-4\",\n        \"no-select\",\n        props.className,\n        {\n            [pillClasses]: props.buttonStyle === \"pill\",\n            [roundrectClasses]: props.buttonStyle === \"roundrect\",\n            [authnStyleClasses]: props.buttonStyle === \"authn\",\n            [cherryClasses]: props.color === \"cherry\",\n            [strawberryClasses]: props.color === \"strawberry\",\n            [mangoClasses]: props.color === \"mango\",\n            [notBlackClasses]: props.color === \"not-black\",\n            [redClasses]: props.color === \"red\",\n            [accentClasses]: props.color === \"accent\",\n            [greenClasses]: props.color === \"green\",\n            [secondaryClasses]: props.color === \"secondary\",\n            [authnPrimaryColorClasses]: props.color === \"authn-primary\",\n            [authnOtherColorClasses]: props.color === \"authn-other\",\n        }\n    );\n\nexport const Button: FunctionComponent<\n    SharedProps &\n        React.ButtonHTMLAttributes<HTMLButtonElement> & {\n            ref?: React.Ref<HTMLButtonElement>;\n        }\n> = React.forwardRef(({ buttonStyle, color, className, ...props }, ref) => {\n    const classes = sharedClasses({\n        buttonStyle,\n        color,\n        className,\n        ...props,\n    });\n    return (\n        <button {...props} className={classes} ref={ref}>\n            {props.children}\n        </button>\n    );\n});\nButton.displayName = \"Button\";\n\nexport const LinkButton: FunctionComponent<\n    SharedProps &\n        React.AnchorHTMLAttributes<HTMLAnchorElement> & {\n            ref?: React.Ref<HTMLAnchorElement>;\n        }\n> = React.forwardRef(({ buttonStyle, color, ...props }, ref) => {\n    const classes = sharedClasses({ buttonStyle, color, ...props });\n    return (\n        <a {...props} className={classes} ref={ref}>\n            {props.children}\n        </a>\n    );\n});\nLinkButton.displayName = \"LinkButton\";\n","import React, { FunctionComponent, ReactElement, ReactNode } from \"react\";\nimport { InfoBox, InfoBoxLevel } from \"./info-box\";\nimport classNames from \"classnames\";\n\ntype SettingsRowProps = {\n    bigLabel: ReactNode;\n    smallLabel?: string;\n    inputElement: ReactElement<{ id: string }>;\n    infoBoxLevel?: InfoBoxLevel;\n    infoBoxContent?: ReactElement;\n    customDescription?: ReactElement;\n    disabled?: boolean;\n};\n\nexport const SettingsRow: FunctionComponent<SettingsRowProps> = ({\n    bigLabel,\n    smallLabel,\n    inputElement,\n    infoBoxLevel,\n    infoBoxContent,\n    customDescription,\n    disabled,\n}) => {\n    const bigLabelRowSpanClasses = smallLabel ? \"row-span-1\" : \"row-span-2\";\n    const customDescriptionContent = customDescription ?? null;\n\n    return (\n        <div className=\"grid grid-cols-[1fr_min-content] grid-rows-[min-content] items-center gap-2.5 pt-2.5\">\n            <>\n                <label\n                    htmlFor={inputElement.props.id}\n                    className={classNames(\n                        `col-start-1 row-start-1 font-bold`,\n                        bigLabelRowSpanClasses,\n                        { \"text-gray-300\": disabled }\n                    )}\n                >\n                    {bigLabel}\n                </label>\n\n                {smallLabel ? (\n                    <label\n                        htmlFor={inputElement.props.id}\n                        className={classNames(\n                            \"col-start-1 row-start-2 align-middle\",\n                            { \"text-gray-300\": disabled }\n                        )}\n                    >\n                        {smallLabel}\n                    </label>\n                ) : null}\n\n                <div className=\"col-start-2 row-span-2 row-start-1\">\n                    {inputElement}\n                </div>\n\n                {infoBoxLevel ? (\n                    <InfoBox\n                        level={infoBoxLevel}\n                        className=\"col-span-2 col-start-1\"\n                    >\n                        {infoBoxContent}\n                    </InfoBox>\n                ) : (\n                    customDescriptionContent\n                )}\n\n                <hr className=\"col-span-2 col-start-1 w-full border-gray-300\" />\n            </>\n        </div>\n    );\n};\n","import { CheckIcon, XMarkIcon } from \"@heroicons/react/24/outline\";\nimport classNames from \"classnames\";\nimport React, {\n    InputHTMLAttributes,\n    useEffect,\n    useMemo,\n    useState,\n} from \"react\";\nimport {\n    FieldValues,\n    useController,\n    UseControllerProps,\n    UseFormTrigger,\n} from \"react-hook-form\";\n\ntype InputStyle = \"light\" | \"dark\" | \"dynamic\";\n\ntype StyledInputProps<T extends FieldValues> = {\n    style?: InputStyle;\n    showValidity?: boolean;\n} & UseControllerProps<T> & { trigger: UseFormTrigger<T> } & Pick<\n        InputHTMLAttributes<HTMLInputElement>,\n        | \"type\"\n        | \"autoComplete\"\n        | \"placeholder\"\n        | \"max\"\n        | \"min\"\n        | \"step\"\n        | \"readOnly\"\n        | \"disabled\"\n    >;\n\nexport const StyledInput = <T extends FieldValues>({\n    style = \"light\",\n    showValidity = true,\n    name,\n    control,\n    rules,\n    trigger,\n    ...props\n}: StyledInputProps<T>) => {\n    const { field, fieldState } = useController<T>({\n        name,\n        control,\n        rules,\n    });\n    const { name: fieldName, onChange } = field;\n\n    // setup our own ref so we can track field value\n    const [directRef, setDirectRef] = useState<HTMLInputElement | null>();\n    useEffect(() => {\n        field.ref(directRef);\n    }, [directRef, field]);\n\n    const {\n        inputStyleClasses,\n        contentDivStyleClasses,\n        validityIconStyleClasses,\n    } = useMemo(() => {\n        switch (style) {\n            case \"light\":\n                return {\n                    inputStyleClasses: `border-gray-600 text-notBlack\n                        placeholder:text-gray-600\n                        focus:border-notBlack disabled:border-gray-300`,\n                    contentDivStyleClasses: `to-notWhite`,\n                    validityIconStyleClasses: `bg-notWhite`,\n                };\n            case \"dynamic\":\n                return {\n                    inputStyleClasses: \"co-styled-input\",\n                    contentDivStyleClasses: \"co-styled-input-content\",\n                    validityIconStyleClasses: \"co-styled-input-validity-icon\",\n                };\n            case \"dark\":\n            default:\n                return {\n                    inputStyleClasses: `border-gray-400 text-notWhite \n                        placeholder:text-gray-400\n                        focus:border-notWhite read-only:bg-gray-700`,\n                    contentDivStyleClasses: `to-notBlack`,\n                    validityIconStyleClasses: `bg-notBlack`,\n                };\n        }\n    }, [style]);\n\n    // manually validate when we don't get an input event\n    // can happen on browser autofill\n    useEffect(() => {\n        if (\n            directRef &&\n            directRef.value &&\n            directRef.value !== props.defaultValue &&\n            directRef.value !== field.value &&\n            !fieldState.isTouched\n        ) {\n            onChange(directRef.value);\n            void trigger(fieldName, { shouldFocus: true });\n        }\n    }, [\n        directRef,\n        field.value,\n        fieldName,\n        fieldState.isTouched,\n        onChange,\n        props.defaultValue,\n        trigger,\n    ]);\n    return (\n        <div className=\"relative\">\n            <input\n                className={classNames(\n                    `\n                        w-full min-w-[15rem] rounded-lg border-2 bg-transparent\n                    `,\n                    inputStyleClasses\n                )}\n                {...props}\n                {...field}\n                ref={setDirectRef}\n            />\n            {showValidity && !props.readOnly && fieldState.isTouched ? (\n                <>\n                    <div\n                        className={classNames(\n                            `\n                                absolute bottom-0 right-9 top-0 my-auto h-6 w-3 \n                                bg-gradient-to-r from-transparent\n                            `,\n                            contentDivStyleClasses\n                        )}\n                    />\n                    {fieldState.invalid ? (\n                        <XMarkIcon\n                            className={classNames(\n                                `\n                                    absolute bottom-0 right-3 top-0 my-auto h-6 \n                                    w-6 text-red\n                                `,\n                                validityIconStyleClasses\n                            )}\n                        />\n                    ) : (\n                        <CheckIcon\n                            className={classNames(\n                                `\n                                    absolute bottom-0 right-3 top-0 my-auto h-6\n                                    w-6 bg-notWhite text-green\n                                `,\n                                validityIconStyleClasses\n                            )}\n                        />\n                    )}\n                </>\n            ) : null}\n        </div>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport type * as LoginV1Types from \"@/shared/api-types/login-v1\";\nimport sitemap from \"@/shared/sitemap\";\nimport axios, { AxiosResponse } from \"axios\";\nimport React, { FunctionComponent, useCallback } from \"react\";\nimport { SubmitHandler, useForm, Validate } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useUserInfo } from \"../../../providers/user-info-provider\";\nimport { AuthnButton } from \"../../partials/authn-button\";\nimport { StyledInput } from \"../../elements/styled-input\";\nimport { sectionBoxClasses, sectionTitleClasses } from \"../shared\";\n\ntype Inputs = {\n    email: string;\n};\n\nexport const ChangeEmailForm: FunctionComponent = () => {\n    const { t } = useTranslation();\n    const { email: currentEmail, emailVerified } = useUserInfo();\n    const {\n        control,\n        handleSubmit,\n        trigger,\n        formState: { errors, isSubmitting, isSubmitSuccessful },\n    } = useForm<Inputs>({\n        defaultValues: { email: currentEmail ?? undefined },\n    });\n    const utils = trpc.useContext();\n    const changeEmailMutation = trpc.login.changeEmail.useMutation({\n        onSuccess: () => utils.login.emailChangeInProgress.invalidate(),\n    });\n\n    const resendVerificationMutation =\n        trpc.login.resendVerification.useMutation({});\n\n    const onSubmit: SubmitHandler<Inputs> = async ({ email }) => {\n        await changeEmailMutation.mutateAsync({ newEmail: email });\n    };\n\n    const validateEmail: Validate<string> = useCallback(\n        async (email: string) => {\n            try {\n                const resp = await axios.post<\n                    LoginV1Types.CheckEmailResp,\n                    AxiosResponse<LoginV1Types.CheckEmailResp>,\n                    LoginV1Types.CheckEmailReq\n                >(\n                    sitemap.public.apiV1.checkEmail().toString(),\n                    {\n                        email,\n                    },\n                    { responseType: \"json\" }\n                );\n\n                return resp.data.valid === true ? true : resp.data.reason;\n            } catch (e) {\n                return t(\"common:unknown-error\").toString();\n            }\n        },\n        [t]\n    );\n\n    const emailChangeInProgress = trpc.login.emailChangeInProgress.useQuery();\n\n    return (\n        <div className={sectionBoxClasses}>\n            <h4 className={sectionTitleClasses}>change email</h4>\n            {emailChangeInProgress.data ? (\n                <p>\n                    You're already changing your e-email address to{\" \"}\n                    {emailChangeInProgress.data}. Click the verify link we sent\n                    there to finish it!\n                </p>\n            ) : null}\n            <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"flex flex-col gap-4\"\n            >\n                <div className=\"flex flex-col\">\n                    <label>\n                        <p className=\"font-bold\">email</p>\n                        <StyledInput\n                            trigger={trigger}\n                            name=\"email\"\n                            control={control}\n                            rules={{\n                                required: t(\n                                    \"client:register.email.required\"\n                                ).toString(),\n                                validate: validateEmail,\n                            }}\n                            type=\"email\"\n                            autoComplete=\"email\"\n                            placeholder=\"bradley@example.com\"\n                        />\n                    </label>\n                    <p className=\"text-red\">\n                        {errors.email ? errors.email.message : null}\n                    </p>\n                    {!emailVerified ? (\n                        <p className=\"mt-2 flex flex-row gap-2\">\n                            <button\n                                className=\"font-bold underline\"\n                                onClick={() =>\n                                    resendVerificationMutation.mutate()\n                                }\n                                disabled={resendVerificationMutation.isLoading}\n                            >\n                                resend verification\n                            </button>\n                            {resendVerificationMutation.isLoading ? (\n                                <span>sending...</span>\n                            ) : resendVerificationMutation.isSuccess ? (\n                                <span className=\"text-green\">sent!</span>\n                            ) : resendVerificationMutation.isError ? (\n                                <span className=\"text-red\">\n                                    <>\n                                        error:{\" \"}\n                                        {\n                                            resendVerificationMutation.failureReason\n                                        }\n                                    </>\n                                </span>\n                            ) : null}\n                        </p>\n                    ) : null}\n                </div>\n                <div className=\"flex w-full flex-row items-center justify-end gap-4 font-bold text-notWhite\">\n                    {isSubmitSuccessful ? (\n                        <p className=\"text-green\">\n                            Email changed! Check for a new verification email!\n                        </p>\n                    ) : null}\n\n                    <AuthnButton\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                        className=\"font-bold\"\n                    >\n                        change email\n                    </AuthnButton>\n                </div>\n            </form>\n        </div>\n    );\n};\n","import AuthHelpers from \"@/client/lib/auth-helpers\";\nimport type * as LoginV1Types from \"@/shared/api-types/login-v1\";\nimport sitemap from \"@/shared/sitemap\";\nimport axios, { AxiosResponse } from \"axios\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useUserInfo } from \"../../../providers/user-info-provider\";\nimport { AuthnButton } from \"../../partials/authn-button\";\nimport { StyledInput } from \"../../elements/styled-input\";\nimport { sectionBoxClasses, sectionTitleClasses } from \"../shared\";\n\ntype Inputs = {\n    oldPassword: string;\n    newPassword: string;\n    confirmNewPassword: string;\n};\n\nexport const ChangePasswordForm: FunctionComponent = () => {\n    const userInfo = useUserInfo();\n    const { t } = useTranslation();\n    const [formError, setFormError] = useState(\"\");\n    const {\n        handleSubmit,\n        control,\n        getValues,\n        formState: { errors, isSubmitting, isSubmitSuccessful },\n        reset,\n        trigger,\n    } = useForm<Inputs>({ mode: \"onTouched\" });\n\n    const onSubmit: SubmitHandler<Inputs> = async ({\n        oldPassword,\n        newPassword,\n    }) => {\n        setFormError(\"\");\n\n        if (!userInfo.loggedIn) return;\n\n        const salt = await AuthHelpers.getSalt(userInfo.email);\n        const oldClientHash = await AuthHelpers.hashPasswordInWorker(\n            userInfo.email,\n            salt,\n            oldPassword\n        );\n        const newClientHash = await AuthHelpers.hashPasswordInWorker(\n            userInfo.email,\n            salt,\n            newPassword\n        );\n\n        const params: LoginV1Types.ChangePasswordReq = {\n            type: \"change\",\n            newClientHash,\n            oldClientHash,\n        };\n\n        try {\n            await axios.post<\n                any,\n                AxiosResponse<any>,\n                LoginV1Types.ChangePasswordReq\n            >(sitemap.public.apiV1.changePassword().toString(), params);\n            reset({ confirmNewPassword: \"\", newPassword: \"\", oldPassword: \"\" });\n        } catch (e) {\n            setFormError(\"Changing password failed.\");\n        }\n    };\n    return (\n        <div id=\"password-email\" className={sectionBoxClasses}>\n            <h4 className={sectionTitleClasses}>change password</h4>\n\n            <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"flex flex-col gap-4\"\n            >\n                <div>\n                    <label className=\"flex flex-col\">\n                        <p className=\"font-bold\">old password</p>\n                        <StyledInput\n                            trigger={trigger}\n                            name=\"oldPassword\"\n                            control={control}\n                            rules={{\n                                required: t(\n                                    \"client:register.password.required\"\n                                ).toString(),\n                                minLength: {\n                                    value: 8,\n                                    message: t(\n                                        \"client:register.password.min-length\"\n                                    ).toString(),\n                                },\n                            }}\n                            type=\"password\"\n                            autoComplete=\"current-password\"\n                            placeholder=\"hunter2\"\n                        />\n                    </label>\n\n                    <p className=\"text-red\" role=\"alert\">\n                        {errors.oldPassword ? errors.oldPassword.message : null}\n                    </p>\n                </div>\n\n                <div>\n                    <label className=\"flex flex-col\">\n                        <p className=\"font-bold\">new password</p>\n                        <StyledInput\n                            trigger={trigger}\n                            name=\"newPassword\"\n                            control={control}\n                            rules={{\n                                required: t(\n                                    \"client:register.password.required\",\n                                    \"Password is required!\"\n                                ).toString(),\n                                minLength: {\n                                    value: 8,\n                                    message: t(\n                                        \"client:register.password.min-length\",\n                                        \"Password must be at least 8 characters!\"\n                                    ).toString(),\n                                },\n                            }}\n                            type=\"password\"\n                            autoComplete=\"new-password\"\n                            placeholder=\"hunter3\"\n                        />\n                    </label>\n\n                    <p className=\"text-red\" role=\"alert\">\n                        {errors.newPassword ? errors.newPassword.message : null}\n                    </p>\n                </div>\n\n                <div>\n                    <label className=\"flex flex-col\">\n                        <p className=\"font-bold\">confirm new password</p>\n                        <StyledInput\n                            trigger={trigger}\n                            name=\"confirmNewPassword\"\n                            control={control}\n                            rules={{\n                                required: t(\n                                    \"client:register.password.required\",\n                                    \"Password is required!\"\n                                ).toString(),\n                                validate: (value) =>\n                                    value === getValues().newPassword ||\n                                    t(\n                                        \"client:register.password.confirm-password-mismatch\",\n                                        \"Passwords must match!\"\n                                    ).toString(),\n                            }}\n                            type=\"password\"\n                            autoComplete=\"new-password\"\n                            placeholder=\"hunter3\"\n                        />\n                    </label>\n\n                    <p className=\"text-red\" role=\"alert\">\n                        {errors.confirmNewPassword\n                            ? errors.confirmNewPassword.message\n                            : null}\n                    </p>\n                </div>\n\n                <div className=\"flex w-full flex-row items-center justify-end gap-4 font-bold text-notWhite\">\n                    {isSubmitSuccessful ? (\n                        <p className=\"text-green\">Password changed!</p>\n                    ) : null}\n                    {formError ? (\n                        <p className=\"text-red\" role=\"alert\">\n                            {formError}\n                        </p>\n                    ) : null}\n\n                    <AuthnButton\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                        className=\"font-bold\"\n                    >\n                        change password\n                    </AuthnButton>\n                </div>\n            </form>\n        </div>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport { ExclamationTriangleIcon as ExclamationIconOutline } from \"@heroicons/react/24/outline\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent, ReactNode, useState } from \"react\";\nimport { InfoBox } from \"../../elements/info-box\";\nimport { AuthnButton } from \"../../partials/authn-button\";\nimport { TokenInput } from \"../../token-input\";\nimport { sectionBoxClasses, sectionTitleClasses } from \"../shared\";\nimport { SettingsRow } from \"../../elements/settings-row\";\n\nconst commonCWBoxClasses = \"rounded border-cherry border p-2\";\n\nexport const CWFiltersForm: FunctionComponent = () => {\n    const utils = trpc.useContext();\n    const { data: initialFilters } = trpc.users.cwFilters.query.useQuery(\n        undefined,\n        {\n            suspense: true,\n        }\n    );\n\n    const {\n        mutate: saveFilters,\n        error,\n        isError,\n        isLoading,\n        isSuccess,\n    } = trpc.users.cwFilters.mutate.useMutation({\n        onSuccess: async () => {\n            await utils.users.cwFilters.query.invalidate();\n        },\n    });\n\n    const [silence, setSilence] = useState(initialFilters?.silence ?? []);\n    const [autoexpand, setAutoexpand] = useState(\n        initialFilters?.autoexpand ?? []\n    );\n    const [autoExpandAllCws, setAutoExpandAllCws] = useState(\n        initialFilters?.autoExpandAllCws ?? false\n    );\n\n    const [visible, setVisible] = useState(false);\n    const onShowSilencedCWs = () => setVisible(true);\n\n    return (\n        <div\n            id=\"post-visibility\"\n            // FIXME: theme forced to light here because we haven't rethemed the rest of the site yet\n            data-theme=\"light\"\n            className={classNames(\"co-themed-box\", sectionBoxClasses)}\n        >\n            <h4 className={sectionTitleClasses}>filtered content warnings</h4>\n\n            <InfoBox level=\"info\" className=\"prose max-w-full\">\n                Content warnings are matched <em>case insensitively</em>; hiding\n                or showing \"spiders\" also applies to \"Spiders\" and \"SPIDERS\".\n                However, partial matches don't work right now, so posts with a\n                content warning for \"big spiders\" will still show up.\n            </InfoBox>\n\n            <p className=\"prose\">\n                show me posts with these content warnings{\" \"}\n                <strong className=\"font-bold text-cherry\">\n                    without clicking through\n                </strong>\n                :\n            </p>\n\n            <TokenInput\n                TokenIcon={ExclamationIconOutline}\n                className={commonCWBoxClasses}\n                tokens={autoexpand}\n                setTokens={setAutoexpand}\n            />\n\n            <SettingsRow\n                bigLabel={\n                    <>\n                        show <span className=\"font-bold text-cherry\">ALL</span>{\" \"}\n                        posts with content warnings{\" \"}\n                        <span className=\"font-bold text-cherry\">\n                            without clicking through\n                        </span>\n                    </>\n                }\n                infoBoxLevel=\"info\"\n                infoBoxContent={\n                    <div className=\"prose prose-sm\">\n                        <p>\n                            This will automatically expand ALL posts with\n                            content warnings. However, posts which contain\n                            content warnings you have asked to{\" \"}\n                            <span className=\"font-bold text-cherry\">\n                                silence\n                            </span>{\" \"}\n                            will still be fully hidden.\n                        </p>\n                    </div>\n                }\n                inputElement={\n                    <input\n                        type=\"checkbox\"\n                        checked={autoExpandAllCws}\n                        onChange={() => setAutoExpandAllCws((val) => !val)}\n                        className=\"h-6 w-6 rounded-lg border-2 border-foreground bg-notWhite text-foreground focus:ring-foreground\"\n                    />\n                }\n            />\n\n            <p className=\"prose\">\n                <strong className=\"font-bold text-cherry\">silence</strong> posts\n                with these content warnings, hiding them completely:\n            </p>\n\n            {visible ? (\n                <div className={commonCWBoxClasses}>\n                    <TokenInput\n                        TokenIcon={ExclamationIconOutline}\n                        tokens={silence}\n                        setTokens={setSilence}\n                    />\n                </div>\n            ) : (\n                <button\n                    className={classNames(\n                        commonCWBoxClasses,\n                        \"cursor-pointer bg-strawberry-100 text-left\"\n                    )}\n                    onClick={onShowSilencedCWs}\n                    type=\"button\"\n                >\n                    click to show list of silenced content warnings\n                </button>\n            )}\n\n            <div className=\"flex w-full flex-row items-center justify-end gap-4 font-bold text-notWhite\">\n                {isSuccess ? (\n                    <p className=\"text-green\">Settings saved!</p>\n                ) : null}\n                {isError ? <p className=\"text-red\">{error.message}</p> : null}\n\n                <AuthnButton\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"font-bold\"\n                    onClick={() =>\n                        saveFilters({ silence, autoexpand, autoExpandAllCws })\n                    }\n                >\n                    save settings\n                </AuthnButton>\n            </div>\n        </div>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport { useHasCohostPlus } from \"@/client/preact/hooks/data-loaders\";\nimport { useDisplayPrefs } from \"@/client/preact/hooks/use-display-prefs\";\nimport { env } from \"@/shared/env\";\nimport { FeatureFlag } from \"@/shared/types/feature-flags\";\nimport { WireUserModel } from \"@/shared/types/wire-models\";\nimport { useFlag } from \"@unleash/proxy-client-react\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { InfoBox } from \"../../elements/info-box\";\nimport { SettingsRow } from \"../../elements/settings-row\";\nimport { AuthnButton } from \"../../partials/authn-button\";\nimport { sectionTitleClasses, subsectionTitleClasses } from \"../shared\";\nimport { HomeView, PostBoxThemeSetting } from \"@/shared/types/display-prefs\";\nimport { EllipsisHorizontalIcon } from \"@heroicons/react/24/outline\";\n\ntype DisplaySettingsFormProps = {\n    user: WireUserModel;\n};\n\ntype Inputs = {\n    collapseAdultContent: boolean;\n    collapseLongThreads: boolean;\n    gifsStartPaused: boolean;\n    pauseProfileGifs: boolean;\n    enableEmbeds: boolean;\n    externalLinksInNewTab: boolean;\n    enableNotificationCount: boolean;\n    suggestedFollowsDismissed: boolean;\n    enableMobileQuickShare: boolean;\n    beatsTimestamps: boolean;\n    disableModalPostComposer: boolean;\n    homeView: HomeView;\n    defaultShow18PlusPostsInSearches: boolean;\n    defaultPostBoxTheme: PostBoxThemeSetting;\n    previewFeatures_lexicalPostEditor: boolean;\n    chaosDay2023_showNumbers: boolean;\n};\n\nexport const DisplaySettingsForm: FunctionComponent<\n    DisplaySettingsFormProps\n> = ({ user }) => {\n    const [submitting, setSubmitting] = useState(false);\n    const [formError, setFormError] = useState(\"\");\n    const [formSuccess, setFormSuccess] = useState(\"\");\n    const displayPrefs = useDisplayPrefs();\n    const hasCohostPlus = useHasCohostPlus();\n    const showNumbersField = useFlag(FeatureFlag.Enum[\"chaos-day-2023\"]);\n    const showPostComposerV2Field = useFlag(\n        FeatureFlag.Enum[\"attachment-composer-v2\"]\n    );\n    const {\n        handleSubmit,\n        formState: { errors },\n        register,\n    } = useForm<Inputs>({\n        mode: \"onTouched\",\n        defaultValues: {\n            collapseAdultContent: user.collapseAdultContent,\n            collapseLongThreads: displayPrefs.collapseLongThreads,\n            gifsStartPaused: displayPrefs.gifsStartPaused,\n            pauseProfileGifs: displayPrefs.pauseProfileGifs,\n            enableEmbeds: !displayPrefs.disableEmbeds,\n            externalLinksInNewTab: displayPrefs.externalLinksInNewTab,\n            enableNotificationCount: displayPrefs.enableNotificationCount,\n            suggestedFollowsDismissed: displayPrefs.suggestedFollowsDismissed,\n            enableMobileQuickShare: displayPrefs.enableMobileQuickShare,\n            beatsTimestamps: hasCohostPlus\n                ? displayPrefs.beatsTimestamps\n                : false,\n            disableModalPostComposer: displayPrefs.disableModalPostComposer,\n            homeView: displayPrefs.homeView,\n            defaultShow18PlusPostsInSearches:\n                displayPrefs.defaultShow18PlusPostsInSearches,\n            defaultPostBoxTheme: displayPrefs.defaultPostBoxTheme,\n            previewFeatures_lexicalPostEditor:\n                displayPrefs.previewFeatures_lexicalPostEditor,\n            chaosDay2023_showNumbers: displayPrefs.chaosDay2023_showNumbers,\n        },\n    });\n\n    const userSettingsMutation = trpc.login.userSettings.useMutation();\n\n    const onSubmit: SubmitHandler<Inputs> = async ({\n        collapseAdultContent,\n        collapseLongThreads,\n        gifsStartPaused,\n        pauseProfileGifs,\n        enableEmbeds,\n        externalLinksInNewTab,\n        enableNotificationCount,\n        suggestedFollowsDismissed,\n        enableMobileQuickShare,\n        beatsTimestamps,\n        disableModalPostComposer,\n        homeView,\n        defaultShow18PlusPostsInSearches,\n        defaultPostBoxTheme,\n        previewFeatures_lexicalPostEditor,\n        chaosDay2023_showNumbers,\n    }) => {\n        setSubmitting(true);\n        setFormError(\"\");\n        setFormSuccess(\"\");\n\n        try {\n            await userSettingsMutation.mutateAsync({\n                explicitlyCollapseAdultContent: collapseAdultContent,\n                collapseLongThreads,\n                gifsStartPaused,\n                pauseProfileGifs,\n                disableEmbeds: !enableEmbeds,\n                externalLinksInNewTab,\n                enableNotificationCount,\n                suggestedFollowsDismissed,\n                enableMobileQuickShare,\n                beatsTimestamps,\n                disableModalPostComposer,\n                homeView,\n                defaultShow18PlusPostsInSearches,\n                defaultPostBoxTheme,\n                previewFeatures_lexicalPostEditor,\n                // we don't modify this here but still need to include it so\n                // that the server doesn't get mad at us\n                autoExpandAllCws: displayPrefs.autoExpandAllCws,\n\n                // time-limited settings\n                chaosDay2023_showNumbers: chaosDay2023_showNumbers,\n            });\n        } catch (e) {\n            setFormError(\"Changing settings failed.\");\n            setSubmitting(false);\n        }\n        setFormSuccess(\"Settings changed!\");\n        setSubmitting(false);\n    };\n\n    const showPreviewFeatures = showPostComposerV2Field;\n\n    return (\n        <div className=\"cohost-shadow-light dark:cohost-shadow-dark relative mx-auto flex max-h-min w-full flex-col gap-4 rounded-lg bg-notWhite px-7 py-8 text-notBlack\">\n            <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"flex flex-col gap-4\"\n            >\n                <h4 className={sectionTitleClasses}>display settings</h4>\n\n                <div className=\"flex flex-col\">\n                    <h5 className={subsectionTitleClasses}>\n                        what posts you see\n                    </h5>\n\n                    <SettingsRow\n                        bigLabel='hide 18+ posts until you click \"show post\"?'\n                        inputElement={\n                            <input\n                                id=\"collapseAdultContent\"\n                                type=\"checkbox\"\n                                className=\"rounded-checkbox\"\n                                {...register(\"collapseAdultContent\")}\n                            />\n                        }\n                    />\n\n                    <SettingsRow\n                        bigLabel=\"include 18+ posts in tag searches and bookmarked tag feed by default?\"\n                        inputElement={\n                            <input\n                                id=\"defaultShow18PlusPostsInSearches\"\n                                type=\"checkbox\"\n                                className=\"rounded-checkbox\"\n                                {...register(\n                                    \"defaultShow18PlusPostsInSearches\"\n                                )}\n                            />\n                        }\n                    />\n\n                    <SettingsRow\n                        bigLabel=\"hide middle of long threads by default?\"\n                        inputElement={\n                            <input\n                                id=\"collapseLongThreads\"\n                                type=\"checkbox\"\n                                className=\"rounded-checkbox\"\n                                {...register(\"collapseLongThreads\")}\n                            />\n                        }\n                    />\n                    <p className=\"text-red\">\n                        {errors.collapseAdultContent\n                            ? errors.collapseAdultContent.message\n                            : null}\n                    </p>\n\n                    <div\n                        id=\"post-display\"\n                        className=\"invisible relative top-0 h-0 w-0\"\n                    />\n\n                    <h5 className={subsectionTitleClasses}>\n                        how content inside posts looks\n                    </h5>\n\n                    <SettingsRow\n                        bigLabel=\"pause animated GIFs until you click them?\"\n                        inputElement={\n                            <input\n                                id=\"gifsStartPaused\"\n                                type=\"checkbox\"\n                                className=\"rounded-checkbox\"\n                                {...register(\"gifsStartPaused\")}\n                            />\n                        }\n                        infoBoxLevel=\"warning\"\n                        infoBoxContent={\n                            <>\n                                This feature still has some limitations that\n                                we're working on fixing. It currently only works\n                                on images attached at the top of a post, and\n                                only on GIFs; other animated image types can't\n                                be paused yet.\n                            </>\n                        }\n                    />\n\n                    <SettingsRow\n                        bigLabel=\"open external links in a new tab?\"\n                        inputElement={\n                            <input\n                                id=\"externalLinksInNewTab\"\n                                type=\"checkbox\"\n                                className=\"rounded-checkbox\"\n                                {...register(\"externalLinksInNewTab\")}\n                            />\n                        }\n                    />\n\n                    <SettingsRow\n                        bigLabel=\"display previews of links?\"\n                        inputElement={\n                            <input\n                                id=\"enableEmbeds\"\n                                type=\"checkbox\"\n                                className=\"rounded-checkbox\"\n                                {...register(\"enableEmbeds\")}\n                            />\n                        }\n                        infoBoxLevel=\"info\"\n                        infoBoxContent={\n                            <>\n                                We use a service provider, iframely (\n                                <a\n                                    href=\"https://iframely.com/privacy\"\n                                    className=\"underline\"\n                                >\n                                    privacy policy\n                                </a>\n                                ), to generate these. If you don't want to load\n                                content from iframely, uncheck this box. Some\n                                previews require you to load content from other\n                                sites in addition to iframely; we'll prompt you\n                                before new sites do this, and you can turn them\n                                off later through{\" \"}\n                                <a\n                                    href={`https://iframely.com/consents?site=${encodeURIComponent(\n                                        new URL(env.HOME_URL).hostname\n                                    )}`}\n                                    className=\"underline\"\n                                >\n                                    iframely's site\n                                </a>\n                                .\n                            </>\n                        }\n                    />\n\n                    <SettingsRow\n                        bigLabel=\"default theme of posts and notifications:\"\n                        inputElement={\n                            <select {...register(\"defaultPostBoxTheme\")}>\n                                <option value=\"light\">always light</option>\n                                <option value=\"dark\">always dark</option>\n                                <option value=\"prefers-color-scheme\">\n                                    follows device theme\n                                </option>\n                            </select>\n                        }\n                        infoBoxLevel=\"info\"\n                        infoBoxContent={\n                            <>\n                                Other parts of the site follow your device's\n                                default color scheme. If a post doesn't look\n                                right in your default theme, you can switch to\n                                the other one from the \"meatball\" (\n                                <EllipsisHorizontalIcon className=\"inline-block h-4 w-4\" />\n                                ) menu.\n                            </>\n                        }\n                    />\n\n                    <div\n                        id=\"ui-display\"\n                        className=\"invisible relative top-0 h-0 w-0\"\n                    />\n\n                    <h6 className={subsectionTitleClasses}>\n                        how other parts of the site look\n                    </h6>\n\n                    <SettingsRow\n                        bigLabel=\"pause animated GIFs in avatars and header images?\"\n                        inputElement={\n                            <input\n                                id=\"pauseProfileGifs\"\n                                type=\"checkbox\"\n                                className=\"rounded-checkbox\"\n                                {...register(\"pauseProfileGifs\")}\n                            />\n                        }\n                    />\n\n                    <SettingsRow\n                        bigLabel=\"show new notification count in the sidebar?\"\n                        inputElement={\n                            <input\n                                id=\"enableNotificationCount\"\n                                type=\"checkbox\"\n                                className=\"rounded-checkbox\"\n                                {...register(\"enableNotificationCount\")}\n                            />\n                        }\n                    />\n\n                    <SettingsRow\n                        bigLabel=\"go to a new page when sharing or writing a post?\"\n                        inputElement={\n                            <input\n                                id=\"disableModalPostComposer\"\n                                type=\"checkbox\"\n                                className=\"rounded-checkbox\"\n                                {...register(\"disableModalPostComposer\")}\n                            />\n                        }\n                    />\n\n                    <SettingsRow\n                        bigLabel=\"which view do you want to be your home page?\"\n                        inputElement={\n                            <select {...register(\"homeView\")}>\n                                <option value=\"dashboard\">\n                                    dashboard view\n                                </option>\n                                <option value=\"following\">\n                                    following view\n                                </option>\n                            </select>\n                        }\n                    />\n\n                    {showNumbersField ? (\n                        <SettingsRow\n                            bigLabel=\"display Numbers™️ on posts?\"\n                            inputElement={\n                                <input\n                                    type=\"checkbox\"\n                                    className=\"rounded-checkbox\"\n                                    {...register(\"chaosDay2023_showNumbers\")}\n                                />\n                            }\n                        />\n                    ) : null}\n\n                    {showPreviewFeatures ? (\n                        <>\n                            <h5 className={subsectionTitleClasses}>\n                                preview features\n                            </h5>\n\n                            <InfoBox level=\"info\">\n                                <div className=\"prose prose-sm\">\n                                    <p>\n                                        These settings control features that are\n                                        new to the site and which we intend to\n                                        permanently enable soon, but that we\n                                        want to give you the ability to disable\n                                        in the event you run into problems. If\n                                        you do run into problems, please e-mail\n                                        us at{\" \"}\n                                        <a href=\"mailto:support@cohost.org\">\n                                            support@cohost.org\n                                        </a>{\" \"}\n                                        so we can fix them permanently for\n                                        everyone.\n                                    </p>\n                                </div>\n                            </InfoBox>\n\n                            {showPostComposerV2Field ? (\n                                <SettingsRow\n                                    bigLabel=\"enable new post editor?\"\n                                    inputElement={\n                                        <input\n                                            type=\"checkbox\"\n                                            className=\"rounded-checkbox\"\n                                            {...register(\n                                                \"previewFeatures_lexicalPostEditor\"\n                                            )}\n                                        />\n                                    }\n                                    infoBoxLevel=\"info\"\n                                    infoBoxContent={\n                                        <div className=\"prose prose-sm\">\n                                            <p>\n                                                This new editor allows you to\n                                                place images and audio in the\n                                                middle of a post without having\n                                                to set up your own hosting.\n                                            </p>\n                                        </div>\n                                    }\n                                />\n                            ) : null}\n                        </>\n                    ) : null}\n\n                    <h5 className={subsectionTitleClasses}>\n                        cohost plus settings\n                    </h5>\n\n                    <InfoBox level=\"info\">\n                        <div className=\"prose prose-sm\">\n                            <p>\n                                These settings enable features that are only\n                                available for cohost <i>Plus!</i> subscribers.\n                            </p>\n                            {!hasCohostPlus ? (\n                                <p>\n                                    You can sign up for cohost <i>Plus!</i> by\n                                    scrolling down slightly.\n                                </p>\n                            ) : null}\n                        </div>\n                    </InfoBox>\n\n                    <SettingsRow\n                        bigLabel=\"enable .beat internet timestamps?\"\n                        inputElement={\n                            <input\n                                type=\"checkbox\"\n                                className=\"rounded-checkbox\"\n                                {...register(\"beatsTimestamps\", {\n                                    disabled: !hasCohostPlus,\n                                })}\n                            />\n                        }\n                        infoBoxLevel=\"info\"\n                        infoBoxContent={\n                            <div className=\"prose prose-sm\">\n                                <p>\n                                    changes all timestamps on cohost to use{\" \"}\n                                    <a href=\"https://en.wikipedia.org/wiki/Swatch_Internet_Time\">\n                                        .beat internet time\n                                    </a>\n                                    .\n                                </p>\n                            </div>\n                        }\n                    />\n                </div>\n\n                <div className=\"flex w-full flex-row items-center justify-end gap-4 font-bold text-notWhite\">\n                    {formSuccess ? (\n                        <p className=\"text-green\">{formSuccess}</p>\n                    ) : null}\n                    {formError ? <p className=\"text-red\">{formError}</p> : null}\n\n                    <AuthnButton\n                        type=\"submit\"\n                        disabled={submitting}\n                        className=\"font-bold\"\n                    >\n                        save settings\n                    </AuthnButton>\n                </div>\n            </form>\n        </div>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport { useRollbar } from \"@/client/preact/providers/rollbar\";\nimport sitemap from \"@/shared/sitemap\";\nimport { InviteId } from \"@/shared/types/ids\";\nimport React, { FunctionComponent, MouseEventHandler, ReactNode } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { sectionBoxClasses, sectionTitleClasses } from \"../shared\";\n\nexport const InvitesForm: FunctionComponent = () => {\n    const rollbar = useRollbar();\n    const { t } = useTranslation();\n    let body: ReactNode;\n\n    const invites = trpc.invites.getActiveInvites.useQuery(undefined, {\n        suspense: true,\n    });\n\n    if (invites.data?.totalRemainingUses) {\n        const copyActivateLinkToClipboard =\n            (inviteId: InviteId): MouseEventHandler =>\n            (e) => {\n                e.preventDefault();\n\n                const activateLink = sitemap.public.invites\n                    .activate({ inviteId })\n                    .toString();\n\n                navigator.clipboard.writeText(activateLink).catch((_err) => {\n                    // this should never happen, since we only do it on user\n                    // interaction\n                    if (rollbar) {\n                        rollbar.error(\n                            \"invites form doesn't have clipboard permission!\"\n                        );\n                    }\n                });\n            };\n\n        body = (\n            <div id=\"invites-activation\" className=\"prose\">\n                <Trans\n                    i18nKey=\"client:invites.youve-got-em\"\n                    values={{\n                        nInvitesAvailable: invites.data.totalRemainingUses,\n                    }}\n                    count={invites.data.totalRemainingUses}\n                >\n                    <p>\n                        {`you can invite <0>{{nInvitesAvailable}}</0> people to cohost right now.`}\n                    </p>\n\n                    <p>\n                        if you'd like to invite someone to cohost, you can click\n                        any of the links below and we'll copy it to your\n                        clipboard. (you can also right click and copy the link\n                        directly if you prefer)\n                    </p>\n\n                    <p>thanks for spreading the word!</p>\n                </Trans>\n                <table className=\"overflow-x-scroll\">\n                    <thead>\n                        <th>invite ID</th>\n                        <th>remaining uses</th>\n                    </thead>\n                    <tbody>\n                        {invites.data.invites.map((invite) => (\n                            <tr key={invite.inviteId}>\n                                <td>\n                                    <a\n                                        onClick={copyActivateLinkToClipboard(\n                                            invite.inviteId\n                                        )}\n                                        href={sitemap.public.invites\n                                            .activate({\n                                                inviteId: invite.inviteId,\n                                            })\n                                            .toString()}\n                                    >\n                                        {invite.inviteId}\n                                    </a>\n                                </td>\n                                <td>{invite.userActivationsRemaining}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    } else {\n        body = (\n            <div className=\"prose\">\n                <p>\n                    {t(\"client:invites.no-invites-yet\", {\n                        defaultValue: `you don't have any invites available right now. we'll \n                            send more out as we're able to hire additional help to \n                            develop and moderate cohost, and we'll let you know when \n                            we do!`,\n                    })}\n                </p>\n            </div>\n        );\n    }\n\n    return (\n        <div className={sectionBoxClasses}>\n            <h4 className={sectionTitleClasses}>invite people to cohost</h4>\n\n            {body}\n        </div>\n    );\n};\n","import * as ModerationV1Types from \"@/shared/api-types/moderation-v1\";\nimport sitemap from \"@/shared/sitemap\";\nimport axios, { AxiosResponse } from \"axios\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { AuthnButton } from \"../../partials/authn-button\";\nimport { sectionBoxClasses, sectionTitleClasses } from \"../shared\";\n\ntype ModeratorSettingsFormProps = {\n    modMode: boolean;\n};\n\ntype Inputs = {\n    modMode: boolean;\n};\n\nexport const ModeratorSettingsForm: FunctionComponent<\n    ModeratorSettingsFormProps\n> = ({ modMode }) => {\n    const [submitting, setSubmitting] = useState(false);\n    const [formError, setFormError] = useState(\"\");\n    const [formSuccess, setFormSuccess] = useState(\"\");\n    const { handleSubmit, register } = useForm<Inputs>({\n        mode: \"onTouched\",\n        defaultValues: { modMode },\n    });\n\n    const onSubmit: SubmitHandler<Inputs> = async ({ modMode }) => {\n        setSubmitting(true);\n        setFormError(\"\");\n        setFormSuccess(\"\");\n\n        try {\n            await axios.post<\n                any,\n                AxiosResponse<any>,\n                ModerationV1Types.ChangeSettingsReq\n            >(sitemap.public.apiV1.moderation.changeSettings().toString(), {\n                modMode,\n            });\n            setFormSuccess(\"Settings changed!\");\n            setSubmitting(false);\n        } catch (e) {\n            setFormError(\"Changing settings failed.\");\n            setSubmitting(false);\n        }\n    };\n\n    return (\n        <div id=\"staff-only\" className={sectionBoxClasses}>\n            <h4 className={sectionTitleClasses}>moderator settings</h4>\n\n            <a\n                href={sitemap.public.moderation.home().toString()}\n                className=\"underline\"\n            >\n                Moderation directory\n            </a>\n\n            <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"flex flex-col gap-4\"\n            >\n                <div className=\"flex flex-col\">\n                    <div className=\"flex flex-row items-center gap-2\">\n                        <label htmlFor=\"modMode\" className=\"font-bold\">\n                            enable moderator mode (ignore visibility checks)?\n                        </label>\n                        <input type=\"checkbox\" {...register(\"modMode\")} />\n                    </div>\n                </div>\n\n                <div className=\"flex w-full flex-row items-center justify-end gap-4 font-bold text-notWhite\">\n                    {formSuccess ? (\n                        <p className=\"text-green\">{formSuccess}</p>\n                    ) : null}\n                    {formError ? <p className=\"text-red\">{formError}</p> : null}\n\n                    <AuthnButton\n                        type=\"submit\"\n                        disabled={submitting}\n                        className=\"font-bold\"\n                    >\n                        save settings\n                    </AuthnButton>\n                </div>\n            </form>\n        </div>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport { useUserInfo } from \"@/client/preact/providers/user-info-provider\";\nimport React, { FunctionComponent } from \"react\";\nimport { InfoBox } from \"../../elements/info-box\";\nimport { sectionBoxClasses } from \"../shared\";\n\nexport const PositionInQueue: FunctionComponent = () => {\n    const { activated, emailVerified } = useUserInfo();\n    const positionInQueue = trpc.users.getPositionInQueue.useQuery(undefined, {\n        enabled: !activated,\n        suspense: true,\n    });\n\n    if (activated) {\n        return null;\n    }\n\n    return (\n        <div id=\"invites-activation\" className={sectionBoxClasses}>\n            <h5 className=\"h5\">check your place in line</h5>\n\n            {!emailVerified ? (\n                <InfoBox level=\"warning\">\n                    <div className=\"prose prose-sm\">\n                        <p>\n                            <strong>\n                                Your email address has not been verified!\n                            </strong>{\" \"}\n                            You cohost account will not be activated until\n                            you've verified your email address.\n                        </p>\n                        <p>\n                            Search your spam folder for emails from\n                            \"no-reply@no-reply.cohost.org\" if you're having\n                            trouble finding it, you can resend it from the top\n                            of this page.\n                        </p>\n                    </div>\n                </InfoBox>\n            ) : null}\n\n            <div className=\"prose\">\n                <p>\n                    You're not activated yet! There are currently{\" \"}\n                    {positionInQueue.data?.toLocaleString(\"en-US\")} people in\n                    front of you.\n                </p>\n                <p>\n                    We're activating new batches of users almost every day, so\n                    you'll get to the front soon enough!\n                </p>\n                <p>\n                    For more information, check out{\" \"}\n                    <a href=\"https://help.antisoftware.club/en/support/solutions/articles/62000224749-how-do-i-get-an-invite-to-cohost-and-activate-my-account-\">\n                        our support page on the topic\n                    </a>\n                    .\n                </p>\n            </div>\n        </div>\n    );\n};\n","import { z } from \"zod\";\n\nexport const LookupKey = z.enum([\"cohost_plus_monthly\"]);\n\nexport const CreateCheckoutSessionReq = z.object({\n    priceLookupKey: LookupKey,\n});\n","import { trpc } from \"@/client/lib/trpc\";\nimport { LookupKey } from \"@/shared/api-types/subscriptions\";\nimport sitemap from \"@/shared/sitemap\";\nimport React, { FunctionComponent, Suspense } from \"react\";\nimport { AuthnButton } from \"../../partials/authn-button\";\nimport { UnfriendlyTimestamp } from \"../../unfriendly-timestamp\";\nimport cohostPlusFlyer from \"@/client/images/cohost-plus-promo.png\";\n\nexport const SubscriptionForm: FunctionComponent = () => {\n    return (\n        <div\n            className={`cohost-shadow-light dark:cohost-shadow-dark relative mx-auto\n                    flex max-h-min w-full flex-col items-center gap-4 rounded-lg\n                    bg-longan-200 text-center text-cherry`}\n        >\n            <div id=\"cohost-plus\" className=\"absolute -top-20 block h-0 w-0\" />\n            <img\n                src={sitemap.public.static\n                    .staticAsset({\n                        path: cohostPlusFlyer,\n                    })\n                    .toString()}\n                className=\"rounded-t-lg\"\n                alt=\"Flyer for cohost plus\"\n            />\n            <div className=\"sr-only\">\n                <p>\n                    Cohost Plus is our subscription service that helps support\n                    our development and gets you access to some extra features.\n                    Currently, your upload limit is increased to 10 megabytes,\n                    with more features coming soon. Only $4.99 per month or\n                    $49.99 per year.\n                </p>\n            </div>\n            <Suspense fallback={<div>loading subscriptions details...</div>}>\n                <SubscriptionFormInner />\n            </Suspense>\n        </div>\n    );\n};\n\nconst SubscriptionFormInner: FunctionComponent = () => {\n    const { data: subscriptions } =\n        trpc.subscriptions.userSubscriptions.useQuery(undefined, {\n            suspense: true,\n            select: (data) => data.filter((sub) => sub.status === \"active\"),\n        });\n\n    return (\n        <div className=\"flex flex-col items-center gap-4 p-3\">\n            {subscriptions && subscriptions.length > 0 ? (\n                <>\n                    <p>\n                        Your cohost Plus! subscription will expire on{\" \"}\n                        <UnfriendlyTimestamp\n                            dateISO={subscriptions[0].expirationDate}\n                            className=\"font-bold\"\n                        />\n                        .\n                    </p>\n                    {subscriptions.length > 1 ? (\n                        <div className=\"prose rounded-lg border-2 border-red-700 bg-red-200 p-3 prose-p:my-1\">\n                            <p>\n                                <strong>Heads up!</strong> It looks like you've\n                                got more than one active subscription! This\n                                shouldn't be possible, but it looks like we\n                                goofed up and made it happen anyway.\n                            </p>\n                            <p>\n                                Please contact us right away at{\" \"}\n                                <a\n                                    href=\"mailto:support@cohost.org\"\n                                    className=\"font-bold\"\n                                >\n                                    support@cohost.org\n                                </a>{\" \"}\n                                so we can figure out what's happening and fix\n                                it.\n                            </p>\n                        </div>\n                    ) : null}\n                    <form\n                        action={sitemap.public.subscriptions\n                            .createPortalSession()\n                            .toString()}\n                        method=\"post\"\n                    >\n                        <AuthnButton type=\"submit\">\n                            manage your subscription\n                        </AuthnButton>\n                    </form>\n                </>\n            ) : (\n                <>\n                    <div className=\"prose\">\n                        <p>\n                            You don't currently have a <i>cohost Plus!</i>{\" \"}\n                            subscription! If you just subscribed and you're\n                            still seeing this, wait a bit; this can be slow to\n                            update. If it's been more than a couple hours and\n                            you're still seeing this, please e-mail us at{\" \"}\n                            <a\n                                href=\"mailto:support@cohost.org\"\n                                className=\"font-bold\"\n                            >\n                                support@cohost.org\n                            </a>\n                            .\n                        </p>\n                    </div>\n                    <form\n                        action={sitemap.public.subscriptions\n                            .createCheckoutSession()\n                            .toString()}\n                        method=\"post\"\n                    >\n                        <input\n                            type=\"hidden\"\n                            value={LookupKey.Enum.cohost_plus_monthly}\n                            name=\"priceLookupKey\"\n                        />\n                        <AuthnButton type=\"submit\">\n                            <span>\n                                subscribe to <i>cohost Plus!</i>\n                            </span>\n                        </AuthnButton>\n                    </form>\n                </>\n            )}\n        </div>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport { HashtagIcon } from \"@heroicons/react/24/outline\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent, ReactNode, useState } from \"react\";\nimport { InfoBox } from \"../../elements/info-box\";\nimport { AuthnButton } from \"../../partials/authn-button\";\nimport { TokenInput } from \"../../token-input\";\nimport { sectionBoxClasses, sectionTitleClasses } from \"../shared\";\n\nconst commonBoxClasses = \"rounded border-cherry border p-2\";\n\nexport const TagFiltersForm: FunctionComponent = () => {\n    const utils = trpc.useContext();\n    const { data: initialFilters } = trpc.users.tagFilters.query.useQuery(\n        undefined,\n        {\n            suspense: true,\n        }\n    );\n\n    const {\n        mutate: saveTagFilters,\n        error,\n        isError,\n        isLoading,\n        isSuccess,\n    } = trpc.users.tagFilters.mutate.useMutation({\n        onSuccess: async () => {\n            await utils.users.tagFilters.query.invalidate();\n        },\n    });\n\n    const [collapsedTags, setCollapsedTags] = useState(\n        initialFilters?.collapse ?? []\n    );\n\n    const [silencedTags, setSilencedTags] = useState(\n        initialFilters?.silence ?? []\n    );\n\n    const [silencedTagsVisible, setSilencedTagsVisible] = useState(false);\n    const onShowSilencedTags = () => setSilencedTagsVisible(true);\n\n    return (\n        <div\n            id=\"post-visibility\"\n            // FIXME: theme forced to light here because we haven't rethemed the rest of the site yet\n            data-theme=\"light\"\n            className={classNames(\"co-themed-box\", sectionBoxClasses)}\n        >\n            <h4 className={sectionTitleClasses}>filtered tags</h4>\n\n            <InfoBox level=\"info\" className=\"prose max-w-full\">\n                Tags are matched <em>case insensitively</em>—hiding or showing\n                \"#fandom\" also applies to \"#Fandom\" and \"#FANDOM\". However,\n                partial matches don't work right now, so \"#javascript fandom\"\n                will still show up.\n            </InfoBox>\n\n            <p className=\"prose\">\n                <strong className=\"font-bold text-cherry\">muffle</strong> posts\n                with these tags, requiring me to click through to view them:\n            </p>\n\n            <div className={commonBoxClasses}>\n                <TokenInput\n                    TokenIcon={HashtagIcon}\n                    tokens={collapsedTags}\n                    setTokens={setCollapsedTags}\n                    getSuggestions={true}\n                />\n            </div>\n\n            <p className=\"prose\">\n                <strong className=\"font-bold text-cherry\">silence</strong> posts\n                with these tags, hiding them completely:\n            </p>\n\n            {silencedTagsVisible ? (\n                <div className={commonBoxClasses}>\n                    <TokenInput\n                        TokenIcon={HashtagIcon}\n                        tokens={silencedTags}\n                        setTokens={setSilencedTags}\n                        getSuggestions={true}\n                    />\n                </div>\n            ) : (\n                <button\n                    className={classNames(\n                        commonBoxClasses,\n                        \"cursor-pointer bg-strawberry-100 text-left\"\n                    )}\n                    onClick={onShowSilencedTags}\n                    type=\"button\"\n                >\n                    click to show list of silenced tags\n                </button>\n            )}\n\n            <div className=\"flex w-full flex-row items-center justify-end gap-4 font-bold text-notWhite\">\n                {isSuccess ? (\n                    <p className=\"text-green\">Settings saved!</p>\n                ) : null}\n                {isError ? <p className=\"text-red\">{error.message}</p> : null}\n\n                <AuthnButton\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"font-bold\"\n                    onClick={() =>\n                        saveTagFilters({\n                            collapse: collapsedTags,\n                            silence: silencedTags,\n                        })\n                    }\n                >\n                    save settings\n                </AuthnButton>\n            </div>\n        </div>\n    );\n};\n","/* eslint-disable @typescript-eslint/require-await */\n\nimport type { AppRouter } from \"@/src/routes/api/trpc-type\";\nimport { TRPCClientError } from \"@trpc/client\";\nimport { authenticator } from \"otplib\";\nimport qrcode from \"qrcode\";\nimport { createContext } from \"react\";\nimport { assign, createMachine, InterpreterFrom } from \"xstate\";\nimport { pure, raise } from \"xstate/lib/actions\";\nimport { getVanillaClient } from \"./trpc-vanilla\";\n\nexport interface TwoFactorManagementContext {\n    enabled: boolean | undefined;\n    email: string | undefined;\n    baseSecret: string | undefined;\n    baseSecretDataUrl: string | undefined;\n    recoverySecret: string | undefined;\n    token: string | undefined;\n    retriesRemaining: number | undefined;\n    resolvingTRPCError: TRPCClientError<AppRouter> | undefined;\n}\n\nexport type TwoFactorManagementEvent =\n    | { type: \"INITIALIZE\"; enabled: boolean }\n    | { type: \"SETUP_START\" }\n    | { type: \"SETUP_ENTER_TOKEN\"; token: string }\n    | { type: \"SETUP_DONE\"; recoverySecret: string }\n    | { type: \"SETUP_RETRY_TOKEN\" }\n    | { type: \"SETUP_FATAL_ERROR\"; error: Error }\n    | { type: \"RESET_START\" }\n    | { type: \"RESET_ENTER_TOKEN\"; token: string }\n    | { type: \"RESET_DONE\" }\n    | { type: \"RESET_RETRY_TOKEN\"; retriesRemaining: number }\n    | { type: \"RESET_FATAL_ERROR\"; error: Error }\n    | { type: \"ACKNOWLEDGE\" }\n    | { type: \"CANCEL\" };\n\nconst trpc = getVanillaClient();\n\nexport const twoFactorManagementMachine = createMachine<\n    TwoFactorManagementContext,\n    TwoFactorManagementEvent\n>(\n    {\n        initial: \"initializing\",\n        strict: true,\n        context: {\n            enabled: undefined,\n            email: undefined,\n            baseSecret: undefined,\n            baseSecretDataUrl: undefined,\n            recoverySecret: undefined,\n            token: undefined,\n            retriesRemaining: undefined,\n            resolvingTRPCError: undefined,\n        },\n        states: {\n            initializing: {\n                id: \"initializing\",\n                invoke: {\n                    src: \"get2FAState\",\n                    onDone: [\n                        {\n                            target: \"enabled\",\n                            cond: \"is2FAEnabled\",\n                        },\n                        { target: \"disabled\" },\n                    ],\n                },\n            },\n            disabled: {\n                initial: \"idle\",\n                states: {\n                    idle: {\n                        id: \"disabledIdle\",\n                        on: {\n                            SETUP_START: {\n                                target: \"setup\",\n                            },\n                        },\n                    },\n                    setup: {\n                        initial: \"promptingBaseSecret\",\n                        states: {\n                            promptingBaseSecret: {\n                                invoke: {\n                                    src: \"generateBaseSecret\",\n                                    onDone: {\n                                        actions: assign((context, event) => {\n                                            const data = event.data as {\n                                                baseSecret: string;\n                                                dataUrl: string;\n                                            };\n\n                                            return {\n                                                baseSecret: data.baseSecret,\n                                                baseSecretDataUrl: data.dataUrl,\n                                            };\n                                        }),\n                                    },\n                                    onError: {\n                                        target: \"#setupError\",\n                                    },\n                                },\n                                on: {\n                                    ACKNOWLEDGE: {\n                                        target: \"confirmingToken\",\n                                    },\n                                    CANCEL: { target: \"#disabledIdle\" },\n                                },\n                            },\n                            confirmingToken: {\n                                initial: \"awaitingInput\",\n                                states: {\n                                    awaitingInput: {\n                                        on: {\n                                            SETUP_ENTER_TOKEN: {\n                                                target: \"sending\",\n                                                actions: assign(\n                                                    (_context, event) => {\n                                                        return {\n                                                            token: event.token,\n                                                        };\n                                                    }\n                                                ),\n                                            },\n                                            CANCEL: { target: \"#disabledIdle\" },\n                                        },\n                                    },\n                                    sending: {\n                                        invoke: {\n                                            src: \"sendSetup\",\n                                            // FIXME: xstate's type signatures require\n                                            // that all actions returned from an\n                                            // invoke.onDone/invoke.onError take\n                                            // DoneInvokeEvents, even if you're\n                                            // returning them from pure() or similar;\n                                            // cast around this\n                                            onDone: {\n                                                actions: pure(\n                                                    (_context, event) =>\n                                                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                                                        [\n                                                            raise(event.data),\n                                                        ] as any\n                                                ),\n                                            },\n                                            onError: {\n                                                actions: pure(\n                                                    (_context, event) =>\n                                                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                                                        [\n                                                            raise(event.data),\n                                                        ] as any\n                                                ),\n                                            },\n                                        },\n                                        on: {\n                                            SETUP_DONE: {\n                                                target: \"#setupDone\",\n                                                actions: assign(\n                                                    (_context, event) => {\n                                                        return {\n                                                            recoverySecret:\n                                                                event.recoverySecret,\n                                                        };\n                                                    }\n                                                ),\n                                            },\n                                            SETUP_RETRY_TOKEN: {\n                                                target: \"awaitingInput\",\n                                                actions: assign((context) => {\n                                                    return {\n                                                        retriesRemaining:\n                                                            (context.retriesRemaining ??\n                                                                3) - 1,\n                                                    };\n                                                }),\n                                            },\n                                            SETUP_FATAL_ERROR: {\n                                                target: \"#setupError\",\n                                            },\n                                        },\n                                    },\n                                },\n                                exit: [\n                                    assign(() => {\n                                        return {\n                                            retriesRemaining: undefined,\n                                        };\n                                    }),\n                                ],\n                            },\n                        },\n                        exit: [\n                            assign(() => {\n                                return {\n                                    baseSecret: undefined,\n                                    baseSecretDataUrl: undefined,\n                                    recoverySecret: undefined,\n                                    token: undefined,\n                                };\n                            }),\n                        ],\n                    },\n                    setupDone: {\n                        id: \"setupDone\",\n                        on: {\n                            ACKNOWLEDGE: {\n                                target: \"#initializing\",\n                            },\n                        },\n                    },\n                    setupError: {\n                        id: \"setupError\",\n                        on: {\n                            ACKNOWLEDGE: {\n                                target: \"#initializing\",\n                            },\n                        },\n                    },\n                },\n            },\n            enabled: {\n                initial: \"idle\",\n                states: {\n                    idle: {\n                        id: \"enabledIdle\",\n                        on: {\n                            RESET_START: {\n                                target: \"reset\",\n                            },\n                        },\n                    },\n                    reset: {\n                        initial: \"confirmingToken\",\n                        states: {\n                            confirmingToken: {\n                                initial: \"awaitingInput\",\n                                states: {\n                                    awaitingInput: {\n                                        on: {\n                                            RESET_ENTER_TOKEN: {\n                                                target: \"sending\",\n                                                actions: assign(\n                                                    (_context, event) => {\n                                                        return {\n                                                            token: event.token,\n                                                        };\n                                                    }\n                                                ),\n                                            },\n                                            CANCEL: {\n                                                target: \"#enabledIdle\",\n                                            },\n                                        },\n                                    },\n                                    sending: {\n                                        invoke: {\n                                            src: \"sendReset\",\n                                            // FIXME: xstate's type signatures require\n                                            // that all actions returned from an\n                                            // invoke.onDone/invoke.onError take\n                                            // DoneInvokeEvents, even if you're\n                                            // returning them from pure() or similar;\n                                            // cast around this\n                                            onDone: {\n                                                actions: pure(\n                                                    (_context, event) =>\n                                                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                                                        [\n                                                            raise(event.data),\n                                                        ] as any\n                                                ),\n                                            },\n                                            onError: {\n                                                actions: pure(\n                                                    (_context, event) =>\n                                                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                                                        [\n                                                            raise(event.data),\n                                                        ] as any\n                                                ),\n                                            },\n                                        },\n                                        on: {\n                                            RESET_DONE: {\n                                                target: \"#initializing\",\n                                            },\n                                            RESET_RETRY_TOKEN: {\n                                                target: \"awaitingInput\",\n                                                actions: assign((context) => {\n                                                    return {\n                                                        retriesRemaining:\n                                                            (context.retriesRemaining ??\n                                                                3) - 1,\n                                                    };\n                                                }),\n                                            },\n                                            RESET_FATAL_ERROR: {\n                                                target: \"#resetError\",\n                                            },\n                                        },\n                                    },\n                                },\n                                exit: [\n                                    assign(() => {\n                                        return {\n                                            retriesRemaining: undefined,\n                                        };\n                                    }),\n                                ],\n                            },\n                        },\n                        exit: [\n                            assign(() => {\n                                return {\n                                    token: undefined,\n                                };\n                            }),\n                        ],\n                    },\n                    resetError: {\n                        id: \"resetError\",\n                        on: {\n                            ACKNOWLEDGE: {\n                                target: \"#initializing\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    },\n    {\n        services: {\n            get2FAState: async (context) => {\n                const res = await trpc.login.is2FAEnabled.query();\n\n                context.enabled = res;\n            },\n            generateBaseSecret: async (context) => {\n                const trpc = getVanillaClient();\n\n                const baseSecret = (\n                    await trpc.login.generate2FABaseSecret.mutate(undefined)\n                ).baseSecret;\n\n                const keyuri = authenticator.keyuri(\n                    context.email!,\n                    \"cohost.org\",\n                    baseSecret\n                );\n\n                return new Promise((resolve, reject) =>\n                    qrcode.toDataURL(keyuri, (e, url) => {\n                        if (e) {\n                            reject(e);\n                        } else {\n                            resolve({\n                                dataUrl: url,\n                                baseSecret,\n                            });\n                        }\n                    })\n                );\n            },\n            sendSetup: async (context, _event) => {\n                const trpc = getVanillaClient();\n\n                if (!context.baseSecret || !context.token)\n                    throw \"assertion failure: 2FA setup process isn't done\";\n\n                try {\n                    const res = await trpc.login.setup2FA.mutate({\n                        token: context.token,\n                    });\n\n                    return {\n                        type: \"SETUP_DONE\",\n                        recoverySecret: res.recoverySecret,\n                    };\n                } catch (e) {\n                    if (e instanceof TRPCClientError) {\n                        const err = e as TRPCClientError<AppRouter>;\n\n                        if (err?.data?.errorCode === \"incorrect-totp\") {\n                            return {\n                                type: \"SETUP_RETRY_TOKEN\",\n                            };\n                        }\n                    }\n\n                    return {\n                        type: \"SETUP_FATAL_ERROR\",\n                        error: e as Error,\n                    };\n                }\n            },\n            sendReset: async (context, _event) => {\n                console.warn(\"in sendReset\");\n\n                const trpc = getVanillaClient();\n\n                if (!context.token)\n                    throw \"assertion failure: 2FA setup process isn't done\";\n\n                try {\n                    const res = await trpc.login.reset2FA.mutate({\n                        token: context.token,\n                    });\n\n                    return {\n                        type: \"RESET_DONE\",\n                    };\n                } catch (e) {\n                    if (e instanceof TRPCClientError) {\n                        const err = e as TRPCClientError<AppRouter>;\n\n                        if (err?.data?.errorCode === \"incorrect-totp\") {\n                            return {\n                                type: \"RESET_RETRY_TOKEN\",\n                                retriesRemaining: err.data.retriesRemaining!,\n                            };\n                        }\n                    }\n\n                    return {\n                        type: \"RESET_FATAL_ERROR\",\n                        error: e as Error,\n                    };\n                }\n            },\n        },\n        guards: {\n            is2FAEnabled: (context) => !!context.enabled,\n        },\n    }\n);\n\nexport const TwoFactorManagementContext = createContext(\n    {} as InterpreterFrom<typeof twoFactorManagementMachine>\n);\n","import {\n    TwoFactorManagementContext,\n    twoFactorManagementMachine,\n} from \"@/client/lib/2fa-management-machine\";\nimport { useMachine, useSelector } from \"@xstate/react\";\nimport React, { FunctionComponent, ReactNode, useContext } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { State } from \"xstate\";\nimport { Button } from \"../../elements/button\";\nimport { InfoBox } from \"../../elements/info-box\";\nimport { ErrorBoundary } from \"../../error-boundary\";\nimport {\n    buttonRowClasses,\n    sectionBoxClasses,\n    sectionTitleClasses,\n} from \"../shared\";\n\nconst insetClasses = \"w-fit rounded-lg border-2 border-cherry py-1 px-3\";\n\ntype InactiveIdleProps = {\n    resetJustFinished: boolean;\n};\n\nconst selectBaseSecret = (state: State<TwoFactorManagementContext>) =>\n    state.context.baseSecret;\nconst selectBaseSecretDataUrl = (state: State<TwoFactorManagementContext>) =>\n    state.context.baseSecretDataUrl;\nconst selectRetriesRemaining = (state: State<TwoFactorManagementContext>) =>\n    state.context.retriesRemaining;\nconst selectRecoverySecret = (state: State<TwoFactorManagementContext>) =>\n    state.context.recoverySecret;\n\nconst InactiveIdle: FunctionComponent<InactiveIdleProps> = (props) => {\n    const context = useContext(TwoFactorManagementContext);\n\n    return (\n        <div id=\"two-factor-auth\" className={sectionBoxClasses}>\n            <h4 className={sectionTitleClasses}>two-factor authentication</h4>\n\n            <InfoBox level=\"warning\" className=\"prose max-w-full\">\n                Your account has two-factor authentication disabled. You can\n                help us keep your account secure by turning it on! Click the\n                button below to start.\n            </InfoBox>\n\n            <div className={buttonRowClasses}>\n                <Button\n                    buttonStyle=\"authn\"\n                    color=\"authn-primary\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        context.send({\n                            type: \"SETUP_START\",\n                        });\n                    }}\n                    className=\"font-bold\"\n                >\n                    enable 2FA (recommended)\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nconst SetupPromptingBaseSecret: FunctionComponent = () => {\n    const context = useContext(TwoFactorManagementContext);\n    const baseSecret = useSelector(context, selectBaseSecret);\n    const baseSecretDataUrl = useSelector(context, selectBaseSecretDataUrl);\n\n    return (\n        <div className={sectionBoxClasses}>\n            <h4 className={sectionTitleClasses}>\n                two-factor authentication setup\n            </h4>\n\n            <InfoBox level=\"info\" className=\"prose max-w-full\">\n                If you don&apos;t already have one, you&apos;ll need to download\n                a two-factor authenticator app. We recommend{\" \"}\n                <a href=\"https://authy.com/\">Authy</a>!\n            </InfoBox>\n\n            <div className=\"flex flex-col items-center gap-3\">\n                <div className=\"text-center font-bold\">\n                    Open your authenticator app and scan this QR code:\n                </div>\n\n                <img\n                    className={insetClasses}\n                    width=\"250\"\n                    height=\"250\"\n                    src={baseSecretDataUrl}\n                    alt=\"QR code\"\n                />\n\n                <div className=\"text-center font-bold\">\n                    If your authenticator app doesn&apos;t support QR, enter the\n                    secret code below:\n                </div>\n\n                <div className={insetClasses}>{baseSecret}</div>\n            </div>\n\n            <InfoBox level=\"info\" className=\"prose max-w-full\">\n                Once cohost is registered in your app, you should see a\n                six-digit code and a countdown.\n            </InfoBox>\n\n            <div className=\"flex w-full flex-row items-center font-bold text-notWhite\">\n                <Button\n                    buttonStyle=\"authn\"\n                    color=\"authn-other\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        context.send({ type: \"CANCEL\" });\n                    }}\n                    type=\"reset\"\n                    className=\"font-bold\"\n                >\n                    cancel setup\n                </Button>\n\n                <div className=\"flex-1\">&nbsp;</div>\n\n                <Button\n                    buttonStyle=\"authn\"\n                    color=\"authn-primary\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        context.send({ type: \"ACKNOWLEDGE\" });\n                    }}\n                    className=\"font-bold\"\n                    type=\"submit\"\n                >\n                    continue\n                </Button>\n            </div>\n        </div>\n    );\n};\n\ntype ConfirmingTokenProps = {\n    mode: \"setup\" | \"reset\";\n};\n\ntype ConfirmingTokenInputs = {\n    token: string;\n};\n\nconst ConfirmingToken: FunctionComponent<ConfirmingTokenProps> = ({ mode }) => {\n    const context = useContext(TwoFactorManagementContext);\n    const retriesRemaining = useSelector(context, selectRetriesRemaining);\n    const { handleSubmit, register } = useForm<ConfirmingTokenInputs>({\n        mode: \"onTouched\",\n    });\n\n    const onSubmit: SubmitHandler<ConfirmingTokenInputs> = (data) => {\n        const type =\n            mode === \"setup\" ? \"SETUP_ENTER_TOKEN\" : \"RESET_ENTER_TOKEN\";\n\n        context.send({ type, token: data.token });\n    };\n\n    return (\n        <div className={sectionBoxClasses}>\n            <h4 className={sectionTitleClasses}>\n                two-factor authentication setup\n            </h4>\n\n            <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"flex flex-col items-center gap-3\"\n            >\n                {mode === \"setup\" ? (\n                    <div className=\"text-center font-bold\">\n                        Enter the 6-digit code found in your authenticator app\n                        below.\n                    </div>\n                ) : (\n                    <div className=\"text-center font-bold\">\n                        Enter the 6-digit code found in your authenticator app\n                        below. If you don&apos;t have access to your\n                        authenticator, you can also enter your recovery code.\n                    </div>\n                )}\n\n                <div>\n                    <label htmlFor=\"token\" className=\"font-bold\">\n                        your 6-digit code:\n                    </label>\n\n                    <input\n                        className={`block rounded-lg border-2 border-gray-600\n                            bg-transparent text-notBlack focus:border-notBlack`}\n                        type=\"text\"\n                        autoComplete=\"one-time-code\"\n                        {...register(\"token\", {\n                            required: true,\n                        })}\n                    />\n\n                    {retriesRemaining ? (\n                        <div className=\"text-sm text-gray-600\">\n                            incorrect code. retries left: {retriesRemaining}.\n                        </div>\n                    ) : null}\n                </div>\n\n                <div className=\"flex w-full flex-row items-center font-bold text-notWhite\">\n                    <Button\n                        buttonStyle=\"authn\"\n                        color=\"authn-other\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            context.send({ type: \"CANCEL\" });\n                        }}\n                        className=\"font-bold\"\n                        type=\"reset\"\n                    >\n                        cancel\n                    </Button>\n\n                    <div className=\"flex-1\">&nbsp;</div>\n\n                    <Button\n                        buttonStyle=\"authn\"\n                        color=\"authn-primary\"\n                        type=\"submit\"\n                        className=\"font-bold\"\n                    >\n                        continue\n                    </Button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\ntype ActiveIdleProps = {\n    setupJustFinished: boolean;\n};\n\nconst ActiveIdle: FunctionComponent<ActiveIdleProps> = ({\n    setupJustFinished,\n}) => {\n    const context = useContext(TwoFactorManagementContext);\n    const recoverySecret = useSelector(context, selectRecoverySecret);\n\n    return (\n        <div className={sectionBoxClasses}>\n            <h4 className={sectionTitleClasses}>\n                {setupJustFinished\n                    ? \"two-factor authentication setup\"\n                    : \"two-factor authentication\"}\n            </h4>\n\n            <InfoBox level=\"done\">\n                <p className=\"font-bold text-green-800\">\n                    Two-factor authentication is enabled!\n                </p>\n                Thanks for helping us keep your account secure.\n            </InfoBox>\n\n            {setupJustFinished ? (\n                <div className=\"flex flex-col items-center gap-3\">\n                    <div className=\"text-center font-bold\">\n                        If you lose access to your authenticator for any\n                        reason&mdash;e.g. your phone gets factory reset or you\n                        lose it&mdash;you can use the code below to recover your\n                        account.\n                    </div>\n\n                    <div className={insetClasses}>{recoverySecret}</div>\n\n                    <div className=\"text-center font-bold\">\n                        You can enter it in place of the 6-digit code when\n                        logging in to disable 2FA. We won&apos;t show you this\n                        code again, so save it in a secure place now.\n                    </div>\n\n                    <Button\n                        buttonStyle=\"authn\"\n                        color=\"authn-primary\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            context.send({ type: \"ACKNOWLEDGE\" });\n                        }}\n                        className=\"font-bold text-notWhite\"\n                    >\n                        finish\n                    </Button>\n                </div>\n            ) : (\n                <div className={buttonRowClasses}>\n                    <Button\n                        buttonStyle=\"authn\"\n                        color=\"authn-other\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            context.send({\n                                type: \"RESET_START\",\n                            });\n                        }}\n                        className=\"font-bold\"\n                    >\n                        disable 2FA (not recommended)\n                    </Button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst SetupError: FunctionComponent = () => {\n    const context = useContext(TwoFactorManagementContext);\n\n    return (\n        <div className={sectionBoxClasses}>\n            There was an unexpected error setting up two-factor authentication\n            for you, and your settings are unchanged. Try setting it up again\n            later, or get in touch with us at support@cohost.org if the issue\n            persists.\n            <button\n                onClick={(e) => {\n                    e.preventDefault();\n                    context.send({ type: \"ACKNOWLEDGE\" });\n                }}\n            >\n                OK\n            </button>\n        </div>\n    );\n};\n\nconst ResetError: FunctionComponent = () => {\n    const context = useContext(TwoFactorManagementContext);\n\n    return (\n        <div className={sectionBoxClasses}>\n            There was an error disabling two-factor authentication on your\n            account. It may or may not be disabled, so try reloading to check\n            before you delete data from your authenticator.\n            <button\n                onClick={(e) => {\n                    e.preventDefault();\n                    context.send({ type: \"ACKNOWLEDGE\" });\n                }}\n            >\n                reload\n            </button>\n        </div>\n    );\n};\n\nexport const TwoFactorManagementForm: FunctionComponent = () => {\n    const [state, , twoFactorManagementService] = useMachine(\n        twoFactorManagementMachine,\n        { devTools: process.env.NODE_ENV === \"development\" }\n    );\n    let body: ReactNode;\n\n    switch (true) {\n        case state.matches(\"disabled.idle\"):\n            body = <InactiveIdle resetJustFinished={false} />;\n            break;\n        case state.matches(\"disabled.setup.promptingBaseSecret\"):\n            body = <SetupPromptingBaseSecret />;\n            break;\n        case state.matches(\"disabled.setup.confirmingToken\"):\n            body = <ConfirmingToken mode=\"setup\" />;\n            break;\n        case state.matches(\"disabled.setupDone\"):\n            body = <ActiveIdle setupJustFinished={true} />;\n            break;\n        case state.matches(\"disabled.setupError\"):\n            body = <SetupError />;\n            break;\n        case state.matches(\"enabled.idle\"):\n            body = <ActiveIdle setupJustFinished={false} />;\n            break;\n        case state.matches(\"enabled.reset.confirmingToken\"):\n            body = <ConfirmingToken mode=\"reset\" />;\n            break;\n        case state.matches(\"enabled.resetDone\"):\n            body = <InactiveIdle resetJustFinished={true} />;\n            break;\n        case state.matches(\"enabled.resetError\"):\n            body = <ResetError />;\n            break;\n        default:\n            body = <>loading...</>;\n            break;\n    }\n\n    return (\n        <ErrorBoundary>\n            <TwoFactorManagementContext.Provider\n                value={twoFactorManagementService}\n            >\n                {body}\n            </TwoFactorManagementContext.Provider>\n        </ErrorBoundary>\n    );\n};\n","import { ProjectId } from \"@/shared/types/ids\";\nimport { WireProjectModel } from \"@/shared/types/projects\";\nimport { Listbox, Transition } from \"@headlessui/react\";\nimport { ChevronDownIcon } from \"@heroicons/react/24/solid\";\nimport React, { Fragment, FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useCurrentProject } from \"../../hooks/data-loaders\";\nimport { useEditedProjects } from \"../../hooks/use-edited-projects\";\nimport { ProjectAvatar } from \"../partials/project-avatar\";\nimport _ from \"lodash\";\n\n// a ProjectSwitcher-styled project listbox, but without all the added\n// complications of that component (special mobile view, notification counts,\n// new/sign out options, etc.)\n\nconst ProjectChooserOption: FunctionComponent<{\n    project: WireProjectModel;\n}> = ({ project }) => {\n    return (\n        <Listbox.Option\n            key={project.projectId}\n            value={project}\n            className=\"flex h-10 cursor-pointer flex-row items-center gap-3 px-2 py-1 hover:bg-foreground-100 hover:text-foreground-800 lg:first-of-type:rounded-t-lg lg:last-of-type:rounded-b-lg\"\n        >\n            <ProjectAvatar\n                project={project}\n                noLink={true}\n                className=\"h-8 w-8\"\n            />\n            <span>@{project.handle}</span>\n        </Listbox.Option>\n    );\n};\n\ntype ProjectChooserProps = {\n    selectedProjectId: ProjectId;\n    onChange: (projectId: ProjectId) => void;\n};\n\nexport const ProjectChooser: FunctionComponent<ProjectChooserProps> = (\n    props\n) => {\n    const { t } = useTranslation();\n\n    const { projects } = useEditedProjects();\n    const selectedProject = _.find(\n        projects,\n        (project) => project.projectId === props.selectedProjectId\n    );\n\n    if (!selectedProject) return null;\n\n    const onChange = (val: WireProjectModel) => {\n        props.onChange(val.projectId);\n    };\n\n    return (\n        <Listbox value={selectedProject} by=\"projectId\" onChange={onChange}>\n            <div className=\"relative\">\n                <Listbox.Button className=\"group flex flex-row items-center gap-1\">\n                    <div className=\"flex flex-row items-center gap-3 rounded-l-lg px-2 py-1 group-hover:bg-foreground-600 group-hover:text-notWhite ui-open:bg-foreground-700 ui-open:text-notWhite\">\n                        <ProjectAvatar\n                            project={selectedProject}\n                            noLink={true}\n                            className=\"h-8 w-8\"\n                        />\n                        <span>@{selectedProject?.handle}</span>\n                    </div>\n                    <div className=\"block rounded-r-lg p-2 text-notBlack group-hover:bg-foreground-600 group-hover:text-notWhite ui-open:bg-foreground-700 ui-open:text-notWhite\">\n                        <ChevronDownIcon className=\"h-6 w-6 transition-transform ui-open:rotate-180\" />\n                    </div>\n                </Listbox.Button>\n                <Transition\n                    as={Fragment}\n                    leave=\"lg:transition ease-in duration-100\"\n                    leaveFrom=\"opacity-100\"\n                    leaveTo=\"opacity-0\"\n                >\n                    <Listbox.Options\n                        className={`lg:cohost-shadow-light dark:lg:cohost-shadow-dark\n                        fixed bottom-0 right-0 top-16 z-10 max-w-xs divide-y divide-foreground-500\n                        !overflow-y-auto truncate bg-foreground text-notWhite !outline-none\n                        lg:absolute lg:bottom-auto lg:right-auto lg:top-auto lg:mt-6\n                        lg:max-h-[calc(100vh_-_100px)] lg:divide-none lg:rounded-lg lg:bg-notWhite lg:text-notBlack`}\n                    >\n                        {projects.map((project) => (\n                            <ProjectChooserOption\n                                project={project}\n                                key={project.projectId}\n                            />\n                        ))}\n                    </Listbox.Options>\n                </Transition>\n            </div>\n        </Listbox>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport type * as LoginV1Types from \"@/shared/api-types/login-v1\";\nimport sitemap from \"@/shared/sitemap\";\nimport axios, { AxiosResponse } from \"axios\";\nimport React, { FunctionComponent, useCallback } from \"react\";\nimport { Controller, SubmitHandler, useForm, Validate } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useUserInfo } from \"../../../providers/user-info-provider\";\nimport { AuthnButton } from \"../../partials/authn-button\";\nimport { StyledInput } from \"../../elements/styled-input\";\nimport { sectionBoxClasses, sectionTitleClasses } from \"../shared\";\nimport { SettingsRow } from \"../../elements/settings-row\";\nimport { ProjectChooser } from \"../../elements/project-chooser\";\nimport _ from \"lodash\";\nimport { useEditedProjects } from \"@/client/preact/hooks/use-edited-projects\";\nimport { ProjectId } from \"@/shared/types/ids\";\nimport { FormSubmitButtonRow } from \"../form-submit-button-row\";\n\ntype Inputs = {\n    projectId: ProjectId;\n};\n\nexport const ChangeSelfProjectForm: FunctionComponent = () => {\n    const editedProjects = useEditedProjects();\n    const selfProject = _.filter(\n        editedProjects.projects,\n        (project) => !!project.isSelfProject\n    )[0];\n    const { control, handleSubmit } = useForm<Inputs>({\n        defaultValues: {\n            projectId: selfProject.projectId,\n        },\n    });\n\n    const changeSelfProjectMutation =\n        trpc.users.changeSelfProject.useMutation();\n\n    const onSubmit: SubmitHandler<Inputs> = async ({ projectId }) => {\n        await changeSelfProjectMutation.mutateAsync({\n            projectId: projectId as ProjectId,\n        });\n    };\n\n    return (\n        <div id=\"main-page\" className={sectionBoxClasses}>\n            <h4 className={sectionTitleClasses}>change main page</h4>\n\n            <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"flex flex-col gap-4\"\n            >\n                <p className=\"prose\">\n                    One of your pages on cohost is your \"main page\"; this is the\n                    page you see when you log in. Your main page can't be\n                    deleted, but is otherwise the same as the other pages you\n                    edit. Your main page is currently{\" \"}\n                    <strong>@{selfProject.handle}</strong>.\n                </p>\n\n                <SettingsRow\n                    bigLabel=\"change your main page to:\"\n                    inputElement={\n                        <Controller\n                            control={control}\n                            name=\"projectId\"\n                            render={({ field: { onChange, value } }) => (\n                                <ProjectChooser\n                                    onChange={onChange}\n                                    selectedProjectId={value as ProjectId}\n                                />\n                            )}\n                        />\n                    }\n                />\n\n                <FormSubmitButtonRow\n                    submitMutation={changeSelfProjectMutation}\n                    submitButtonLabel=\"change main page\"\n                />\n            </form>\n        </div>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport React, { FunctionComponent } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { useCurrentProject } from \"../../../hooks/data-loaders\";\nimport { sectionBoxClasses, sectionTitleClasses } from \"../shared\";\nimport { InfoBox, InfoBoxLevel } from \"../../elements/info-box\";\nimport { SettingsRow } from \"../../elements/settings-row\";\nimport { FormSubmitButtonRow } from \"../form-submit-button-row\";\nimport { DateTime } from \"luxon\";\nimport { useUserInfo } from \"@/client/preact/providers/user-info-provider\";\nimport sitemap from \"@/shared/sitemap\";\nimport AuthHelpers from \"@/client/lib/auth-helpers\";\nimport { getVanillaClient } from \"@/client/lib/trpc-vanilla\";\nimport { values } from \"lodash\";\nimport { StyledInput } from \"../../elements/styled-input\";\n\ntype ScheduleDeletionInputs = {\n    confirmEmail: string;\n    password: string;\n    otp: string;\n};\n\nconst InnerScheduleForDeleteForm: FunctionComponent = () => {\n    const userInfo = useUserInfo();\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n        trigger,\n        control,\n        watch,\n    } = useForm<ScheduleDeletionInputs>({\n        defaultValues: {\n            confirmEmail: \"\",\n            password: \"\",\n            otp: \"\",\n        },\n    });\n    const scheduleDeletionMutation = trpc.users.scheduleDelete.useMutation();\n    const confirmEmail = watch(\"confirmEmail\");\n\n    const onSubmit: SubmitHandler<ScheduleDeletionInputs> = async (values) => {\n        if (!userInfo.email) {\n            throw new Error(\"e-mail is null?\");\n        }\n\n        const email = userInfo.email;\n        const saltResult = await getVanillaClient().login.getSalt.query({\n            email,\n        });\n        const clientHash = await AuthHelpers.hashPasswordInWorker(\n            email,\n            saltResult.salt,\n            values.password\n        );\n\n        await scheduleDeletionMutation.mutateAsync({\n            confirmEmail: values.confirmEmail,\n            clientHash: clientHash,\n            twoFactorToken: values.otp,\n        });\n    };\n\n    return (\n        <div className={sectionBoxClasses}>\n            <form\n                className=\"flex flex-col gap-4\"\n                onSubmit={handleSubmit(onSubmit)}\n            >\n                <h4 className={sectionTitleClasses}>delete account</h4>\n\n                <p className=\"prose\">\n                    If you'd like to delete this account, fill out the\n                    information below. We'll schedule its data to be permanently\n                    deleted in 3 days &ndash; to give you a chance to change\n                    your mind &ndash; but with no further action required from\n                    you. If you need to delete it sooner than that, please\n                    e-mail us at{\" \"}\n                    <a href=\"mailto:support@cohost.org\">support@cohost.org</a>{\" \"}\n                    and we can help you.\n                </p>\n\n                <SettingsRow\n                    bigLabel=\"confirm e-mail address\"\n                    inputElement={\n                        <div className=\"flex flex-row items-center gap-2\">\n                            <StyledInput\n                                trigger={trigger}\n                                name=\"confirmEmail\"\n                                control={control}\n                                type=\"email\"\n                                showValidity={true}\n                            />\n                        </div>\n                    }\n                />\n\n                <SettingsRow\n                    bigLabel=\"confirm your password\"\n                    disabled={confirmEmail === \"\"}\n                    inputElement={\n                        <StyledInput\n                            trigger={trigger}\n                            name=\"password\"\n                            control={control}\n                            type=\"password\"\n                            showValidity={false}\n                            disabled={confirmEmail === \"\"}\n                        />\n                    }\n                />\n\n                {userInfo.twoFactorActive ? (\n                    <SettingsRow\n                        bigLabel=\"confirm your 2fa code\"\n                        disabled={confirmEmail === \"\"}\n                        inputElement={\n                            <StyledInput\n                                trigger={trigger}\n                                name=\"otp\"\n                                control={control}\n                                type=\"text\"\n                                showValidity={false}\n                                disabled={confirmEmail === \"\"}\n                            />\n                        }\n                    />\n                ) : null}\n\n                <FormSubmitButtonRow\n                    submitMutation={scheduleDeletionMutation}\n                    submitButtonLabel=\"schedule deletion\"\n                />\n            </form>\n        </div>\n    );\n};\n\ntype CancelScheduledDeletionInputs = {\n    confirm: boolean;\n};\n\nconst InnerCancelScheduledDeletionForm: FunctionComponent = () => {\n    const { register, handleSubmit } = useForm<CancelScheduledDeletionInputs>(\n        {}\n    );\n    const userInfo = useUserInfo();\n    const cancelScheduledDeletionMutation =\n        trpc.users.cancelScheduledDelete.useMutation();\n\n    const onSubmit: SubmitHandler<CancelScheduledDeletionInputs> = async (\n        values\n    ) => {\n        if (values.confirm) {\n            await cancelScheduledDeletionMutation.mutateAsync();\n        }\n    };\n\n    return userInfo.loggedIn ? (\n        <div className={sectionBoxClasses}>\n            <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"flex flex-col gap-4\"\n            >\n                <h4 className={sectionTitleClasses}>\n                    cancel scheduled deletion\n                </h4>\n\n                <p className=\"prose\">\n                    Your account is currently scheduled for deletion. At{\" \"}\n                    <strong>\n                        {userInfo.deleteAfter!.toLocaleString(\n                            DateTime.DATETIME_MED_WITH_WEEKDAY\n                        )}\n                    </strong>\n                    , the waiting period will expire and at our next scheduled\n                    maintenance less than 24 hours later, its data will be\n                    permanently deleted. If you've changed your mind, or didn't\n                    intend to request the account's deletion, you can cancel the\n                    deletion here.\n                </p>\n\n                <SettingsRow\n                    bigLabel=\"Please check this checkbox to confirm.\"\n                    inputElement={\n                        <input\n                            type=\"checkbox\"\n                            {...register(\"confirm\", {\n                                required:\n                                    \"You must check the checkbox to confirm.\",\n                            })}\n                            className=\"rounded-checkbox\"\n                        />\n                    }\n                />\n\n                <FormSubmitButtonRow\n                    submitMutation={cancelScheduledDeletionMutation}\n                    submitButtonLabel=\"cancel deletion\"\n                />\n            </form>\n        </div>\n    ) : null;\n};\n\nexport const ScheduleForDeleteForm: FunctionComponent = () => {\n    const userInfo = useUserInfo();\n\n    if (userInfo.deleteAfter) {\n        return <InnerCancelScheduledDeletionForm />;\n    } else {\n        return <InnerScheduleForDeleteForm />;\n    }\n};\n","import { useCurrentProject } from \"@/client/preact/hooks/data-loaders\";\nimport { useUserInfo } from \"@/client/preact/providers/user-info-provider\";\nimport sitemap from \"@/shared/sitemap\";\nimport { WireUserModel } from \"@/shared/types/wire-models\";\nimport { FunctionComponent, default as React } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { InfoBox } from \"../elements/info-box\";\nimport { sectionBoxClasses, sectionTitleClasses } from \"../settings/shared\";\nimport { ChangeEmailForm } from \"../settings/user-settings/change-email-form\";\nimport { ChangePasswordForm } from \"../settings/user-settings/change-password-form\";\nimport { CWFiltersForm } from \"../settings/user-settings/cw-filters-form\";\nimport { DisplaySettingsForm } from \"../settings/user-settings/display-settings-form\";\nimport { InvitesForm } from \"../settings/user-settings/invites-form\";\nimport { ModeratorSettingsForm } from \"../settings/user-settings/moderator-settings-form\";\nimport { PositionInQueue } from \"../settings/user-settings/queue-display\";\nimport { SubscriptionForm } from \"../settings/user-settings/subscription-form\";\nimport { TagFiltersForm } from \"../settings/user-settings/tag-filters-form\";\nimport { TwoFactorManagementForm } from \"../settings/user-settings/two-factor-management\";\nimport { SidebarMenu } from \"../sidebar-menu\";\nimport { ChangeSelfProjectForm } from \"../settings/user-settings/change-self-project-form\";\nimport { ScheduleForDeleteForm } from \"../settings/user-settings/queue-for-delete-form\";\n\ntype UserSettingsPageProps = {\n    user: WireUserModel;\n    hasModPermission: boolean;\n    modMode: boolean;\n};\n\nexport const UserSettingsMain: FunctionComponent<UserSettingsPageProps> = ({\n    user,\n    hasModPermission,\n    modMode,\n}) => {\n    const { activated } = useUserInfo();\n    const currentProject = useCurrentProject();\n    const handle = currentProject ? currentProject.handle : \"(unknown)\";\n\n    return (\n        <>\n            <Helmet title=\"settings\" />\n            <div className=\"container mx-auto mt-16 grid w-full grid-cols-1 gap-16 lg:grid-cols-4\">\n                <SidebarMenu />\n\n                {/* settings table of contents */}\n                <div className=\"cohost-shadow-light dark:cohost-shadow-dark prose invisible sticky top-32 order-3 mx-auto flex h-min w-full flex-col gap-4 rounded-lg bg-notWhite p-3 text-notBlack lg:visible\">\n                    <strong>what do you want to do?</strong>\n                    <ul>\n                        <li>\n                            <a href=\"#cohost-plus\">\n                                manage my cohost plus subscription\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"#password-email\">\n                                change my password or e-mail address\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"#main-page\">change my main page</a>\n                        </li>\n                        <li>\n                            <a href=\"#post-visibility\">\n                                change what posts I see\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"#post-display\">\n                                change how content inside posts looks\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"#ui-display\">\n                                change how other parts of the site look\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"#invites-activation\">\n                                check activation queue/invites\n                            </a>\n                        </li>\n\n                        {hasModPermission ? (\n                            <li>\n                                <a href=\"#staff-only\">\n                                    change staff-only settings\n                                </a>\n                            </li>\n                        ) : null}\n                    </ul>\n                </div>\n\n                {/* actual settings */}\n                <div className=\"col-span-1 flex w-full flex-col gap-6 lg:col-span-2\">\n                    <InfoBox\n                        level=\"info\"\n                        textSize=\"base\"\n                        className=\"not-prose text-notBlack\"\n                    >\n                        you can change settings which apply to all your pages\n                        here. some settings are specific to one page; you can\n                        also&nbsp;\n                        <a\n                            href={sitemap.public.project.settings().toString()}\n                            className=\"underline\"\n                        >\n                            edit @{handle}'s per-page settings\n                        </a>\n                        .\n                    </InfoBox>\n                    <ChangePasswordForm />\n                    <TwoFactorManagementForm />\n                    <ChangeEmailForm />\n                    <ChangeSelfProjectForm />\n                    <CWFiltersForm />\n                    <TagFiltersForm />\n                    <div className={sectionBoxClasses}>\n                        <h4 className={sectionTitleClasses}>silenced posts</h4>\n                        <div className=\"prose\">\n                            <p>\n                                <a\n                                    href={sitemap.public\n                                        .silencedPosts({})\n                                        .toString()}\n                                >\n                                    manage your silenced posts\n                                </a>\n                            </p>\n                        </div>\n                    </div>\n                    <DisplaySettingsForm user={user} />\n                    <SubscriptionForm />\n                    {activated ? <InvitesForm /> : <PositionInQueue />}\n                    <ScheduleForDeleteForm />\n                    {hasModPermission ? (\n                        <ModeratorSettingsForm modMode={modMode} />\n                    ) : null}\n                </div>\n            </div>\n        </>\n    );\n};\n\nUserSettingsMain.displayName = \"settings-main/page\";\nexport default UserSettingsMain;\n","import React from \"react\";\nimport { AuthnButton } from \"../partials/authn-button\";\n\ntype Mutation =\n    | {\n          isSuccess: boolean;\n          isError: false;\n          isLoading: boolean;\n          error: null;\n      }\n    | {\n          isSuccess: boolean;\n          isError: true;\n          isLoading: boolean;\n          error: { message: string };\n      };\n\ntype FormSubmitButtonRowProps<TSubmitMutation> = {\n    submitMutation: TSubmitMutation;\n    submitButtonLabel: string;\n};\n\nexport const FormSubmitButtonRow = <TSubmitMutation extends Mutation>(\n    props: FormSubmitButtonRowProps<TSubmitMutation>\n) => {\n    return (\n        <div className=\"flex w-full flex-row items-center justify-end gap-4 font-bold text-notWhite\">\n            {props.submitMutation.isSuccess ? (\n                <p className=\"text-green\">saved!</p>\n            ) : null}\n            {props.submitMutation.isError ? (\n                <p className=\"text-red\">{props.submitMutation.error.message}</p>\n            ) : null}\n\n            <AuthnButton\n                type=\"submit\"\n                disabled={props.submitMutation.isLoading}\n                className=\"font-bold\"\n            >\n                {props.submitButtonLabel}\n            </AuthnButton>\n        </div>\n    );\n};\n","export const sectionBoxClasses =\n    \"cohost-shadow-light dark:cohost-shadow-dark mx-auto flex max-h-min w-full flex-col gap-4 rounded-lg bg-notWhite text-notBlack px-7 py-8\";\nexport const sectionTitleClasses = \"font-atkinson font-bold text-4xl\";\nexport const buttonRowClasses =\n    \"flex w-full flex-row items-center justify-end gap-4 font-bold text-notWhite\";\nexport const subsectionTitleClasses = \"font-atkinson font-bold text-2xl pt-8\";\n","import { fromDateTime } from \"@/client/lib/beats\";\nimport { DateTime } from \"luxon\";\nimport React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { useDisplayPrefs } from \"../hooks/use-display-prefs\";\n\nfunction beatsFormat(dateTime: DateTime): string {\n    return `${dateTime\n        .setZone(\"UTC+1\")\n        .toLocaleString(DateTime.DATE_MED)} ${fromDateTime(dateTime, true)}`;\n}\n\nexport interface UnfriendlyTimestampProps {\n    dateISO: string;\n    link?: URL;\n    className?: string;\n}\n\nexport const UnfriendlyTimestamp: FunctionComponent<\n    UnfriendlyTimestampProps\n> = ({\n    dateISO,\n    link,\n    className = \"block flex-none text-sm text-gray-500 dark:text-gray-300\",\n}) => {\n    const displayPrefs = useDisplayPrefs();\n    const [luxonDT, setLuxonDT] = useState(DateTime.fromISO(dateISO).toUTC());\n    const timestampText = displayPrefs.beatsTimestamps\n        ? beatsFormat(luxonDT)\n        : luxonDT.toLocaleString(DateTime.DATE_MED_WITH_WEEKDAY);\n\n    useEffect(() => {\n        setLuxonDT((current) => current.toLocal());\n    }, []);\n\n    return (\n        <time dateTime={luxonDT.toISO()} className={className}>\n            {link ? (\n                <a href={link.toString()} className=\"hover:underline\">\n                    {timestampText}\n                </a>\n            ) : (\n                timestampText\n            )}\n        </time>\n    );\n};\n"],"names":["AuthHelpers","static","email","url","URL","document","searchParams","append","fetch","toString","then","resp","json","data","salt","password","hashWorker","Worker","Promise","resolve","onmessage","e","clientHash","postMessage","ButtonStyle","z","ButtonColor","baseColors","buttonStyle","color","className","optional","classnames","pillClasses","roundrectClasses","authnStyleClasses","cherryClasses","strawberryClasses","redClasses","greenClasses","mangoClasses","notBlackClasses","accentClasses","secondaryClasses","authnPrimaryColorClasses","authnOtherColorClasses","sharedClasses","props","Button","React","ref","classes","_extends","children","displayName","LinkButton","SettingsRow","bigLabel","smallLabel","inputElement","infoBoxLevel","infoBoxContent","customDescription","disabled","bigLabelRowSpanClasses","customDescriptionContent","htmlFor","id","classNames","InfoBox","level","StyledInput","style","showValidity","name","control","rules","trigger","field","fieldState","useController","fieldName","onChange","directRef","setDirectRef","useState","useEffect","inputStyleClasses","contentDivStyleClasses","validityIconStyleClasses","useMemo","value","defaultValue","isTouched","shouldFocus","readOnly","invalid","XMarkIcon","CheckIcon","ChangeEmailForm","t","useTranslation","currentEmail","emailVerified","useUserInfo","handleSubmit","formState","errors","isSubmitting","isSubmitSuccessful","useForm","defaultValues","undefined","utils","trpc","changeEmailMutation","onSuccess","login","emailChangeInProgress","invalidate","resendVerificationMutation","validateEmail","useCallback","async","axios","sitemap","responseType","valid","reason","sectionBoxClasses","sectionTitleClasses","onSubmit","mutateAsync","newEmail","required","validate","type","autoComplete","placeholder","message","onClick","mutate","isLoading","isSuccess","isError","failureReason","AuthnButton","ChangePasswordForm","userInfo","formError","setFormError","getValues","reset","mode","oldPassword","newPassword","loggedIn","oldClientHash","params","newClientHash","confirmNewPassword","minLength","role","commonCWBoxClasses","CWFiltersForm","initialFilters","suspense","saveFilters","error","users","cwFilters","query","silence","setSilence","autoexpand","setAutoexpand","autoExpandAllCws","setAutoExpandAllCws","visible","setVisible","TokenInput","TokenIcon","ExclamationIconOutline","tokens","setTokens","checked","val","onShowSilencedCWs","DisplaySettingsForm","user","submitting","setSubmitting","formSuccess","setFormSuccess","displayPrefs","useDisplayPrefs","hasCohostPlus","useHasCohostPlus","showNumbersField","useFlag","FeatureFlag","showPostComposerV2Field","register","collapseAdultContent","collapseLongThreads","gifsStartPaused","pauseProfileGifs","enableEmbeds","disableEmbeds","externalLinksInNewTab","enableNotificationCount","suggestedFollowsDismissed","enableMobileQuickShare","beatsTimestamps","disableModalPostComposer","homeView","defaultShow18PlusPostsInSearches","defaultPostBoxTheme","previewFeatures_lexicalPostEditor","chaosDay2023_showNumbers","userSettingsMutation","showPreviewFeatures","explicitlyCollapseAdultContent","subsectionTitleClasses","href","encodeURIComponent","env","hostname","EllipsisHorizontalIcon","InvitesForm","rollbar","useRollbar","body","invites","totalRemainingUses","copyActivateLinkToClipboard","inviteId","preventDefault","activateLink","navigator","clipboard","writeText","catch","_err","Trans","i18nKey","values","nInvitesAvailable","count","map","invite","key","userActivationsRemaining","ModeratorSettingsForm","modMode","PositionInQueue","activated","positionInQueue","enabled","toLocaleString","LookupKey","priceLookupKey","SubscriptionForm","src","path","cohostPlusFlyer","alt","Suspense","fallback","SubscriptionFormInner","subscriptions","select","filter","sub","status","length","UnfriendlyTimestamp","dateISO","expirationDate","action","method","Enum","cohost_plus_monthly","commonBoxClasses","TagFiltersForm","saveTagFilters","tagFilters","collapsedTags","setCollapsedTags","collapse","silencedTags","setSilencedTags","silencedTagsVisible","setSilencedTagsVisible","HashtagIcon","getSuggestions","onShowSilencedTags","getVanillaClient","twoFactorManagementMachine","createMachine","initial","strict","context","baseSecret","baseSecretDataUrl","recoverySecret","token","retriesRemaining","resolvingTRPCError","states","initializing","invoke","onDone","target","cond","idle","on","SETUP_START","setup","promptingBaseSecret","actions","assign","event","dataUrl","onError","ACKNOWLEDGE","CANCEL","confirmingToken","awaitingInput","SETUP_ENTER_TOKEN","_context","sending","pure","raise","SETUP_DONE","SETUP_RETRY_TOKEN","SETUP_FATAL_ERROR","exit","setupDone","setupError","RESET_START","RESET_ENTER_TOKEN","RESET_DONE","RESET_RETRY_TOKEN","RESET_FATAL_ERROR","resetError","services","get2FAState","res","is2FAEnabled","generateBaseSecret","generate2FABaseSecret","keyuri","authenticator","reject","qrcode","sendSetup","_event","setup2FA","TRPCClientError","errorCode","sendReset","console","warn","reset2FA","err","guards","TwoFactorManagementContext","createContext","insetClasses","selectBaseSecret","state","selectBaseSecretDataUrl","selectRetriesRemaining","selectRecoverySecret","InactiveIdle","useContext","buttonRowClasses","send","SetupPromptingBaseSecret","useSelector","width","height","ConfirmingToken","ActiveIdle","setupJustFinished","SetupError","ResetError","TwoFactorManagementForm","twoFactorManagementService","useMachine","devTools","process","matches","resetJustFinished","ErrorBoundary","Provider","ProjectChooserOption","project","Listbox","projectId","ProjectAvatar","noLink","handle","ProjectChooser","projects","useEditedProjects","selectedProject","_","selectedProjectId","by","ChevronDownIcon","Transition","as","Fragment","leave","leaveFrom","leaveTo","ChangeSelfProjectForm","editedProjects","selfProject","isSelfProject","changeSelfProjectMutation","Controller","render","FormSubmitButtonRow","submitMutation","submitButtonLabel","InnerScheduleForDeleteForm","watch","confirmEmail","otp","scheduleDeletionMutation","Error","saltResult","getSalt","twoFactorToken","twoFactorActive","InnerCancelScheduledDeletionForm","cancelScheduledDeletionMutation","confirm","deleteAfter","DateTime","ScheduleForDeleteForm","UserSettingsMain","hasModPermission","currentProject","useCurrentProject","Helmet","title","SidebarMenu","textSize","link","luxonDT","setLuxonDT","toUTC","timestampText","dateTime","setZone","fromDateTime","current","toLocal","toISO"],"sourceRoot":""}