{"version":3,"file":"client-preact-components-pages-reset-password.0ee0d8189c9fba5403f1.js","mappings":"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","sources":["webpack:///./lib/auth-helpers.ts","webpack:///./preact/components/elements/styled-input.tsx","webpack:///./preact/components/request-password-reset-form.tsx","webpack:///./preact/components/reset-password-form.tsx","webpack:///./preact/components/pages/reset-password.tsx","webpack:///./preact/components/partials/authn-input.tsx"],"sourcesContent":["import * as LoginV1Types from \"@/shared/api-types/login-v1\";\n\nexport default class AuthHelpers {\n    static async getSalt(email: string): Promise<string> {\n        const url = new URL(\"/api/v1/login/salt\", document.URL);\n        url.searchParams.append(\"email\", email);\n\n        const response = await fetch(url.toString()).then((resp) =>\n            resp.json().then((data) => data as LoginV1Types.GetSaltResp)\n        );\n\n        return response.salt;\n    }\n\n    static async hashPasswordInWorker(\n        email: string,\n        salt: string,\n        password: string\n    ): Promise<string> {\n        // run this slow hash function in the background\n        // const hashWorker = new Worker(\"/static/hash-worker.js\");\n        const hashWorker = new Worker(\n            new URL(\"./hash-worker.ts\", import.meta.url)\n        );\n\n        return new Promise((resolve) => {\n            hashWorker.onmessage = (\n                e: MessageEvent<{\n                    clientHash: string;\n                }>\n            ): void => {\n                resolve(e.data.clientHash);\n            };\n\n            hashWorker.postMessage({ email, password, salt });\n        });\n    }\n}\n","import { CheckIcon, XMarkIcon } from \"@heroicons/react/24/outline\";\nimport classNames from \"classnames\";\nimport React, {\n    InputHTMLAttributes,\n    useEffect,\n    useMemo,\n    useState,\n} from \"react\";\nimport {\n    FieldValues,\n    useController,\n    UseControllerProps,\n    UseFormTrigger,\n} from \"react-hook-form\";\n\ntype InputStyle = \"light\" | \"dark\" | \"dynamic\";\n\ntype StyledInputProps<T extends FieldValues> = {\n    style?: InputStyle;\n    showValidity?: boolean;\n} & UseControllerProps<T> & { trigger: UseFormTrigger<T> } & Pick<\n        InputHTMLAttributes<HTMLInputElement>,\n        | \"type\"\n        | \"autoComplete\"\n        | \"placeholder\"\n        | \"max\"\n        | \"min\"\n        | \"step\"\n        | \"readOnly\"\n        | \"disabled\"\n    >;\n\nexport const StyledInput = <T extends FieldValues>({\n    style = \"light\",\n    showValidity = true,\n    name,\n    control,\n    rules,\n    trigger,\n    ...props\n}: StyledInputProps<T>) => {\n    const { field, fieldState } = useController<T>({\n        name,\n        control,\n        rules,\n    });\n    const { name: fieldName, onChange } = field;\n\n    // setup our own ref so we can track field value\n    const [directRef, setDirectRef] = useState<HTMLInputElement | null>();\n    useEffect(() => {\n        field.ref(directRef);\n    }, [directRef, field]);\n\n    const {\n        inputStyleClasses,\n        contentDivStyleClasses,\n        validityIconStyleClasses,\n    } = useMemo(() => {\n        switch (style) {\n            case \"light\":\n                return {\n                    inputStyleClasses: `border-gray-600 text-notBlack\n                        placeholder:text-gray-600\n                        focus:border-notBlack disabled:border-gray-300`,\n                    contentDivStyleClasses: `to-notWhite`,\n                    validityIconStyleClasses: `bg-notWhite`,\n                };\n            case \"dynamic\":\n                return {\n                    inputStyleClasses: \"co-styled-input\",\n                    contentDivStyleClasses: \"co-styled-input-content\",\n                    validityIconStyleClasses: \"co-styled-input-validity-icon\",\n                };\n            case \"dark\":\n            default:\n                return {\n                    inputStyleClasses: `border-gray-400 text-notWhite \n                        placeholder:text-gray-400\n                        focus:border-notWhite read-only:bg-gray-700`,\n                    contentDivStyleClasses: `to-notBlack`,\n                    validityIconStyleClasses: `bg-notBlack`,\n                };\n        }\n    }, [style]);\n\n    // manually validate when we don't get an input event\n    // can happen on browser autofill\n    useEffect(() => {\n        if (\n            directRef &&\n            directRef.value &&\n            directRef.value !== props.defaultValue &&\n            directRef.value !== field.value &&\n            !fieldState.isTouched\n        ) {\n            onChange(directRef.value);\n            void trigger(fieldName, { shouldFocus: true });\n        }\n    }, [\n        directRef,\n        field.value,\n        fieldName,\n        fieldState.isTouched,\n        onChange,\n        props.defaultValue,\n        trigger,\n    ]);\n    return (\n        <div className=\"relative\">\n            <input\n                className={classNames(\n                    `\n                        w-full min-w-[15rem] rounded-lg border-2 bg-transparent\n                    `,\n                    inputStyleClasses\n                )}\n                {...props}\n                {...field}\n                ref={setDirectRef}\n            />\n            {showValidity && !props.readOnly && fieldState.isTouched ? (\n                <>\n                    <div\n                        className={classNames(\n                            `\n                                absolute bottom-0 right-9 top-0 my-auto h-6 w-3 \n                                bg-gradient-to-r from-transparent\n                            `,\n                            contentDivStyleClasses\n                        )}\n                    />\n                    {fieldState.invalid ? (\n                        <XMarkIcon\n                            className={classNames(\n                                `\n                                    absolute bottom-0 right-3 top-0 my-auto h-6 \n                                    w-6 text-red\n                                `,\n                                validityIconStyleClasses\n                            )}\n                        />\n                    ) : (\n                        <CheckIcon\n                            className={classNames(\n                                `\n                                    absolute bottom-0 right-3 top-0 my-auto h-6\n                                    w-6 bg-notWhite text-green\n                                `,\n                                validityIconStyleClasses\n                            )}\n                        />\n                    )}\n                </>\n            ) : null}\n        </div>\n    );\n};\n","import type * as LoginV1Types from \"@/shared/api-types/login-v1\";\nimport sitemap from \"@/shared/sitemap\";\nimport axios, { AxiosResponse } from \"axios\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { AuthnButton } from \"./partials/authn-button\";\nimport { AuthnInput } from \"./partials/authn-input\";\n\ntype Inputs = {\n    email: string;\n};\n\nexport const RequestPasswordResetForm: FunctionComponent = () => {\n    const { t } = useTranslation();\n\n    const [formError, setFormError] = useState(\"\");\n    const [submitting, setSubmitting] = useState(false);\n    const {\n        handleSubmit,\n        control,\n        trigger,\n        formState: { errors },\n    } = useForm<Inputs>({\n        mode: \"all\",\n    });\n\n    const onSubmit: SubmitHandler<Inputs> = async (data) => {\n        setSubmitting(true);\n        const { email } = data;\n\n        const params: LoginV1Types.RequestPasswordResetReq = {\n            email,\n        };\n\n        try {\n            await axios.post<\n                any,\n                AxiosResponse<any>,\n                LoginV1Types.RequestPasswordResetReq\n            >(sitemap.public.apiV1.requestPasswordReset().toString(), params);\n            setSubmitting(false);\n            location.replace(sitemap.public.login());\n        } catch (e) {\n            setFormError(\"Request failed.\");\n            setSubmitting(false);\n        }\n    };\n\n    return (\n        <form\n            onSubmit={handleSubmit(onSubmit)}\n            className=\"py flex flex-col gap-6\"\n        >\n            <h1 className=\"font-league text-2xl\">Reset password</h1>\n            <div className=\"flex flex-col gap-2\">\n                <label htmlFor=\"email\" className=\"text-lg\">\n                    {t(\"client:register.email.label\")}\n                </label>\n                <AuthnInput\n                    trigger={trigger}\n                    type=\"email\"\n                    autoComplete=\"email\"\n                    placeholder=\"bradley@example.com\"\n                    name=\"email\"\n                    control={control}\n                    rules={{\n                        required: \"E-mail address is required!\",\n                    }}\n                />\n                <p className=\"text-red\">\n                    {errors.email ? errors.email.message : null}\n                </p>\n                <p className=\"text-sm\">\n                    If this email exists in our system, we'll send a reset link\n                    here. Please check your spam folder if you haven't received\n                    it within 5 or so minutes!\n                </p>\n            </div>\n            <div className=\"flex flex-col gap-2\">\n                <AuthnButton type=\"submit\" disabled={submitting}>\n                    send reset email\n                </AuthnButton>\n                {formError ? <p className=\"text-red\">{formError}</p> : null}\n            </div>\n        </form>\n    );\n};\n","import AuthHelpers from \"@/client/lib/auth-helpers\";\nimport type * as LoginV1Types from \"@/shared/api-types/login-v1\";\nimport sitemap from \"@/shared/sitemap\";\nimport axios, { AxiosResponse } from \"axios\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { AuthnButton } from \"./partials/authn-button\";\nimport { AuthnInput } from \"./partials/authn-input\";\n\ntype Inputs = {\n    password: string;\n    passwordConfirm: string;\n    email: string;\n    resetNonce: string;\n};\n\ntype ResetPasswordFormProps = {\n    email: string;\n    resetNonce: string;\n};\n\nexport const ResetPasswordForm: FunctionComponent<ResetPasswordFormProps> = ({\n    email,\n    resetNonce,\n}) => {\n    const { t } = useTranslation();\n\n    const [formError, setFormError] = useState(\"\");\n    const [submitting, setSubmitting] = useState(false);\n    const {\n        register,\n        handleSubmit,\n        getValues,\n        control,\n        trigger,\n        formState: { errors },\n    } = useForm<Inputs>({\n        mode: \"all\",\n        defaultValues: {\n            email,\n            resetNonce,\n        },\n    });\n    const onSubmit: SubmitHandler<Inputs> = async (data) => {\n        setSubmitting(true);\n        const { email, resetNonce } = data;\n        const salt = await AuthHelpers.getSalt(data.email);\n        const newClientHash = await AuthHelpers.hashPasswordInWorker(\n            data.email,\n            salt,\n            data.password\n        );\n\n        const params: LoginV1Types.ChangePasswordReq = {\n            type: \"reset\",\n            newClientHash,\n            email,\n            resetNonce,\n        };\n\n        try {\n            const res = await axios.post<\n                any,\n                AxiosResponse<LoginV1Types.ChangePasswordResp>,\n                LoginV1Types.ChangePasswordReq\n            >(sitemap.public.apiV1.changePassword().toString(), params);\n            setSubmitting(false);\n            location.replace(res.data.redirectTo);\n        } catch (e) {\n            setFormError(\"Changing password failed.\");\n            setSubmitting(false);\n        }\n    };\n\n    return (\n        <form\n            onSubmit={handleSubmit(onSubmit)}\n            className=\"py flex flex-col gap-6\"\n        >\n            <input type=\"hidden\" {...register(\"email\", { required: true })} />\n            <input\n                type=\"hidden\"\n                {...register(\"resetNonce\", { required: true })}\n            />\n            <h1 className=\"font-league text-2xl\">Reset password</h1>\n            <div className=\"flex flex-col gap-2\">\n                <label htmlFor=\"password\" className=\"text-lg\">\n                    {t(\"client:register.password.label\")}\n                </label>\n                <AuthnInput\n                    trigger={trigger}\n                    type=\"password\"\n                    autoComplete=\"new-password\"\n                    placeholder=\"hunter2\"\n                    name=\"password\"\n                    control={control}\n                    rules={{\n                        required: t(\n                            \"client:register.password.required\",\n                            \"Password is required!\"\n                        ).toString(),\n                        minLength: {\n                            value: 8,\n                            message: t(\n                                \"client:register.password.min-length\",\n                                \"Password must be at least 8 characters!\"\n                            ).toString(),\n                        },\n                    }}\n                />\n                <p className=\"text-red\">\n                    {errors.password ? errors.password.message : null}\n                </p>\n                <AuthnInput\n                    trigger={trigger}\n                    type=\"password\"\n                    placeholder=\"hunter2\"\n                    autoComplete=\"new-password\"\n                    control={control}\n                    name=\"passwordConfirm\"\n                    rules={{\n                        validate: (value) =>\n                            value === getValues().password ||\n                            t(\n                                \"client:register.password.confirm-password-mismatch\",\n                                \"Passwords must match!\"\n                            ).toString(),\n                    }}\n                />\n                <p className=\"text-sm\">\n                    {t(\n                        \"client:register.password.description\",\n                        \"Your password must be at least 8 characters. Other than that, go wild.\"\n                    )}\n                </p>\n                <p className=\"text-sm\">\n                    <Trans i18nKey=\"client:register.password.password-manager\">\n                        Please consider{\" \"}\n                        <a\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\"\n                            className=\"font-bold text-mango hover:underline\"\n                            href=\"https://www.consumerreports.org/digital-security/everything-you-need-to-know-about-password-managers-a5624939418/\"\n                        >\n                            using a password manager\n                        </a>{\" \"}\n                        to generate a secure password.\n                    </Trans>\n                </p>\n                <p className=\"text-red\">\n                    {errors.passwordConfirm\n                        ? errors.passwordConfirm.message\n                        : null}\n                </p>\n            </div>\n            <div className=\"flex flex-col gap-2\">\n                <AuthnButton type=\"submit\" disabled={submitting}>\n                    reset password\n                </AuthnButton>\n                {formError ? <p className=\"text-red\">{formError}</p> : null}\n            </div>\n        </form>\n    );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { CohostLogo } from \"../icons/cohost-logo\";\nimport { RequestPasswordResetForm } from \"../request-password-reset-form\";\nimport { ResetPasswordForm } from \"../reset-password-form\";\n\ntype ResetPasswordPageProps = {\n    email?: string;\n    resetNonce?: string;\n};\n\nexport const ResetPasswordPage: FunctionComponent<ResetPasswordPageProps> = ({\n    email,\n    resetNonce,\n}) => {\n    return (\n        <>\n            <Helmet title=\"reset password\" />\n            <CohostLogo className=\"-ml-6 text-notWhite lg:-ml-12\" />\n            {email && resetNonce ? (\n                <ResetPasswordForm email={email} resetNonce={resetNonce} />\n            ) : (\n                <RequestPasswordResetForm />\n            )}\n        </>\n    );\n};\n\nResetPasswordPage.displayName = \"reset-password\";\nexport default ResetPasswordPage;\n","import React from \"react\";\nimport {\n    FieldValues,\n    UseControllerProps,\n    UseFormTrigger,\n} from \"react-hook-form\";\nimport { StyledInput } from \"../elements/styled-input\";\n\nexport type AuthnInputProps<T extends FieldValues> = UseControllerProps<T> & {\n    trigger: UseFormTrigger<T>;\n} & Pick<\n        React.InputHTMLAttributes<HTMLInputElement>,\n        \"type\" | \"autoComplete\" | \"placeholder\" | \"max\" | \"readOnly\"\n    >;\n\n/** @deprecated */\nexport const AuthnInput = <T extends FieldValues>({\n    ...props\n}: AuthnInputProps<T>) => <StyledInput style=\"dark\" {...props} />;\n"],"names":["AuthHelpers","static","email","url","URL","document","searchParams","append","fetch","toString","then","resp","json","data","salt","password","hashWorker","Worker","Promise","resolve","onmessage","e","clientHash","postMessage","StyledInput","style","showValidity","name","control","rules","trigger","props","field","fieldState","useController","fieldName","onChange","directRef","setDirectRef","useState","useEffect","ref","inputStyleClasses","contentDivStyleClasses","validityIconStyleClasses","useMemo","value","defaultValue","isTouched","shouldFocus","React","className","_extends","classNames","readOnly","invalid","XMarkIcon","CheckIcon","RequestPasswordResetForm","t","useTranslation","formError","setFormError","submitting","setSubmitting","handleSubmit","formState","errors","useForm","mode","onSubmit","async","params","axios","sitemap","location","replace","htmlFor","AuthnInput","type","autoComplete","placeholder","required","message","AuthnButton","disabled","ResetPasswordForm","resetNonce","register","getValues","defaultValues","newClientHash","res","redirectTo","minLength","validate","Trans","i18nKey","rel","target","href","passwordConfirm","ResetPasswordPage","Helmet","title","CohostLogo","displayName"],"sourceRoot":""}