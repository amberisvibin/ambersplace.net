{"version":3,"file":"client-preact-components-pages-signup.9cf0c1a9da40b6689211.js","mappings":"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","sources":["webpack:///./lib/auth-helpers.ts","webpack:///./preact/components/elements/styled-input.tsx","webpack:///./preact/components/register-form.tsx","webpack:///./preact/components/pages/signup.tsx","webpack:///./preact/components/partials/authn-input.tsx"],"sourcesContent":["import * as LoginV1Types from \"@/shared/api-types/login-v1\";\n\nexport default class AuthHelpers {\n    static async getSalt(email: string): Promise<string> {\n        const url = new URL(\"/api/v1/login/salt\", document.URL);\n        url.searchParams.append(\"email\", email);\n\n        const response = await fetch(url.toString()).then((resp) =>\n            resp.json().then((data) => data as LoginV1Types.GetSaltResp)\n        );\n\n        return response.salt;\n    }\n\n    static async hashPasswordInWorker(\n        email: string,\n        salt: string,\n        password: string\n    ): Promise<string> {\n        // run this slow hash function in the background\n        // const hashWorker = new Worker(\"/static/hash-worker.js\");\n        const hashWorker = new Worker(\n            new URL(\"./hash-worker.ts\", import.meta.url)\n        );\n\n        return new Promise((resolve) => {\n            hashWorker.onmessage = (\n                e: MessageEvent<{\n                    clientHash: string;\n                }>\n            ): void => {\n                resolve(e.data.clientHash);\n            };\n\n            hashWorker.postMessage({ email, password, salt });\n        });\n    }\n}\n","import { CheckIcon, XMarkIcon } from \"@heroicons/react/24/outline\";\nimport classNames from \"classnames\";\nimport React, {\n    InputHTMLAttributes,\n    useEffect,\n    useMemo,\n    useState,\n} from \"react\";\nimport {\n    FieldValues,\n    useController,\n    UseControllerProps,\n    UseFormTrigger,\n} from \"react-hook-form\";\n\ntype InputStyle = \"light\" | \"dark\" | \"dynamic\";\n\ntype StyledInputProps<T extends FieldValues> = {\n    style?: InputStyle;\n    showValidity?: boolean;\n} & UseControllerProps<T> & { trigger: UseFormTrigger<T> } & Pick<\n        InputHTMLAttributes<HTMLInputElement>,\n        | \"type\"\n        | \"autoComplete\"\n        | \"placeholder\"\n        | \"max\"\n        | \"min\"\n        | \"step\"\n        | \"readOnly\"\n        | \"disabled\"\n    >;\n\nexport const StyledInput = <T extends FieldValues>({\n    style = \"light\",\n    showValidity = true,\n    name,\n    control,\n    rules,\n    trigger,\n    ...props\n}: StyledInputProps<T>) => {\n    const { field, fieldState } = useController<T>({\n        name,\n        control,\n        rules,\n    });\n    const { name: fieldName, onChange } = field;\n\n    // setup our own ref so we can track field value\n    const [directRef, setDirectRef] = useState<HTMLInputElement | null>();\n    useEffect(() => {\n        field.ref(directRef);\n    }, [directRef, field]);\n\n    const {\n        inputStyleClasses,\n        contentDivStyleClasses,\n        validityIconStyleClasses,\n    } = useMemo(() => {\n        switch (style) {\n            case \"light\":\n                return {\n                    inputStyleClasses: `border-gray-600 text-notBlack\n                        placeholder:text-gray-600\n                        focus:border-notBlack disabled:border-gray-300`,\n                    contentDivStyleClasses: `to-notWhite`,\n                    validityIconStyleClasses: `bg-notWhite`,\n                };\n            case \"dynamic\":\n                return {\n                    inputStyleClasses: \"co-styled-input\",\n                    contentDivStyleClasses: \"co-styled-input-content\",\n                    validityIconStyleClasses: \"co-styled-input-validity-icon\",\n                };\n            case \"dark\":\n            default:\n                return {\n                    inputStyleClasses: `border-gray-400 text-notWhite \n                        placeholder:text-gray-400\n                        focus:border-notWhite read-only:bg-gray-700`,\n                    contentDivStyleClasses: `to-notBlack`,\n                    validityIconStyleClasses: `bg-notBlack`,\n                };\n        }\n    }, [style]);\n\n    // manually validate when we don't get an input event\n    // can happen on browser autofill\n    useEffect(() => {\n        if (\n            directRef &&\n            directRef.value &&\n            directRef.value !== props.defaultValue &&\n            directRef.value !== field.value &&\n            !fieldState.isTouched\n        ) {\n            onChange(directRef.value);\n            void trigger(fieldName, { shouldFocus: true });\n        }\n    }, [\n        directRef,\n        field.value,\n        fieldName,\n        fieldState.isTouched,\n        onChange,\n        props.defaultValue,\n        trigger,\n    ]);\n    return (\n        <div className=\"relative\">\n            <input\n                className={classNames(\n                    `\n                        w-full min-w-[15rem] rounded-lg border-2 bg-transparent\n                    `,\n                    inputStyleClasses\n                )}\n                {...props}\n                {...field}\n                ref={setDirectRef}\n            />\n            {showValidity && !props.readOnly && fieldState.isTouched ? (\n                <>\n                    <div\n                        className={classNames(\n                            `\n                                absolute bottom-0 right-9 top-0 my-auto h-6 w-3 \n                                bg-gradient-to-r from-transparent\n                            `,\n                            contentDivStyleClasses\n                        )}\n                    />\n                    {fieldState.invalid ? (\n                        <XMarkIcon\n                            className={classNames(\n                                `\n                                    absolute bottom-0 right-3 top-0 my-auto h-6 \n                                    w-6 text-red\n                                `,\n                                validityIconStyleClasses\n                            )}\n                        />\n                    ) : (\n                        <CheckIcon\n                            className={classNames(\n                                `\n                                    absolute bottom-0 right-3 top-0 my-auto h-6\n                                    w-6 bg-notWhite text-green\n                                `,\n                                validityIconStyleClasses\n                            )}\n                        />\n                    )}\n                </>\n            ) : null}\n        </div>\n    );\n};\n","import AuthHelpers from \"@/client/lib/auth-helpers\";\nimport type * as LoginV1Types from \"@/shared/api-types/login-v1\";\nimport sitemap from \"@/shared/sitemap\";\nimport { InviteId, ProjectHandle } from \"@/shared/types/ids\";\nimport HCaptcha from \"@hcaptcha/react-hcaptcha\";\nimport axios, { AxiosResponse } from \"axios\";\nimport Chance from \"chance\";\nimport { DateTime } from \"luxon\";\nimport generate from \"project-name-generator\";\nimport React, {\n    FunctionComponent,\n    useContext,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from \"react\";\nimport { SubmitHandler, useForm, useWatch, Validate } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { useSSR } from \"../hooks/is-server\";\nimport { AuthnButton } from \"./partials/authn-button\";\nimport { AuthnInput } from \"./partials/authn-input\";\nimport NoSSR from \"@mpth/react-no-ssr\";\nimport { trpc } from \"@/client/lib/trpc\";\nimport { useSiteConfig } from \"../providers/site-config-provider\";\nconst chance = new Chance();\n\nconst SIXTEEN_YEARS_AGO = DateTime.now().minus({ years: 16 });\n\ntype Inputs = {\n    handle: string;\n    password: string;\n    passwordConfirm: string;\n    email: string;\n    birthdate: string;\n    hCaptchaToken: string;\n    inviteCode: InviteId;\n};\n\ntype RegisterFormProps = {\n    inviteCode?: string;\n};\n\nexport const RegisterForm: FunctionComponent<RegisterFormProps> = ({\n    inviteCode,\n}) => {\n    const { t } = useTranslation();\n    const { isServer } = useSSR();\n    const randomHandle = useMemo(() => {\n        return isServer\n            ? \"\"\n            : generate({\n                  alliterative: chance.d10() < 3,\n                  words: chance.integer({ min: 2, max: 4 }),\n              }).dashed;\n    }, [isServer]);\n\n    const [submitting, setSubmitting] = useState(false);\n    const [, setValidatingEmail] = useState(false);\n    const { HCAPTCHA_SITE_KEY } = useSiteConfig();\n    const captchaRef = useRef<HCaptcha>(null);\n    const {\n        register,\n        handleSubmit,\n        getValues,\n        setValue,\n        control,\n        trigger,\n        formState: { errors },\n    } = useForm<Inputs>({\n        mode: \"all\",\n        defaultValues: {\n            inviteCode,\n        },\n    });\n    const checkHandle = trpc.projects.checkHandle.useMutation();\n    const onSubmit: SubmitHandler<Inputs> = async (data) => {\n        setSubmitting(true);\n        await captchaRef.current?.execute({ async: true });\n        const salt = await AuthHelpers.getSalt(data.email);\n        const clientHash = await AuthHelpers.hashPasswordInWorker(\n            data.email,\n            salt,\n            data.password\n        );\n\n        const params = new URLSearchParams({\n            handle: data.handle,\n            salt,\n            clientHash,\n            email: data.email,\n            birthdate: data.birthdate,\n            \"h-captcha-response\": data.hCaptchaToken,\n        });\n\n        if (inviteCode) params.set(\"inviteCode\", inviteCode);\n\n        const response = await axios.post(\n            sitemap.public.apiV1.register().toString(),\n            params\n        );\n\n        if (response.status === 201) {\n            location.replace(\"/\");\n        }\n\n        setSubmitting(false);\n    };\n\n    const validateHandle: Validate<string> = async (handle: string) => {\n        try {\n            const resp = await checkHandle.mutateAsync({\n                handle: handle as ProjectHandle,\n            });\n\n            return resp.valid === true ? true : resp.reason;\n        } catch (e) {\n            return t(\"common:unknown-error\").toString();\n        }\n    };\n\n    const validateEmail: Validate<string> = async (email: string) => {\n        try {\n            setValidatingEmail(true);\n            const resp = await axios.post<\n                LoginV1Types.CheckEmailResp,\n                AxiosResponse<LoginV1Types.CheckEmailResp>,\n                LoginV1Types.CheckEmailReq\n            >(\n                sitemap.public.apiV1.checkEmail().toString(),\n                {\n                    email,\n                },\n                { responseType: \"json\" }\n            );\n            setValidatingEmail(false);\n\n            return resp.data.valid === true ? true : resp.data.reason;\n        } catch (e) {\n            setValidatingEmail(false);\n            return t(\"common:unknown-error\").toString();\n        }\n    };\n\n    useEffect(() => {\n        register(\"hCaptchaToken\", {\n            required: t(\n                \"client:register.captcha.required\",\n                \"Please complete the captcha.\"\n            ).toString(),\n        });\n    });\n\n    const watch = useWatch({\n        control,\n    });\n    const selectedBirthdate = watch.birthdate;\n    // this number will always be negative but we don't want that. shout out\n    // absolute values for existing as a mathematical concept.\n    const selectedBirthdateUnder18 =\n        Math.abs(\n            DateTime.fromISO(\n                watch.birthdate ?? DateTime.now().toISODate()\n            ).diffNow(\"years\").years\n        ) < 18;\n\n    return (\n        <NoSSR\n            fallback={\n                <div className=\"prose prose-invert text-notWhite\">\n                    <p>Loading...</p>\n                    <p>If you keep seeing this, try refreshing!</p>\n                </div>\n            }\n        >\n            <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"py flex flex-col gap-6\"\n            >\n                <h1 className=\"font-league text-2xl\">Register</h1>\n                <div className=\"flex flex-col gap-2\">\n                    <label className=\"text-lg\">\n                        <p className=\"my-2 text-lg\">\n                            {t(\"client:register.handle.label\")}\n                        </p>\n\n                        <AuthnInput\n                            trigger={trigger}\n                            placeholder={randomHandle}\n                            type=\"text\"\n                            name=\"handle\"\n                            control={control}\n                            rules={{\n                                required: \"Handle is required!\",\n                                validate: validateHandle,\n                            }}\n                        />\n\n                        <p className=\"my-2 text-sm\">\n                            {t(\n                                \"client:register.handle.description\",\n                                \"Must be at least 3 characters and contain only letters, numbers, or the hyphen (-) character. You can change this later!\"\n                            )}\n                        </p>\n                    </label>\n                    <p className=\"text-red\" role=\"alert\">\n                        {errors.handle ? errors.handle.message : null}\n                    </p>\n                </div>\n                <div className=\"flex flex-col gap-2\">\n                    <label>\n                        <p className=\"my-2 text-lg\">\n                            {t(\"client:register.email.label\")}\n                        </p>\n                        <AuthnInput\n                            trigger={trigger}\n                            type=\"email\"\n                            placeholder=\"bradley@example.com\"\n                            autoComplete=\"email\"\n                            name=\"email\"\n                            control={control}\n                            rules={{\n                                required: \"E-mail address is required!\",\n                                validate: validateEmail,\n                            }}\n                        />\n                        <p className=\"my-2 text-sm\">\n                            {t(\n                                \"client:register.email.description\",\n                                \"You'll use this to login! We will never email you without your permission.\"\n                            )}\n                        </p>\n                    </label>\n                    <p className=\"text-red\" role=\"alert\">\n                        {errors.email ? errors.email.message : null}\n                    </p>\n                </div>\n                <div className=\"flex flex-col gap-2\">\n                    <p className=\"text-lg\">\n                        {t(\"client:register.password.label\")}\n                    </p>\n\n                    <AuthnInput\n                        trigger={trigger}\n                        type=\"password\"\n                        autoComplete=\"new-password\"\n                        placeholder=\"hunter2\"\n                        name=\"password\"\n                        control={control}\n                        rules={{\n                            required: t(\n                                \"client:register.password.required\",\n                                \"Password is required!\"\n                            ).toString(),\n                            minLength: {\n                                value: 8,\n                                message: t(\n                                    \"client:register.password.min-length\",\n                                    \"Password must be at least 8 characters!\"\n                                ).toString(),\n                            },\n                        }}\n                        aria-label=\"password\"\n                    />\n\n                    <p className=\"text-red\" role=\"alert\">\n                        {errors.password ? errors.password.message : null}\n                    </p>\n\n                    <AuthnInput\n                        trigger={trigger}\n                        type=\"password\"\n                        placeholder=\"hunter2\"\n                        autoComplete=\"new-password\"\n                        control={control}\n                        name=\"passwordConfirm\"\n                        rules={{\n                            validate: (value) =>\n                                value === getValues().password ||\n                                t(\n                                    \"client:register.password.confirm-password-mismatch\",\n                                    \"Passwords must match!\"\n                                ).toString(),\n                        }}\n                        aria-label=\"confirm password\"\n                    />\n\n                    <p className=\"text-sm\">\n                        {t(\n                            \"client:register.password.description\",\n                            \"Your password must be at least 8 characters. Other than that, go wild.\"\n                        )}\n                    </p>\n                    <p className=\"text-sm\">\n                        <Trans i18nKey=\"client:register.password.password-manager\">\n                            Please consider{\" \"}\n                            <a\n                                rel=\"noopener noreferrer\"\n                                target=\"_blank\"\n                                className=\"font-bold text-mango hover:underline\"\n                                href=\"https://www.consumerreports.org/digital-security/everything-you-need-to-know-about-password-managers-a5624939418/\"\n                            >\n                                using a password manager\n                            </a>{\" \"}\n                            to generate a secure password.\n                        </Trans>\n                    </p>\n\n                    <p className=\"text-red\" role=\"alert\">\n                        {errors.passwordConfirm\n                            ? errors.passwordConfirm.message\n                            : null}\n                    </p>\n                </div>\n                {watch.inviteCode ? (\n                    <div className=\"flex flex-col gap-2\">\n                        <label htmlFor=\"inviteCode\" className=\"text-lg\">\n                            {t(\n                                \"client:register.invite-code.label\",\n                                \"invite code\"\n                            )}\n                        </label>\n                        <AuthnInput\n                            trigger={trigger}\n                            type=\"text\"\n                            name=\"inviteCode\"\n                            readOnly\n                            control={control}\n                        />\n                        <Trans i18nKey=\"client:register.invite-code.description\">\n                            <p className=\"text-sm\">\n                                You're signing up with an invite code! You'll be\n                                able to post immediately!\n                            </p>\n                        </Trans>\n                    </div>\n                ) : null}\n                <label className=\"flex flex-col gap-2\">\n                    <p className=\"text-lg\">\n                        {t(\"client:register.birthdate.label\", \"date of birth\")}\n                    </p>\n                    <AuthnInput\n                        trigger={trigger}\n                        type=\"date\"\n                        autoComplete=\"bday\"\n                        max={SIXTEEN_YEARS_AGO.toISODate()}\n                        name=\"birthdate\"\n                        rules={{\n                            required: \"Birthdate is required!\",\n                            max: SIXTEEN_YEARS_AGO.toISODate(),\n                        }}\n                        control={control}\n                    />\n                    <p className=\"text-sm\">\n                        {t(\n                            \"client:register.birthdate.description\",\n                            \"You must be 16 or older to use cohost.\"\n                        )}\n                    </p>\n                    {selectedBirthdate && selectedBirthdateUnder18 ? (\n                        <p className=\"text-sm\">\n                            {t(\n                                \"client:register.birthdate.under-18\",\n                                \"If you're under 18, your legal guardian must also agree to the terms of service.\"\n                            )}\n                        </p>\n                    ) : null}\n                    <p className=\"text-red\" role=\"alert\">\n                        {errors.birthdate ? errors.birthdate.message : null}\n                    </p>\n                </label>\n                <div className=\"flex flex-col gap-2\">\n                    <HCaptcha\n                        sitekey={HCAPTCHA_SITE_KEY}\n                        onVerify={(token) => {\n                            setValue(\"hCaptchaToken\", token);\n                            void trigger(\"hCaptchaToken\");\n                        }}\n                        onExpire={() => {\n                            setValue(\"hCaptchaToken\", \"\");\n                            void trigger(\"hCaptchaToken\");\n                        }}\n                        ref={captchaRef}\n                        theme=\"dark\"\n                    />\n                    <p className=\"text-red\">\n                        {errors.hCaptchaToken\n                            ? errors.hCaptchaToken.message\n                            : null}\n                    </p>\n                </div>\n                <div className=\"flex flex-col gap-2\">\n                    <p className=\"text-sm\">\n                        I accept the{\" \"}\n                        <a\n                            href={sitemap.public\n                                .staticContent({ slug: \"tos\" })\n                                .toString()}\n                            className=\"font-bold text-mango-500 hover:underline\"\n                        >\n                            Terms of Use\n                        </a>{\" \"}\n                        and{\" \"}\n                        <a\n                            href={sitemap.public\n                                .staticContent({ slug: \"privacy\" })\n                                .toString()}\n                            className=\"font-bold text-mango-500 hover:underline\"\n                        >\n                            Privacy Notice\n                        </a>\n                        , and agree to abide by the{\" \"}\n                        <a\n                            href={sitemap.public\n                                .staticContent({ slug: \"community-guidelines\" })\n                                .toString()}\n                            className=\"font-bold text-mango-500 hover:underline\"\n                        >\n                            Community Guidelines\n                        </a>\n                        .\n                    </p>\n                    <AuthnButton type=\"submit\" disabled={submitting}>\n                        {t(\"common:sign-up\")}\n                    </AuthnButton>\n                </div>\n            </form>\n        </NoSSR>\n    );\n};\n","import sitemap from \"@/shared/sitemap\";\nimport { FeatureFlag } from \"@/shared/types/feature-flags\";\nimport { ProjectHandle } from \"@/shared/types/ids\";\nimport { ChevronDoubleLeftIcon } from \"@heroicons/react/24/outline\";\nimport { useFlag } from \"@unleash/proxy-client-react\";\nimport React, { FunctionComponent } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Trans } from \"react-i18next\";\nimport { CohostLogo } from \"../icons/cohost-logo\";\nimport { RegisterForm } from \"../register-form\";\n\ntype SignupPageProps = {\n    inviteCode?: string;\n};\n\nexport const Signup: FunctionComponent<SignupPageProps> = ({ inviteCode }) => {\n    const registrationDisabled = useFlag(\n        FeatureFlag.enum[\"disable-account-signup\"]\n    );\n    return (\n        <>\n            <Helmet title=\"sign up\" />\n            <CohostLogo className=\"-ml-6 text-notWhite lg:-ml-12\" />\n            {registrationDisabled ? (\n                <Trans\n                    parent=\"p\"\n                    className=\"prose text-notWhite\"\n                    i18nKey=\"client:register.disabled\"\n                >\n                    cohost will be entering read-only mode on October 1st and\n                    will be shutting down at the end of 2024. we have disabled\n                    sign-ups. please check{\" \"}\n                    <a\n                        href={sitemap.public.project\n                            .mainAppProfile({\n                                projectHandle: \"staff\" as ProjectHandle,\n                            })\n                            .toString()}\n                    >\n                        @staff\n                    </a>{\" \"}\n                    for more information.\n                </Trans>\n            ) : (\n                <RegisterForm inviteCode={inviteCode} />\n            )}\n            <a\n                href={sitemap.public.welcome().toString()}\n                className=\"flex items-center gap-1 text-mango hover:underline\"\n            >\n                <ChevronDoubleLeftIcon className=\"h-6 w-6\" />\n                Back\n            </a>\n        </>\n    );\n};\n\nSignup.displayName = \"signup\";\nexport default Signup;\n","import React from \"react\";\nimport {\n    FieldValues,\n    UseControllerProps,\n    UseFormTrigger,\n} from \"react-hook-form\";\nimport { StyledInput } from \"../elements/styled-input\";\n\nexport type AuthnInputProps<T extends FieldValues> = UseControllerProps<T> & {\n    trigger: UseFormTrigger<T>;\n} & Pick<\n        React.InputHTMLAttributes<HTMLInputElement>,\n        \"type\" | \"autoComplete\" | \"placeholder\" | \"max\" | \"readOnly\"\n    >;\n\n/** @deprecated */\nexport const AuthnInput = <T extends FieldValues>({\n    ...props\n}: AuthnInputProps<T>) => <StyledInput style=\"dark\" {...props} />;\n"],"names":["AuthHelpers","static","email","url","URL","document","searchParams","append","fetch","toString","then","resp","json","data","salt","password","hashWorker","Worker","Promise","resolve","onmessage","e","clientHash","postMessage","StyledInput","style","showValidity","name","control","rules","trigger","props","field","fieldState","useController","fieldName","onChange","directRef","setDirectRef","useState","useEffect","ref","inputStyleClasses","contentDivStyleClasses","validityIconStyleClasses","useMemo","value","defaultValue","isTouched","shouldFocus","React","className","_extends","classNames","readOnly","invalid","XMarkIcon","CheckIcon","chance","Chance","SIXTEEN_YEARS_AGO","DateTime","minus","years","RegisterForm","inviteCode","t","useTranslation","isServer","useSSR","randomHandle","generate","alliterative","d10","words","integer","min","max","dashed","submitting","setSubmitting","setValidatingEmail","HCAPTCHA_SITE_KEY","useSiteConfig","captchaRef","useRef","register","handleSubmit","getValues","setValue","formState","errors","useForm","mode","defaultValues","checkHandle","trpc","required","watch","useWatch","selectedBirthdate","birthdate","selectedBirthdateUnder18","Math","abs","toISODate","diffNow","NoSSR","fallback","onSubmit","async","current","execute","params","URLSearchParams","handle","hCaptchaToken","set","axios","sitemap","status","location","replace","AuthnInput","placeholder","type","validate","mutateAsync","valid","reason","role","message","autoComplete","responseType","minLength","Trans","i18nKey","rel","target","href","passwordConfirm","htmlFor","HCaptcha","sitekey","onVerify","token","onExpire","theme","slug","AuthnButton","disabled","Signup","registrationDisabled","useFlag","FeatureFlag","Helmet","title","CohostLogo","parent","projectHandle","ChevronDoubleLeftIcon","displayName"],"sourceRoot":""}