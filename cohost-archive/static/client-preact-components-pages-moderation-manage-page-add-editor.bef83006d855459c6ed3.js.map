{"version":3,"file":"client-preact-components-pages-moderation-manage-page-add-editor.bef83006d855459c6ed3.js","mappings":"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","sources":["webpack:///./preact/components/elements/button.tsx","webpack:///./preact/components/pages/moderation/manage-page.add-editor.tsx"],"sourcesContent":["import classnames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { z } from \"zod\";\n\nexport const ButtonStyle = z.enum([\"pill\", \"roundrect\", \"authn\"]);\nexport type ButtonStyle = z.infer<typeof ButtonStyle>;\n\nexport const ButtonColor = z.enum([\n    \"cherry\",\n    \"strawberry\",\n    \"mango\",\n    \"not-black\",\n    \"red\",\n    \"green\",\n    \"accent\",\n    \"secondary\",\n    \"authn-primary\",\n    \"authn-other\",\n]);\nexport type ButtonColor = z.infer<typeof ButtonColor>;\n\nexport const SharedProps = z.object({\n    buttonStyle: ButtonStyle,\n    color: ButtonColor,\n    className: z.string().optional(),\n});\nexport type SharedProps = z.infer<typeof SharedProps>;\n\nconst baseColors = classnames(\"bg-notWhite\", \"hover:text-notWhite\");\n\n// WHY NOT HAVE THESE AS INTERPOLATED CLASS NAMES?\n// tailwind jit doesn't handle interpolated class names!\n// you have to have the full class name written for it to pick up on a string as\n// a class name! so we do this\nconst pillClasses = classnames(\n    \"font-atkinson\",\n    \"font-bold\",\n    \"rounded-full\",\n    \"border-2\"\n);\n\nconst roundrectClasses = classnames(\"body-2\", \"rounded-lg\");\n\nconst authnStyleClasses = classnames(\n    \"flex\",\n    \"h-12\",\n    \"items-center\",\n    \"justify-center\",\n    \"rounded-lg\",\n    \"px-6\",\n    \"text-lg\"\n);\n\nconst cherryClasses = classnames(\n    \"border-cherry\",\n    \"hover:bg-cherry\",\n    \"text-cherry\",\n    \"active:bg-cherry-600\",\n    \"active:border-cherry-600\",\n    \"disabled:text-cherry-300\",\n    \"disabled:border-cherry-300\",\n    \"focus:outline-cherry\",\n    \"focus:ring-cherry\",\n    baseColors\n);\nconst strawberryClasses = classnames(\n    \"border-strawberry\",\n    \"hover:bg-strawberry\",\n    \"text-strawberry\",\n    \"active:bg-strawberry-600\",\n    \"active:border-strawberry-600\",\n    \"disabled:text-strawberry-300\",\n    \"disabled:border-strawberry-300\",\n    \"focus:outline-strawberry\",\n    \"focus:ring-strawberry\",\n    baseColors\n);\n\nconst redClasses = classnames(\n    \"border-red\",\n    \"hover:bg-red\",\n    \"text-red\",\n    \"active:bg-red-600\",\n    \"active:border-red-600\",\n    \"disabled:text-red-300\",\n    \"disabled:border-red-300\",\n    \"focus:outline-red\",\n    baseColors\n);\n\nconst greenClasses = classnames(\n    \"border-green\",\n    \"hover:bg-green\",\n    \"text-green\",\n    \"active:bg-green-600\",\n    \"active:border-green-600\",\n    \"disabled:text-green-300\",\n    \"disabled:border-green-300\",\n    \"focus:outline-green\",\n    baseColors\n);\nconst mangoClasses = classnames(\n    \"border-mango\",\n    \"hover:bg-mango\",\n    \"text-mango\",\n    \"bg-notBlack\",\n    \"hover:text-notBlack\"\n);\nconst notBlackClasses = classnames(\n    \"border-notBlack\",\n    \"hover:bg-notBlack\",\n    \"text-notBlack\",\n    \"focus:outline-notBlack\",\n    \"focus:ring-notBlack\",\n    baseColors\n);\n\nconst accentClasses = classnames(\n    \"border-accent\",\n    \"text-accent\",\n    \"bg-foreground\",\n    \"hover:bg-accent\",\n    \"hover:text-text\"\n);\n\nconst secondaryClasses = classnames(\n    \"bg-secondary\",\n    \"text-notWhite\",\n    \"dark:text-notBlack\",\n    \"hover:bg-secondary-600\"\n);\n\nconst authnPrimaryColorClasses = classnames(\n    \"bg-foreground\",\n    \"text-text\",\n    \"hover:bg-foreground-600\",\n    \"active:bg-foreground-700\",\n    \"disabled:bg-foreground-200\"\n);\n\nconst authnOtherColorClasses = classnames(\n    \"border-2\",\n    \"border-foreground\",\n    \"text-foreground\",\n    \"hover:bg-longan-200\"\n);\n\nconst sharedClasses = (props: SharedProps) =>\n    classnames(\n        \"leading-none\",\n        \"align-middle\",\n        \"py-2\",\n        \"px-4\",\n        \"no-select\",\n        props.className,\n        {\n            [pillClasses]: props.buttonStyle === \"pill\",\n            [roundrectClasses]: props.buttonStyle === \"roundrect\",\n            [authnStyleClasses]: props.buttonStyle === \"authn\",\n            [cherryClasses]: props.color === \"cherry\",\n            [strawberryClasses]: props.color === \"strawberry\",\n            [mangoClasses]: props.color === \"mango\",\n            [notBlackClasses]: props.color === \"not-black\",\n            [redClasses]: props.color === \"red\",\n            [accentClasses]: props.color === \"accent\",\n            [greenClasses]: props.color === \"green\",\n            [secondaryClasses]: props.color === \"secondary\",\n            [authnPrimaryColorClasses]: props.color === \"authn-primary\",\n            [authnOtherColorClasses]: props.color === \"authn-other\",\n        }\n    );\n\nexport const Button: FunctionComponent<\n    SharedProps &\n        React.ButtonHTMLAttributes<HTMLButtonElement> & {\n            ref?: React.Ref<HTMLButtonElement>;\n        }\n> = React.forwardRef(({ buttonStyle, color, className, ...props }, ref) => {\n    const classes = sharedClasses({\n        buttonStyle,\n        color,\n        className,\n        ...props,\n    });\n    return (\n        <button {...props} className={classes} ref={ref}>\n            {props.children}\n        </button>\n    );\n});\nButton.displayName = \"Button\";\n\nexport const LinkButton: FunctionComponent<\n    SharedProps &\n        React.AnchorHTMLAttributes<HTMLAnchorElement> & {\n            ref?: React.Ref<HTMLAnchorElement>;\n        }\n> = React.forwardRef(({ buttonStyle, color, ...props }, ref) => {\n    const classes = sharedClasses({ buttonStyle, color, ...props });\n    return (\n        <a {...props} className={classes} ref={ref}>\n            {props.children}\n        </a>\n    );\n});\nLinkButton.displayName = \"LinkButton\";\n","import { useEmailSearch } from \"@/client/preact/hooks/search\";\nimport { GetUserListResp } from \"@/shared/api-types/users-v1\";\nimport { WireUserModel } from \"@/shared/types/wire-models\";\nimport React, { FunctionComponent, useCallback, useState } from \"react\";\nimport Autosuggest, {\n    ChangeEvent,\n    OnSuggestionsClearRequested,\n    OnSuggestionSelected,\n    RenderSuggestion,\n    SuggestionsFetchRequested,\n} from \"react-autosuggest\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { Button } from \"@/client/preact/components/elements/button\";\n\nconst renderSuggestion: RenderSuggestion<GetUserListResp[\"users\"][0]> = (\n    suggestion,\n    { isHighlighted }\n) => (\n    <div key={`autocomplete-user-${suggestion.userId}`}>\n        {suggestion.email} (user id {suggestion.userId})\n    </div>\n);\n\nexport type EditorOperationInputs = {\n    action: \"create\" | \"delete\";\n    userId: number;\n    email?: string;\n    reason?: string;\n};\n\ntype AddEditorProps = {\n    onSubmit: SubmitHandler<EditorOperationInputs>;\n};\n\nexport const AddEditor: FunctionComponent<AddEditorProps> = ({ onSubmit }) => {\n    const { register, handleSubmit, setValue } =\n        useForm<EditorOperationInputs>();\n\n    const [selectedEditorToAdd, setSelectedEditorToAdd] = useState<\n        WireUserModel | undefined\n    >(undefined);\n    const [emailSearchToken, setEmailSearchToken] = useState<string>(\"\");\n    const { users: emailSearchUsers, invalidate: emailSearchInvalidate } =\n        useEmailSearch(emailSearchToken);\n\n    const onEmailSearchChange = useCallback(\n        (event: React.FormEvent<HTMLElement>, { newValue }: ChangeEvent) => {\n            setEmailSearchToken(newValue);\n        },\n        [setEmailSearchToken]\n    );\n\n    const onAddEditorDeselect = () => {\n        void setSelectedEditorToAdd(undefined);\n        setValue(\"userId\", -1);\n    };\n\n    const onSuggestionsFetchRequested = useCallback<SuggestionsFetchRequested>(\n        ({ value }) => {\n            void emailSearchInvalidate(value);\n        },\n        [emailSearchInvalidate]\n    );\n\n    const onSuggestionsClearRequested =\n        useCallback<OnSuggestionsClearRequested>(() => {\n            void emailSearchInvalidate(\"\");\n        }, [emailSearchInvalidate]);\n\n    const onSuggestionSelected = useCallback<\n        OnSuggestionSelected<WireUserModel>\n    >(\n        (_event, { suggestion }) => {\n            void setSelectedEditorToAdd(suggestion);\n            setValue(\"userId\", suggestion.userId);\n        },\n        [setSelectedEditorToAdd, setValue]\n    );\n\n    return (\n        <>\n            <form\n                className=\"flex max-w-fit flex-col gap-2 rounded-lg border border-accent p-3\"\n                onSubmit={handleSubmit(onSubmit)}\n            >\n                <h4 className=\"h4\">add editors</h4>\n\n                <input type=\"hidden\" value=\"create\" {...register(\"action\")} />\n\n                <p />\n\n                {selectedEditorToAdd ? (\n                    <>\n                        selected user:\n                        {`${selectedEditorToAdd.email} (user id ${selectedEditorToAdd.userId})`}\n                        <Button\n                            buttonStyle=\"pill\"\n                            color=\"cherry\"\n                            className=\"w-1/4\"\n                            onClick={onAddEditorDeselect}\n                        >\n                            deselect\n                        </Button>\n                    </>\n                ) : (\n                    <>\n                        search for the e-mail of an editor to add:\n                        <Autosuggest\n                            suggestions={emailSearchUsers ?? []}\n                            getSuggestionValue={(suggestion) =>\n                                suggestion.email\n                            }\n                            inputProps={{\n                                onChange: onEmailSearchChange,\n                                value: emailSearchToken,\n                            }}\n                            onSuggestionsFetchRequested={\n                                onSuggestionsFetchRequested\n                            }\n                            onSuggestionsClearRequested={\n                                onSuggestionsClearRequested\n                            }\n                            onSuggestionSelected={onSuggestionSelected}\n                            renderSuggestion={renderSuggestion}\n                            alwaysRenderSuggestions={true}\n                        />\n                    </>\n                )}\n\n                <p>\n                    reason for adding editor:\n                    <textarea {...register(\"reason\", { required: true })} />\n                </p>\n\n                <Button\n                    type=\"submit\"\n                    buttonStyle=\"pill\"\n                    color=\"cherry\"\n                    className=\"w-fit\"\n                >\n                    add editor\n                </Button>\n            </form>\n        </>\n    );\n};\n"],"names":["ButtonStyle","z","ButtonColor","baseColors","buttonStyle","color","className","optional","classnames","pillClasses","roundrectClasses","authnStyleClasses","cherryClasses","strawberryClasses","redClasses","greenClasses","mangoClasses","notBlackClasses","accentClasses","secondaryClasses","authnPrimaryColorClasses","authnOtherColorClasses","sharedClasses","props","Button","React","ref","classes","_extends","children","displayName","LinkButton","renderSuggestion","suggestion","isHighlighted","key","userId","email","AddEditor","onSubmit","register","handleSubmit","setValue","useForm","selectedEditorToAdd","setSelectedEditorToAdd","useState","undefined","emailSearchToken","setEmailSearchToken","users","emailSearchUsers","invalidate","emailSearchInvalidate","useEmailSearch","onEmailSearchChange","useCallback","event","newValue","onSuggestionsFetchRequested","value","onSuggestionsClearRequested","onSuggestionSelected","_event","type","onClick","onAddEditorDeselect","Autosuggest","suggestions","getSuggestionValue","inputProps","onChange","alwaysRenderSuggestions","required"],"sourceRoot":""}