{"version":3,"file":"client-preact-components-pages-login.9d97399d6289e779d11f.js","mappings":"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","sources":["webpack:///../node_modules/.pnpm/@mpth+react-no-ssr@1.0.1_react@18.0.0/node_modules/@mpth/react-no-ssr/dist/index.js","webpack:///./lib/auth-helpers.ts","webpack:///./preact/components/elements/styled-input.tsx","webpack:///./preact/components/login-form.tsx","webpack:///./preact/components/pages/login.tsx","webpack:///./preact/components/partials/authn-input.tsx","webpack:///../node_modules/.pnpm/@heroicons+react@2.0.13_react@18.0.0/node_modules/@heroicons/react/24/outline/esm/ChevronDoubleLeftIcon.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\nvar NoSSR = function (_a) {\n    var children = _a.children, _b = _a.fallback, fallback = _b === void 0 ? null : _b;\n    var _c = React.useState(false), mounted = _c[0], setMounted = _c[1];\n    React.useEffect(function () { return setMounted(true); }, []);\n    if (!mounted) {\n        return fallback;\n    }\n    return children;\n};\nexports.default = NoSSR;\n","import * as LoginV1Types from \"@/shared/api-types/login-v1\";\n\nexport default class AuthHelpers {\n    static async getSalt(email: string): Promise<string> {\n        const url = new URL(\"/api/v1/login/salt\", document.URL);\n        url.searchParams.append(\"email\", email);\n\n        const response = await fetch(url.toString()).then((resp) =>\n            resp.json().then((data) => data as LoginV1Types.GetSaltResp)\n        );\n\n        return response.salt;\n    }\n\n    static async hashPasswordInWorker(\n        email: string,\n        salt: string,\n        password: string\n    ): Promise<string> {\n        // run this slow hash function in the background\n        // const hashWorker = new Worker(\"/static/hash-worker.js\");\n        const hashWorker = new Worker(\n            new URL(\"./hash-worker.ts\", import.meta.url)\n        );\n\n        return new Promise((resolve) => {\n            hashWorker.onmessage = (\n                e: MessageEvent<{\n                    clientHash: string;\n                }>\n            ): void => {\n                resolve(e.data.clientHash);\n            };\n\n            hashWorker.postMessage({ email, password, salt });\n        });\n    }\n}\n","import { CheckIcon, XMarkIcon } from \"@heroicons/react/24/outline\";\nimport classNames from \"classnames\";\nimport React, {\n    InputHTMLAttributes,\n    useEffect,\n    useMemo,\n    useState,\n} from \"react\";\nimport {\n    FieldValues,\n    useController,\n    UseControllerProps,\n    UseFormTrigger,\n} from \"react-hook-form\";\n\ntype InputStyle = \"light\" | \"dark\" | \"dynamic\";\n\ntype StyledInputProps<T extends FieldValues> = {\n    style?: InputStyle;\n    showValidity?: boolean;\n} & UseControllerProps<T> & { trigger: UseFormTrigger<T> } & Pick<\n        InputHTMLAttributes<HTMLInputElement>,\n        | \"type\"\n        | \"autoComplete\"\n        | \"placeholder\"\n        | \"max\"\n        | \"min\"\n        | \"step\"\n        | \"readOnly\"\n        | \"disabled\"\n    >;\n\nexport const StyledInput = <T extends FieldValues>({\n    style = \"light\",\n    showValidity = true,\n    name,\n    control,\n    rules,\n    trigger,\n    ...props\n}: StyledInputProps<T>) => {\n    const { field, fieldState } = useController<T>({\n        name,\n        control,\n        rules,\n    });\n    const { name: fieldName, onChange } = field;\n\n    // setup our own ref so we can track field value\n    const [directRef, setDirectRef] = useState<HTMLInputElement | null>();\n    useEffect(() => {\n        field.ref(directRef);\n    }, [directRef, field]);\n\n    const {\n        inputStyleClasses,\n        contentDivStyleClasses,\n        validityIconStyleClasses,\n    } = useMemo(() => {\n        switch (style) {\n            case \"light\":\n                return {\n                    inputStyleClasses: `border-gray-600 text-notBlack\n                        placeholder:text-gray-600\n                        focus:border-notBlack disabled:border-gray-300`,\n                    contentDivStyleClasses: `to-notWhite`,\n                    validityIconStyleClasses: `bg-notWhite`,\n                };\n            case \"dynamic\":\n                return {\n                    inputStyleClasses: \"co-styled-input\",\n                    contentDivStyleClasses: \"co-styled-input-content\",\n                    validityIconStyleClasses: \"co-styled-input-validity-icon\",\n                };\n            case \"dark\":\n            default:\n                return {\n                    inputStyleClasses: `border-gray-400 text-notWhite \n                        placeholder:text-gray-400\n                        focus:border-notWhite read-only:bg-gray-700`,\n                    contentDivStyleClasses: `to-notBlack`,\n                    validityIconStyleClasses: `bg-notBlack`,\n                };\n        }\n    }, [style]);\n\n    // manually validate when we don't get an input event\n    // can happen on browser autofill\n    useEffect(() => {\n        if (\n            directRef &&\n            directRef.value &&\n            directRef.value !== props.defaultValue &&\n            directRef.value !== field.value &&\n            !fieldState.isTouched\n        ) {\n            onChange(directRef.value);\n            void trigger(fieldName, { shouldFocus: true });\n        }\n    }, [\n        directRef,\n        field.value,\n        fieldName,\n        fieldState.isTouched,\n        onChange,\n        props.defaultValue,\n        trigger,\n    ]);\n    return (\n        <div className=\"relative\">\n            <input\n                className={classNames(\n                    `\n                        w-full min-w-[15rem] rounded-lg border-2 bg-transparent\n                    `,\n                    inputStyleClasses\n                )}\n                {...props}\n                {...field}\n                ref={setDirectRef}\n            />\n            {showValidity && !props.readOnly && fieldState.isTouched ? (\n                <>\n                    <div\n                        className={classNames(\n                            `\n                                absolute bottom-0 right-9 top-0 my-auto h-6 w-3 \n                                bg-gradient-to-r from-transparent\n                            `,\n                            contentDivStyleClasses\n                        )}\n                    />\n                    {fieldState.invalid ? (\n                        <XMarkIcon\n                            className={classNames(\n                                `\n                                    absolute bottom-0 right-3 top-0 my-auto h-6 \n                                    w-6 text-red\n                                `,\n                                validityIconStyleClasses\n                            )}\n                        />\n                    ) : (\n                        <CheckIcon\n                            className={classNames(\n                                `\n                                    absolute bottom-0 right-3 top-0 my-auto h-6\n                                    w-6 bg-notWhite text-green\n                                `,\n                                validityIconStyleClasses\n                            )}\n                        />\n                    )}\n                </>\n            ) : null}\n        </div>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport { getVanillaClient } from \"@/client/lib/trpc-vanilla\";\nimport { sitemap } from \"@/shared/sitemap\";\nimport { QuestionMarkCircleIcon } from \"@heroicons/react/24/outline\";\nimport NoSSR from \"@mpth/react-no-ssr\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { SubmitHandler, useForm, Validate } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { z } from \"zod\";\nimport AuthHelpers from \"../../lib/auth-helpers\";\nimport { type LoginFormProps } from \"./pages/login\";\nimport { AuthnButton } from \"./partials/authn-button\";\nimport { AuthnInput } from \"./partials/authn-input\";\n\ntype Inputs = {\n    email: string;\n    password: string;\n};\n\nexport const LoginForm: FunctionComponent<LoginFormProps> = ({\n    redirectTo = \"/\",\n}) => {\n    const { t } = useTranslation();\n    const [submitting, setSubmitting] = useState(false);\n    const [formError, setFormError] = useState(\"\");\n    const {\n        handleSubmit,\n        control,\n        formState: { errors },\n        trigger,\n    } = useForm<Inputs>({\n        mode: \"onTouched\",\n    });\n    const vanillaClient = getVanillaClient();\n    const login = trpc.login.login.useMutation({\n        onError: () => {\n            setFormError(\"Couldn't login! Check your e-mail and password.\");\n            setSubmitting(false);\n        },\n    });\n\n    const onSubmit: SubmitHandler<Inputs> = async ({ email, password }) => {\n        setSubmitting(true);\n        setFormError(\"\");\n\n        const saltResult = await vanillaClient.login.getSalt.query({ email });\n        const clientHash = await AuthHelpers.hashPasswordInWorker(\n            email,\n            saltResult.salt,\n            password\n        );\n\n        const loginResult = await login.mutateAsync({ email, clientHash });\n\n        switch (loginResult.state) {\n            case \"need-otp\":\n                location.reload();\n                break;\n            case \"done\":\n                location.replace(redirectTo);\n                break;\n        }\n    };\n\n    const validateEmail: Validate<string> = (email: string) => {\n        return z.string().email().safeParse(email).success;\n    };\n\n    return (\n        <NoSSR\n            fallback={\n                <div className=\"prose prose-invert text-notWhite\">\n                    <p>Loading...</p>\n                    <p>If you keep seeing this, try refreshing!</p>\n                </div>\n            }\n        >\n            <form\n                className=\"flex flex-col gap-4\"\n                id=\"login-form\"\n                onSubmit={handleSubmit(onSubmit)}\n            >\n                <h1 className=\"text-xl capitalize\">{t(\"common:login\")}</h1>\n                {formError ? (\n                    <div className=\"max-w-prose rounded-lg border-red-500 bg-red-300 p-3 text-notBlack\">\n                        {formError}\n                    </div>\n                ) : null}\n                <div className=\"flex flex-col gap-2\">\n                    <label>\n                        <div className=\"my-2 text-lg\">\n                            {t(\"client:register.email.label\")}\n                        </div>\n\n                        <AuthnInput\n                            trigger={trigger}\n                            type=\"email\"\n                            autoComplete=\"email\"\n                            name=\"email\"\n                            data-testid=\"email\"\n                            rules={{\n                                required: t(\n                                    \"client:register.email.required\",\n                                    \"E-mail can't be empty!\"\n                                ).toString(),\n                                validate: validateEmail,\n                            }}\n                            control={control}\n                        />\n                    </label>\n                    <p className=\"text-red\" role=\"alert\">\n                        {errors.email ? errors.email.message : null}\n                    </p>\n                </div>\n                <div className=\"flex flex-col gap-2\">\n                    <label>\n                        <div className=\"my-2 text-lg\">\n                            {t(\"common:password\")}\n                        </div>\n\n                        <AuthnInput\n                            trigger={trigger}\n                            type=\"password\"\n                            autoComplete=\"current-password\"\n                            name=\"password\"\n                            data-testid=\"password\"\n                            rules={{\n                                required: t(\n                                    \"client:register.password.required\"\n                                ).toString(),\n                                minLength: {\n                                    value: 8,\n                                    message: t(\n                                        \"client:register.password.min-length\"\n                                    ).toString(),\n                                },\n                            }}\n                            control={control}\n                        />\n                    </label>\n                    <p className=\"text-red\" role=\"alert\">\n                        {errors.password ? errors.password.message : null}\n                    </p>\n                </div>\n                <AuthnButton type=\"submit\" disabled={submitting}>\n                    {t(\"common:login\")}\n                </AuthnButton>\n            </form>\n            <a\n                href={sitemap.public.resetPassword({}).toString()}\n                className=\"flex items-center gap-1 capitalize text-mango hover:underline\"\n            >\n                <QuestionMarkCircleIcon className=\"h-6 w-6\" />\n                forgot your password?\n            </a>\n        </NoSSR>\n    );\n};\n\nexport default LoginForm;\n","import sitemap from \"@/shared/sitemap\";\nimport { ChevronDoubleLeftIcon } from \"@heroicons/react/24/outline\";\nimport React, { FunctionComponent } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useTranslation } from \"react-i18next\";\nimport { CohostLogo } from \"../icons/cohost-logo\";\nimport LoginForm from \"../login-form\";\n\ntype LoginPageProps = {\n    redirectTo?: string;\n};\n\nexport type LoginFormProps = {\n    redirectTo?: string;\n};\n\nexport const Login: FunctionComponent<LoginPageProps> = ({ redirectTo }) => {\n    const { t } = useTranslation();\n\n    return (\n        <>\n            <Helmet title=\"login\" />\n            <CohostLogo className=\"-ml-6 text-notWhite lg:-ml-12\" />\n            <LoginForm redirectTo={redirectTo} />\n            <a\n                href={sitemap.public.welcome().toString()}\n                className=\"flex items-center gap-1 capitalize text-mango hover:underline\"\n            >\n                <ChevronDoubleLeftIcon className=\"h-6 w-6\" />\n                {t(\"common:back-button\")}\n            </a>\n        </>\n    );\n};\n\nLogin.displayName = \"login\";\nexport default Login;\n","import React from \"react\";\nimport {\n    FieldValues,\n    UseControllerProps,\n    UseFormTrigger,\n} from \"react-hook-form\";\nimport { StyledInput } from \"../elements/styled-input\";\n\nexport type AuthnInputProps<T extends FieldValues> = UseControllerProps<T> & {\n    trigger: UseFormTrigger<T>;\n} & Pick<\n        React.InputHTMLAttributes<HTMLInputElement>,\n        \"type\" | \"autoComplete\" | \"placeholder\" | \"max\" | \"readOnly\"\n    >;\n\n/** @deprecated */\nexport const AuthnInput = <T extends FieldValues>({\n    ...props\n}: AuthnInputProps<T>) => <StyledInput style=\"dark\" {...props} />;\n","import * as React from \"react\";\n\nfunction ChevronDoubleLeftIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M18.75 19.5l-7.5-7.5 7.5-7.5m-6 15L5.25 12l7.5-7.5\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ChevronDoubleLeftIcon);\nexport default ForwardRef;"],"names":["React","exports","_a","children","_b","fallback","_c","useState","mounted","setMounted","useEffect","AuthHelpers","static","email","url","URL","document","searchParams","append","fetch","toString","then","resp","json","data","salt","password","hashWorker","Worker","Promise","resolve","onmessage","e","clientHash","postMessage","StyledInput","style","showValidity","name","control","rules","trigger","props","field","fieldState","useController","fieldName","onChange","directRef","setDirectRef","ref","inputStyleClasses","contentDivStyleClasses","validityIconStyleClasses","useMemo","value","defaultValue","isTouched","shouldFocus","className","_extends","classNames","readOnly","invalid","XMarkIcon","CheckIcon","LoginForm","redirectTo","t","useTranslation","submitting","setSubmitting","formError","setFormError","handleSubmit","formState","errors","useForm","mode","vanillaClient","getVanillaClient","login","trpc","onError","NoSSR","id","onSubmit","async","saltResult","getSalt","query","mutateAsync","state","location","reload","replace","AuthnInput","type","autoComplete","required","validate","z","safeParse","success","role","message","minLength","AuthnButton","disabled","href","sitemap","QuestionMarkCircleIcon","Login","Helmet","title","CohostLogo","ChevronDoubleLeftIcon","displayName","ForwardRef","titleId","svgRef","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d"],"sourceRoot":""}