{"version":3,"file":"client-preact-components-pages-notifications.8b4bbe846c8aa612a873.js","mappings":"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","sources":["webpack:///./preact/components/elements/responsive-formlet.tsx","webpack:///../shared/api-types/notifications-v1.ts","webpack:///../node_modules/.pnpm/@heroicons+react@2.0.13_react@18.0.0/node_modules/@heroicons/react/24/outline/esm/SpeakerWaveIcon.js","webpack:///../node_modules/.pnpm/@heroicons+react@2.0.13_react@18.0.0/node_modules/@heroicons/react/24/solid/esm/ChatBubbleOvalLeftEllipsisIcon.js","webpack:///../node_modules/.pnpm/@heroicons+react@2.0.13_react@18.0.0/node_modules/@heroicons/react/24/solid/esm/ExclamationCircleIcon.js","webpack:///./preact/components/partials/notifications/notification-card.tsx","webpack:///./preact/components/partials/notifications/notification-group.tsx","webpack:///./preact/components/partials/notifications/shared-lib.tsx","webpack:///./preact/components/pages/notifications.tsx","webpack:///../shared/types/wire-models.ts","webpack:///../node_modules/.pnpm/@heroicons+react@2.0.13_react@18.0.0/node_modules/@heroicons/react/20/solid/esm/ChevronRightIcon.js"],"sourcesContent":["import React, { FunctionComponent, PropsWithChildren } from \"react\";\nimport { useDynamicTheme } from \"../../hooks/dynamic-theme\";\nimport { Disclosure } from \"@headlessui/react\";\nimport { ChevronRightIcon } from \"@heroicons/react/20/solid\";\nimport { tw } from \"@/client/lib/tw-tagged-literal\";\n\ntype RightColumnFormletProps = PropsWithChildren<{\n    title: string;\n}>;\n\nexport const ResponsiveFormlet: FunctionComponent<RightColumnFormletProps> = ({\n    title,\n    children,\n}) => {\n    const postBoxTheme = useDynamicTheme();\n\n    return (\n        <>\n            {/* dynamically expanded alternative for mobile */}\n            <Disclosure\n                as=\"div\"\n                data-theme={postBoxTheme.current}\n                className={tw`\n                co-themed-box co-notification-group\n                co-filter-controls cohost-shadow-light\n                dark:cohost-shadow-dark col-span-1 flex\n                h-fit max-h-max min-h-0 flex-col rounded-lg lg:hidden\n            `}\n            >\n                <Disclosure.Button\n                    as=\"header\"\n                    className=\"flex flex-row items-center justify-between rounded-t-lg border-b p-3 ui-not-open:rounded-b-lg\"\n                >\n                    <ChevronRightIcon className=\"h-5 w-5 ui-open:rotate-90 motion-safe:transition-transform\" />\n                    <span className=\"font-league text-xs uppercase\">\n                        {title}\n                    </span>\n                </Disclosure.Button>\n                <Disclosure.Panel as=\"ul\" className=\"flex-col divide-y\">\n                    {children}\n                </Disclosure.Panel>\n            </Disclosure>\n\n            {/* statically expanded alternative for desktop */}\n            <div\n                data-theme={postBoxTheme.current}\n                className={tw`\n                co-themed-box co-notification-group\n                co-filter-controls cohost-shadow-light dark:cohost-shadow-dark col-span-1 \n                hidden h-fit max-h-max min-h-0 flex-col divide-y rounded-lg lg:flex\n            `}\n            >\n                <header className=\"flex flex-row items-center justify-end rounded-t-lg p-3\">\n                    <span className=\"font-league text-xs uppercase\">\n                        {title}\n                    </span>\n                </header>\n                <ul className=\"flex-col divide-y\">{children}</ul>\n            </div>\n        </>\n    );\n};\n","import { z } from \"zod\";\nimport { CommentId, PostId, ProjectId } from \"../types/ids\";\nimport {\n    WireNotification,\n    WireNotificationCommentViewModel,\n    WirePostViewModel,\n} from \"../types/wire-models\";\nimport { WireProjectModel } from \"../types/projects\";\n\nexport const CountResp = z.object({\n    count: z.number().int(),\n});\nexport type CountResp = z.infer<typeof CountResp>;\n\n// no zod for this one yet b/c not all the wire types have been converted\nexport type ListResp = {\n    projects: { [projectId: ProjectId]: WireProjectModel };\n    posts: { [postId: PostId]: WirePostViewModel };\n    comments: {\n        [commentId: CommentId]: WireNotificationCommentViewModel;\n    };\n    notifications: WireNotification[];\n    nextBefore: string;\n};\n\nexport const NotificationFilters = z.object({\n    includeShares: z.boolean().default(true),\n    includeReplies: z.boolean().default(true),\n    includeComments: z.boolean().default(true),\n    includeLikes: z.boolean().default(true),\n    includeFollows: z.boolean().default(true),\n});\n\nexport type NotificationFilters = z.infer<typeof NotificationFilters>;\n\nexport const NotificationsListRespReady = z.object({\n    ready: z.literal(true),\n    projects: z.record(z.string(), WireProjectModel),\n    posts: z.record(z.string(), WirePostViewModel),\n    comments: z.record(CommentId, WireNotificationCommentViewModel),\n    notifications: z.array(WireNotification),\n    nextCursor: z.string(),\n});\nexport type NotificationsListRespReady = z.infer<\n    typeof NotificationsListRespReady\n>;\n\nexport function isNotificationsListRespReady(\n    resp: NotificationsListRespReady | { ready: false }\n): resp is NotificationsListRespReady {\n    return resp.ready === true;\n}\n","import * as React from \"react\";\n\nfunction SpeakerWaveIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M19.114 5.636a9 9 0 010 12.728M16.463 8.288a5.25 5.25 0 010 7.424M6.75 8.25l4.72-4.72a.75.75 0 011.28.53v15.88a.75.75 0 01-1.28.53l-4.72-4.72H4.51c-.88 0-1.704-.507-1.938-1.354A9.01 9.01 0 012.25 12c0-.83.112-1.633.322-2.396C2.806 8.756 3.63 8.25 4.51 8.25H6.75z\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(SpeakerWaveIcon);\nexport default ForwardRef;","import * as React from \"react\";\n\nfunction ChatBubbleOvalLeftEllipsisIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4.804 21.644A6.707 6.707 0 006 21.75a6.721 6.721 0 003.583-1.029c.774.182 1.584.279 2.417.279 5.322 0 9.75-3.97 9.75-9 0-5.03-4.428-9-9.75-9s-9.75 3.97-9.75 9c0 2.409 1.025 4.587 2.674 6.192.232.226.277.428.254.543a3.73 3.73 0 01-.814 1.686.75.75 0 00.44 1.223zM8.25 10.875a1.125 1.125 0 100 2.25 1.125 1.125 0 000-2.25zM10.875 12a1.125 1.125 0 112.25 0 1.125 1.125 0 01-2.25 0zm4.875-1.125a1.125 1.125 0 100 2.25 1.125 1.125 0 000-2.25z\",\n    clipRule: \"evenodd\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ChatBubbleOvalLeftEllipsisIcon);\nexport default ForwardRef;","import * as React from \"react\";\n\nfunction ExclamationCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z\",\n    clipRule: \"evenodd\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ExclamationCircleIcon);\nexport default ForwardRef;","import sitemap from \"@/shared/sitemap\";\nimport { ProjectHandle, ProjectId } from \"@/shared/types/ids\";\nimport { AttachmentViewBlock } from \"@/shared/types/post-blocks\";\nimport { WireNotificationType } from \"@/shared/types/wire-models\";\nimport { Menu, Transition } from \"@headlessui/react\";\nimport { SpeakerWaveIcon } from \"@heroicons/react/24/outline\";\nimport {\n    ArrowPathIcon,\n    ChatBubbleOvalLeftEllipsisIcon,\n    ChevronDownIcon,\n    ExclamationCircleIcon,\n    HeartIcon,\n    UserGroupIcon,\n    UserPlusIcon,\n} from \"@heroicons/react/24/solid\";\nimport React, { FunctionComponent, ReactNode, useMemo } from \"react\";\nimport { Trans } from \"react-i18next\";\nimport { ProjectAvatar, ProjectAvatarFilteredProject } from \"../project-avatar\";\n\nexport type NotificationCardType =\n    | \"followed-you\"\n    | \"liked-your-post\"\n    | \"liked-share-of-post\"\n    | \"replied-to-comment\"\n    | \"commented-on-post\"\n    | \"shared-your-post\"\n    | \"shared-and-added\"\n    | \"shared-a-share\"\n    | \"shared-a-share-and-added\"\n    | \"group-liked-your-post\"\n    | \"group-liked-share-of-post\"\n    | \"group-followed-you\"\n    | \"group-shared-your-post\"\n    | \"group-shared-a-share\";\n\nexport type NotificationCardProps = {\n    key: string | number;\n    projects: ProjectAvatarFilteredProject[];\n    type: WireNotificationType;\n    actionText: NotificationCardType;\n    summary?: string;\n    firstAttachment?: AttachmentViewBlock;\n    body?: string;\n    summaryUrl: string;\n    expandedUrls?: Map<ProjectId, string>;\n};\n\nconst ActorLink: FunctionComponent<{ handle: ProjectHandle }> = ({\n    handle,\n}) => (\n    <a\n        href={sitemap.public.project\n            .mainAppProfile({\n                projectHandle: handle,\n            })\n            .toString()}\n        className=\"font-bold hover:underline\"\n        onClick={(e) => e.stopPropagation()} // Do not close menu\n    >\n        @{handle}\n    </a>\n);\n\nconst SubjectLink: FunctionComponent<{\n    children: ReactNode;\n    url: string | undefined;\n}> = ({ children, url }) => (\n    <a\n        href={url}\n        className=\"font-bold hover:underline\"\n        onClick={(e) => e.stopPropagation()} // Do not close menu\n    >\n        {children}\n    </a>\n);\n\nconst ExpandedGroupedShare: FunctionComponent<{\n    project: ProjectAvatarFilteredProject;\n    notificationType: NotificationCardType;\n    expandedUrls: Map<ProjectId, string> | undefined;\n}> = ({ project, notificationType, expandedUrls }) => {\n    switch (notificationType) {\n        case \"group-shared-your-post\":\n            return (\n                <div>\n                    <Trans i18nKey=\"client:notifications.group-shared-your-post-expanded\">\n                        <ActorLink handle={project.handle} /> shared{\" \"}\n                        <SubjectLink\n                            url={\n                                expandedUrls\n                                    ? expandedUrls.get(project.projectId)\n                                    : undefined\n                            }\n                        >\n                            your post\n                        </SubjectLink>\n                    </Trans>\n                </div>\n            );\n        case \"group-shared-a-share\":\n            return (\n                <div>\n                    <Trans i18nKey=\"client:notifications.group-shared-a-share-expanded\">\n                        <ActorLink handle={project.handle} /> shared{\" \"}\n                        <SubjectLink\n                            url={\n                                expandedUrls\n                                    ? expandedUrls.get(project.projectId)\n                                    : undefined\n                            }\n                        >\n                            a share\n                        </SubjectLink>{\" \"}\n                        of your post\n                    </Trans>\n                </div>\n            );\n        default:\n            return null;\n    }\n};\n\nconst ActionElement: FunctionComponent<{\n    actorHandle: ProjectHandle;\n    notificationType: NotificationCardType;\n    url: string;\n}> = ({ actorHandle, notificationType, url }) => {\n    switch (notificationType) {\n        case \"followed-you\":\n            return (\n                <Trans i18nKey=\"client:notifications.followed-you\">\n                    <ActorLink handle={actorHandle} /> followed you\n                </Trans>\n            );\n        case \"group-followed-you\":\n            return (\n                <Trans i18nKey=\"client:notifications.group-followed-you\">\n                    Several pages followed you\n                </Trans>\n            );\n        case \"liked-your-post\":\n            return (\n                <Trans i18nKey=\"client:notifications.liked-your-post\">\n                    <ActorLink handle={actorHandle} /> liked{\" \"}\n                    <SubjectLink url={url}>your post</SubjectLink>\n                </Trans>\n            );\n        case \"liked-share-of-post\":\n            return (\n                <Trans i18nKey=\"client:notifications.liked-share-of-post\">\n                    <ActorLink handle={actorHandle} /> liked{\" \"}\n                    <SubjectLink url={url}>a share</SubjectLink> of your post\n                </Trans>\n            );\n        case \"group-liked-your-post\":\n            return (\n                <Trans i18nKey=\"client:notifications.group-liked-your-post\">\n                    Several pages liked{\" \"}\n                    <SubjectLink url={url}>your post</SubjectLink>\n                </Trans>\n            );\n        case \"group-liked-share-of-post\":\n            return (\n                <Trans i18nKey=\"client:notifications.group-liked-share-of-post\">\n                    Several pages liked{\" \"}\n                    <SubjectLink url={url}>a share</SubjectLink> of your post\n                </Trans>\n            );\n        case \"replied-to-comment\":\n            return (\n                <Trans i18nKey=\"client:notifications.replied-to-comment\">\n                    <ActorLink handle={actorHandle} /> replied to{\" \"}\n                    <SubjectLink url={url}>your comment</SubjectLink>\n                </Trans>\n            );\n        case \"commented-on-post\":\n            return (\n                <Trans i18nKey=\"client:notifications.commented-on-post\">\n                    <ActorLink handle={actorHandle} /> left{\" \"}\n                    <SubjectLink url={url}>a comment</SubjectLink> on your post\n                </Trans>\n            );\n        case \"shared-your-post\":\n            return (\n                <Trans i18nKey=\"client:notifications.shared-your-post\">\n                    <ActorLink handle={actorHandle} /> shared{\" \"}\n                    <SubjectLink url={url}>your post</SubjectLink>\n                </Trans>\n            );\n        case \"group-shared-your-post\":\n            return (\n                <Trans i18nKey=\"client:notifications.group-shared-your-post\">\n                    Several pages shared{\" \"}\n                    <SubjectLink url={url}>your post</SubjectLink>\n                </Trans>\n            );\n        case \"group-shared-a-share\":\n            return (\n                <Trans i18nKey=\"client:notifications.group-shared-a-share\">\n                    Several pages shared{\" \"}\n                    <SubjectLink url={url}>a share</SubjectLink> of your post\n                </Trans>\n            );\n        case \"shared-and-added\":\n            return (\n                <Trans i18nKey=\"client:notifications.shared-and-added\">\n                    <ActorLink handle={actorHandle} /> shared{\" \"}\n                    <SubjectLink url={url}>your post and added</SubjectLink>\n                </Trans>\n            );\n        case \"shared-a-share\":\n            return (\n                <Trans i18nKey=\"client:notifications.shared-a-share\">\n                    <ActorLink handle={actorHandle} /> shared{\" \"}\n                    <SubjectLink url={url}>a share</SubjectLink> of your post\n                </Trans>\n            );\n        case \"shared-a-share-and-added\":\n            return (\n                <Trans i18nKey=\"client:notifications.shared-a-share-and-added\">\n                    <ActorLink handle={actorHandle} /> shared{\" \"}\n                    <SubjectLink url={url}>\n                        a share of your post and added\n                    </SubjectLink>\n                </Trans>\n            );\n    }\n};\n\nconst AttachmentPreview: FunctionComponent<{\n    attachment: AttachmentViewBlock;\n}> = ({ attachment }) => {\n    const processedImageUrl = useMemo(() => {\n        const src = attachment.attachment.previewURL;\n\n        const parsedSrc = new URL(src);\n        // hardcode this to 2 because it doesn't matter that much from a size\n        // standpoint and eliminates any flashing or double loading.\n        parsedSrc.searchParams.append(\"dpr\", \"2\");\n        // hardcode width and height since we display at a fixed size\n        parsedSrc.searchParams.append(\"width\", \"32\");\n        parsedSrc.searchParams.append(\"height\", \"32\");\n        parsedSrc.searchParams.append(\"fit\", \"cover\");\n        parsedSrc.searchParams.append(\"auto\", \"webp\");\n\n        return parsedSrc.toString();\n    }, [attachment.attachment.previewURL]);\n\n    switch (attachment.attachment.kind) {\n        case \"image\": {\n            return (\n                <img\n                    src={processedImageUrl}\n                    alt={attachment.attachment.altText}\n                    className=\"cohost-shadow-light aspect-square h-8 w-8 rounded-lg object-cover\"\n                />\n            );\n        }\n        case \"audio\": {\n            return (\n                <div className=\"cohost-shadow-light flex h-8 w-8 flex-row items-center rounded-lg bg-cherry object-cover\">\n                    <SpeakerWaveIcon className=\"m-auto h-6 w-6 text-notWhite\" />\n                </div>\n            );\n        }\n    }\n};\n\nexport const NotificationCard: FunctionComponent<NotificationCardProps> = ({\n    projects,\n    actionText,\n    summary,\n    firstAttachment,\n    body,\n    type,\n    summaryUrl,\n    expandedUrls,\n}) => {\n    const Icon =\n        type === \"like\"\n            ? HeartIcon\n            : type === \"comment\"\n            ? ChatBubbleOvalLeftEllipsisIcon\n            : type === \"share\" || type === \"groupedShare\"\n            ? ArrowPathIcon\n            : type === \"follow\"\n            ? UserPlusIcon\n            : type === \"groupedLike\"\n            ? HeartIcon\n            : type === \"groupedFollow\"\n            ? UserGroupIcon\n            : ExclamationCircleIcon; // error state\n    return (\n        <div className=\"co-notification-card flex flex-col p-3 last:rounded-b-lg\">\n            <div className=\"flex w-full flex-row flex-nowrap items-center gap-3 \">\n                <Icon className=\"h-6 w-6 flex-none\" />\n                {projects.length === 1 ? (\n                    <ProjectAvatar\n                        project={projects[0]}\n                        noLink={true}\n                        hideLock={true}\n                        className=\"h-8 w-8\"\n                    />\n                ) : null}\n                <div className=\"flex w-full flex-1 flex-row flex-wrap gap-3 overflow-auto lg:flex-nowrap\">\n                    <span className=\"flex-wrap\">\n                        <ActionElement\n                            actorHandle={projects[0].handle}\n                            notificationType={actionText}\n                            url={summaryUrl}\n                        />\n                    </span>\n                    {summary ? (\n                        <span className=\"co-inline-quote flex-1 truncate before:content-['“'] after:content-['”']\">\n                            <a href={summaryUrl} className=\"hover:underline\">\n                                {summary}\n                            </a>\n                        </span>\n                    ) : null}\n                </div>\n                {firstAttachment ? (\n                    <AttachmentPreview attachment={firstAttachment} />\n                ) : null}\n            </div>\n            {body ? (\n                <p className=\"co-block-quote ml-20 whitespace-pre-line break-words border-l-2 pl-2 italic\">\n                    {body}\n                </p>\n            ) : null}\n            {projects.length > 1 ? (\n                <Menu as=\"div\" className=\"flex flex-col gap-4\">\n                    <div className=\"mt-2 flex flex-row flex-nowrap items-center gap-3 overflow-hidden\">\n                        <Menu.Button>\n                            <ChevronDownIcon className=\"h-6 w-6 transition-transform ui-open:rotate-180\" />\n                        </Menu.Button>\n                        <div className=\"flex flex-row flex-nowrap items-center gap-2 overflow-hidden\">\n                            {projects.map((project) => (\n                                <ProjectAvatar\n                                    key={project.projectId}\n                                    project={project}\n                                    noLink={false}\n                                    hideLock={true}\n                                    className=\"h-8 w-8\"\n                                />\n                            ))}\n                        </div>\n                    </div>\n                    <Transition\n                        enter=\"motion-reduce:transition-none transition-transform origin-top ease-out\"\n                        enterFrom=\"scale-y-0\"\n                        enterTo=\"scale-y-100\"\n                        leave=\"motion-reduce:transition-none transition-transform origin-top ease-out\"\n                        leaveTo=\"scale-y-0\"\n                        leaveFrom=\"scale-y-100\"\n                    >\n                        <Menu.Items\n                            as=\"div\"\n                            className=\"ml-9 flex flex-col gap-2\"\n                        >\n                            {projects.map((project) => (\n                                <Menu.Item\n                                    key={project.handle}\n                                    as=\"div\"\n                                    className=\"flex flex-row gap-4\"\n                                >\n                                    <ProjectAvatar\n                                        project={project}\n                                        noLink={true}\n                                        hideLock={true}\n                                        className=\"h-8 w-8\"\n                                    />\n                                    {type === \"groupedShare\" ? (\n                                        <ExpandedGroupedShare\n                                            project={project}\n                                            notificationType={actionText}\n                                            expandedUrls={expandedUrls}\n                                        />\n                                    ) : (\n                                        <ActorLink handle={project.handle} />\n                                    )}\n                                </Menu.Item>\n                            ))}\n                        </Menu.Items>\n                    </Transition>\n                </Menu>\n            ) : null}\n        </div>\n    );\n};\n","import { DateTime } from \"luxon\";\nimport React, { FunctionComponent, useContext, useMemo } from \"react\";\n\nimport { NotificationCardProps, NotificationCard } from \"./notification-card\";\nimport { useDynamicTheme } from \"../../../hooks/dynamic-theme\";\n\nexport const NotificationGroup: FunctionComponent<{\n    date: Date;\n    notifications: NotificationCardProps[];\n}> = ({ date: jsDate, notifications }) => {\n    const postBoxTheme = useDynamicTheme();\n\n    // get the number of years between the notif and now, is negative\n    // used to show year if the notif was more than one year ago\n    // likely will only be useful during the Epoch Era but w/e\n    const date = DateTime.fromJSDate(jsDate);\n    const timeDiff = date.diffNow(\"years\").years;\n\n    const notifViews = useMemo(\n        () =>\n            notifications.flatMap((notification) => (\n                <NotificationCard {...notification} key={notification.key} />\n            )),\n        [notifications]\n    );\n\n    return (\n        <div\n            data-theme={postBoxTheme.current}\n            className=\"co-themed-box co-notification-group cohost-shadow-light dark:cohost-shadow-dark flex flex-col divide-y rounded-lg\"\n        >\n            <header className=\"flex flex-row items-center justify-end rounded-t-lg p-3\">\n                <time\n                    className=\"font-league text-xs uppercase\"\n                    dateTime={date.toISODate()}\n                >\n                    {date.toLocaleString({\n                        month: \"long\",\n                        day: \"numeric\",\n                        weekday: \"long\",\n                        year: timeDiff < -1 ? \"numeric\" : undefined,\n                    })}\n                </time>\n            </header>\n            {notifViews}\n        </div>\n    );\n};\n","import { renderSummaryNoHTML } from \"@/client/lib/markdown/other-rendering\";\nimport { renderPostSummary } from \"@/client/lib/markdown/post-rendering\";\nimport { trpc } from \"@/client/lib/trpc\";\nimport { tw } from \"@/client/lib/tw-tagged-literal\";\nimport { NotificationFilters } from \"@/shared/api-types/notifications-v1\";\nimport sitemap from \"@/shared/sitemap\";\nimport { CommentId, PostId, ProjectId } from \"@/shared/types/ids\";\nimport {\n    AttachmentViewBlock,\n    getAttachmentViewBlocks,\n    isAttachmentRowViewBlock,\n    isAttachmentViewBlock,\n} from \"@/shared/types/post-blocks\";\nimport { WireProjectModel } from \"@/shared/types/projects\";\nimport {\n    WireGroupedNotification,\n    WireNotification,\n    WireNotificationCommentViewModel,\n    WirePostViewModel,\n    WireUngroupedNotification,\n} from \"@/shared/types/wire-models\";\nimport { isDefined } from \"@/shared/util/filter-null-undefined\";\nimport { TFunction } from \"i18next\";\nimport { DateTime } from \"luxon\";\nimport React, { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n    UserInfoType,\n    useUserInfo,\n} from \"../../../providers/user-info-provider\";\nimport {\n    NotificationCard,\n    NotificationCardProps,\n    NotificationCardType,\n} from \"./notification-card\";\nimport { NotificationGroup } from \"./notification-group\";\n\nconst getFirstAttachment = (post: WirePostViewModel) => {\n    const attachmentBlocks = getAttachmentViewBlocks(post.blocks);\n    return attachmentBlocks[0] as AttachmentViewBlock | undefined;\n};\n\nconst prepareUngroupedNotificationView = (\n    notification: WireUngroupedNotification,\n    projects: { [projectId: ProjectId]: WireProjectModel },\n    posts: { [postId: PostId]: WirePostViewModel },\n    comments: { [commentId: CommentId]: WireNotificationCommentViewModel },\n    t: TFunction,\n    userInfo: UserInfoType\n): NotificationCardProps | null => {\n    const project = projects[notification.fromProjectId];\n\n    // if for whatever reason we don't have a project\n    // associated, skip rendering.\n    if (!project || !project.projectId) return null;\n\n    // currently the only non-post notification type,\n    // fortunately very uncomplicated to render\n    if (notification.type === \"follow\") {\n        return {\n            actionText: \"followed-you\",\n            key: `follow-${project.projectId}`,\n            projects: [project],\n            type: \"follow\",\n            summaryUrl: sitemap.public.project\n                .mainAppProfile({\n                    projectHandle: project.handle,\n                })\n                .toString(),\n        };\n    }\n\n    const post = posts[notification.toPostId];\n\n    // if for whatever reason we don't have a post\n    // associated, skip rendering.\n    // this happens if a post is removed from the pool due to\n    // the post sharer having blocked OP.\n    if (!post) return null;\n\n    const myPost = post.postingProject.projectId == userInfo.projectId;\n\n    const firstAttachment = getFirstAttachment(post);\n\n    // we only grab the first 60 characters b/c our max view width is `60ch`\n    // this just helps keep the DOM a little bit smaller\n    let summary =\n        renderPostSummary(post, { myPost }) ||\n        t(\"client:notifications.empty-post-summary\", \"[no text]\");\n    if (summary.length > 60) {\n        summary = summary.slice(0, 60) + \"…\";\n    }\n\n    switch (notification.type) {\n        case \"like\": {\n            const actionText =\n                post.postingProject.projectId === userInfo.projectId\n                    ? \"liked-your-post\"\n                    : \"liked-share-of-post\";\n\n            return {\n                key: notification.relationshipId,\n                type: \"like\",\n                actionText,\n                projects: [project],\n                summary,\n                summaryUrl: post.singlePostPageUrl.toString(),\n                firstAttachment,\n            };\n        }\n        case \"comment\": {\n            const comment = comments[notification.commentId];\n\n            // comment is a reply and the original comment is by current project\n            let isReply = !!comment.comment.inReplyTo;\n            const repliedComment =\n                isReply && comment.comment.inReplyTo\n                    ? comments[comment.comment.inReplyTo]\n                    : null;\n            isReply = !!(\n                isReply &&\n                repliedComment &&\n                repliedComment.poster?.projectId === userInfo.projectId\n            );\n\n            const actionText = isReply\n                ? \"replied-to-comment\"\n                : \"commented-on-post\";\n\n            const notifSummary =\n                isReply && repliedComment\n                    ? renderSummaryNoHTML(\n                          repliedComment.comment.body,\n                          DateTime.fromISO(\n                              repliedComment.comment.postedAtISO\n                          ).toJSDate(),\n                          {\n                              renderingContext: \"comment\",\n                              disableEmbeds: true,\n                              externalLinksInNewTab: true,\n                              hasCohostPlus: false,\n                          }\n                      )\n                    : summary;\n\n            return {\n                key: notification.commentId,\n                type: \"comment\",\n                actionText,\n                projects: [project],\n                summary: notifSummary,\n                summaryUrl: sitemap.public.project.singlePost\n                    .published({\n                        projectHandle: post.postingProject.handle,\n                        filename: post.filename,\n                        commentId: comment.comment.commentId,\n                    })\n                    .toString(),\n                body: renderSummaryNoHTML(\n                    comment.comment.body,\n                    DateTime.fromISO(comment.comment.postedAtISO).toJSDate(),\n                    {\n                        renderingContext: \"comment\",\n                        disableEmbeds: true,\n                        externalLinksInNewTab: true,\n                        hasCohostPlus: false,\n                    }\n                ),\n                // only show the attachment for comments on posts, not replies\n                firstAttachment: !isReply ? firstAttachment : undefined,\n            };\n        }\n        case \"share\": {\n            const sharePost = posts[notification.sharePostId];\n            if (!sharePost) return null;\n\n            let shareSummary =\n                renderPostSummary(sharePost, { myPost }) ||\n                t(\"client:notifications.empty-post-summary\", \"[no text]\");\n            if (shareSummary.length > 60) {\n                shareSummary = shareSummary.slice(0, 60) + \"…\";\n            }\n\n            let actionText: NotificationCardType =\n                sharePost.transparentShareOfPostId\n                    ? \"shared-your-post\"\n                    : \"shared-and-added\";\n\n            if (post.postingProject.projectId !== userInfo.projectId) {\n                actionText = sharePost.transparentShareOfPostId\n                    ? \"shared-a-share\"\n                    : \"shared-a-share-and-added\";\n            }\n\n            return {\n                key: notification.sharePostId,\n                type: \"share\",\n                actionText,\n                projects: [project],\n                summary,\n                summaryUrl: sharePost.singlePostPageUrl.toString(),\n                // only show body for contentful shares\n                body: sharePost.transparentShareOfPostId\n                    ? undefined\n                    : shareSummary,\n                firstAttachment,\n            };\n        }\n    }\n};\n\nconst prepareGroupedNotificationView = (\n    notification: WireGroupedNotification,\n    projects: { [projectId: ProjectId]: WireProjectModel },\n    posts: { [postId: PostId]: WirePostViewModel },\n    comments: { [commentId: CommentId]: WireNotificationCommentViewModel },\n    t: TFunction,\n    userInfo: UserInfoType\n): NotificationCardProps | null => {\n    // if a project has been purged, some of the projects this notification is\n    // from can be undefined.  filter those out before preparing the notification\n    // view.\n    const notifProjects = notification.fromProjectIds\n        .map((projectId) => projects[projectId])\n        .filter(isDefined);\n\n    // all the projects are undefined; suppress the notification entirely.\n    if (notifProjects.length === 0) {\n        return null;\n    }\n\n    // if there's only one project left, generate an ungrouped notification.\n    if (notifProjects.length === 1) {\n        let ungroupedNotification: WireUngroupedNotification;\n        switch (notification.type) {\n            case \"groupedLike\":\n                ungroupedNotification = {\n                    type: \"like\",\n                    createdAt: notification.createdAt,\n                    fromProjectId: notifProjects[0].projectId, // notification.fromProjectIds[0],\n                    relationshipId: notification.relationshipIds[0],\n                    toPostId: notification.toPostId,\n                };\n                break;\n            case \"groupedFollow\":\n                ungroupedNotification = {\n                    type: \"follow\",\n                    createdAt: notification.createdAt,\n                    fromProjectId: notifProjects[0].projectId,\n                };\n                break;\n            case \"groupedShare\":\n                ungroupedNotification = {\n                    type: \"share\",\n                    createdAt: notification.createdAt,\n                    fromProjectId: notifProjects[0].projectId,\n                    sharePostId: notification.sharePostIds[0],\n                    transparentShare: notification.transparentShare,\n                    toPostId: notification.toPostId,\n                };\n                break;\n        }\n        return prepareUngroupedNotificationView(\n            ungroupedNotification,\n            projects,\n            posts,\n            comments,\n            t,\n            userInfo\n        );\n    }\n\n    switch (notification.type) {\n        case \"groupedLike\": {\n            const post = posts[notification.toPostId];\n            if (!post) return null;\n            const myPost = post.postingProject.projectId === userInfo.projectId;\n\n            const firstAttachment = getFirstAttachment(post);\n            // we only grab the first 60 characters b/c our max view width is `60ch`\n            // this just helps keep the DOM a little bit smaller\n            let summary =\n                renderPostSummary(post, { myPost }) ||\n                t(\"client:notifications.empty-post-summary\", \"[no text]\");\n            if (summary.length > 60) {\n                summary = summary.slice(0, 60) + \"…\";\n            }\n\n            return {\n                key: JSON.stringify(notification.relationshipIds),\n                actionText: myPost\n                    ? \"group-liked-your-post\"\n                    : \"group-liked-share-of-post\",\n                projects: notifProjects,\n                type: \"groupedLike\",\n                summaryUrl: post.singlePostPageUrl,\n                firstAttachment,\n                summary,\n            };\n        }\n        case \"groupedFollow\": {\n            return {\n                key: `follow-${JSON.stringify(notification.fromProjectIds)}`,\n                actionText: \"group-followed-you\",\n                projects: notifProjects,\n                type: \"groupedFollow\",\n                // this is not actually rendered but is a required field\n                summaryUrl: sitemap.public.project\n                    .mainAppProfile({\n                        projectHandle: notifProjects[0].handle,\n                    })\n                    .toString(),\n            };\n        }\n        case \"groupedShare\": {\n            const post = posts[notification.toPostId];\n            if (!post) return null;\n            const myPost = post.postingProject.projectId === userInfo.projectId;\n\n            const firstAttachment = getFirstAttachment(post);\n\n            // we only grab the first 60 characters b/c our max view width is `60ch`\n            // this just helps keep the DOM a little bit smaller\n            let summary =\n                renderPostSummary(post, { myPost }) ||\n                t(\"client:notifications.empty-post-summary\", \"[no text]\");\n            if (summary.length > 60) {\n                summary = summary.slice(0, 60) + \"…\";\n            }\n\n            const expandedUrls = new Map<ProjectId, string>();\n            Object.values(posts).forEach((post) => {\n                expandedUrls.set(\n                    post.postingProject.projectId,\n                    post.singlePostPageUrl\n                );\n            });\n\n            return {\n                key: `share-${notification.toPostId}-${JSON.stringify(\n                    notification.fromProjectIds\n                )}`,\n                actionText: myPost\n                    ? \"group-shared-your-post\"\n                    : \"group-shared-a-share\",\n                projects: notifProjects,\n                type: \"groupedShare\",\n                summaryUrl: post.singlePostPageUrl,\n                expandedUrls: expandedUrls,\n                summary,\n                firstAttachment,\n            };\n        }\n        default:\n            return null;\n    }\n};\n\nexport const NotificationViews: FunctionComponent<{\n    groupedNotifications: { [dateString: string]: WireNotification[] };\n    projects: { [projectId: ProjectId]: WireProjectModel };\n    posts: { [postId: PostId]: WirePostViewModel };\n    comments: { [commentId: CommentId]: WireNotificationCommentViewModel };\n}> = ({ groupedNotifications, posts, projects, comments }) => {\n    const { t } = useTranslation();\n    const userInfo = useUserInfo();\n\n    return (\n        <>\n            {Object.keys(groupedNotifications).map((dateString) => {\n                const notifs = groupedNotifications[dateString];\n                const date = DateTime.fromISO(dateString);\n\n                const notifications = notifs\n                    .map<NotificationCardProps | null>((notification) => {\n                        if (\n                            WireGroupedNotification.safeParse(notification)\n                                .success\n                        ) {\n                            return prepareGroupedNotificationView(\n                                notification as WireGroupedNotification,\n                                projects,\n                                posts,\n                                comments,\n                                t,\n                                userInfo\n                            );\n                        } else if (\n                            WireUngroupedNotification.safeParse(notification)\n                                .success\n                        ) {\n                            return prepareUngroupedNotificationView(\n                                notification as WireUngroupedNotification,\n                                projects,\n                                posts,\n                                comments,\n                                t,\n                                userInfo\n                            );\n                        } else {\n                            return null;\n                        }\n                    })\n                    .filter(isDefined);\n\n                // If we don't have any notifications to show because they were\n                // all filtered, skip rendering this group.\n                // Otherwise, we get an empty notification group with just a\n                // header, which looks Suspicious and/or broken.\n                if (!notifications.filter((view) => !!view).length) return null;\n\n                return (\n                    <NotificationGroup\n                        notifications={notifications}\n                        date={date.toJSDate()}\n                        key={date.toISO()}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\ntype InvalidateNotificationsFunction = () => Promise<void>;\n\nexport const NotificationFilterFormInner: FunctionComponent<{\n    invalidateNotifications: InvalidateNotificationsFunction;\n}> = ({ invalidateNotifications }) => {\n    const utils = trpc.useContext();\n    const { data } = trpc.notifications.notificationFilters.get.useQuery(\n        undefined,\n        {\n            suspense: true,\n        }\n    );\n    const setNotificationFilters =\n        trpc.notifications.notificationFilters.set.useMutation<{\n            previousState: NotificationFilters;\n        }>({\n            onMutate: async (values) => {\n                // cancel any pending requests so they don't overwrite our\n                // optimistic update\n                await utils.notifications.notificationFilters.get.cancel();\n\n                // snapshot the previous value\n                const previousState =\n                    utils.notifications.notificationFilters.get.getData() ??\n                    NotificationFilters.parse({});\n\n                // optimistic update\n                utils.notifications.notificationFilters.get.setData(\n                    undefined,\n                    NotificationFilters.parse(values)\n                );\n\n                return { previousState };\n            },\n            onError: (err, params, context) => {\n                // mutation failed, reset back to the previous state\n                utils.notifications.notificationFilters.get.setData(\n                    undefined,\n                    NotificationFilters.parse(context?.previousState)\n                );\n            },\n            onSettled: async () => {\n                // refetch so we know we're For Sure accurate\n                await utils.notifications.notificationFilters.get.invalidate();\n\n                await invalidateNotifications();\n            },\n        });\n\n    const filterSettings = data ?? NotificationFilters.parse({});\n\n    return (\n        <>\n            <li>\n                <label className=\"flex items-center justify-between gap-3 px-3 py-2 font-bold\">\n                    likes\n                    <input\n                        type=\"checkbox\"\n                        className=\"rounded-checkbox\"\n                        checked={filterSettings.includeLikes}\n                        onChange={(e) => {\n                            setNotificationFilters.mutate({\n                                ...filterSettings,\n                                includeLikes: e.target.checked,\n                            });\n                        }}\n                        disabled={setNotificationFilters.isLoading}\n                    />\n                </label>\n            </li>\n            <li>\n                <label className=\"flex items-center justify-between gap-3 px-3 py-2 font-bold\">\n                    shares\n                    <input\n                        type=\"checkbox\"\n                        className=\"rounded-checkbox\"\n                        checked={filterSettings.includeShares}\n                        onChange={(e) => {\n                            setNotificationFilters.mutate({\n                                ...filterSettings,\n                                includeShares: e.target.checked,\n                            });\n                        }}\n                        disabled={setNotificationFilters.isLoading}\n                    />\n                </label>\n            </li>\n            <li>\n                <label className=\"flex items-center justify-between gap-3 px-3 py-2 font-bold\">\n                    replies\n                    <input\n                        type=\"checkbox\"\n                        className=\"rounded-checkbox\"\n                        checked={filterSettings.includeReplies}\n                        onChange={(e) => {\n                            setNotificationFilters.mutate({\n                                ...filterSettings,\n                                includeReplies: e.target.checked,\n                            });\n                        }}\n                        disabled={setNotificationFilters.isLoading}\n                    />\n                </label>\n            </li>\n            <li>\n                <label className=\"flex items-center justify-between gap-3 px-3 py-2 font-bold\">\n                    comments\n                    <input\n                        type=\"checkbox\"\n                        className=\"rounded-checkbox\"\n                        checked={filterSettings.includeComments}\n                        onChange={(e) => {\n                            setNotificationFilters.mutate({\n                                ...filterSettings,\n                                includeComments: e.target.checked,\n                            });\n                        }}\n                        disabled={setNotificationFilters.isLoading}\n                    />\n                </label>\n            </li>\n            <li>\n                <label className=\"flex items-center justify-between gap-3 px-3 py-2 font-bold\">\n                    follows\n                    <input\n                        type=\"checkbox\"\n                        className=\"rounded-checkbox\"\n                        checked={filterSettings.includeFollows}\n                        onChange={(e) => {\n                            setNotificationFilters.mutate({\n                                ...filterSettings,\n                                includeFollows: e.target.checked,\n                            });\n                        }}\n                        disabled={setNotificationFilters.isLoading}\n                    />\n                </label>\n            </li>\n        </>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport {\n    NotificationsListRespReady,\n    isNotificationsListRespReady,\n} from \"@/shared/api-types/notifications-v1\";\nimport { CommentId, PostId, ProjectId } from \"@/shared/types/ids\";\nimport { WireProjectModel } from \"@/shared/types/projects\";\nimport {\n    WireNotification,\n    WireNotificationCommentViewModel,\n    WirePostViewModel,\n} from \"@/shared/types/wire-models\";\nimport { DateTime } from \"luxon\";\nimport React, { FunctionComponent, useCallback, useMemo } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useSSR } from \"../../hooks/is-server\";\nimport { AuthnButton } from \"../partials/authn-button\";\nimport {\n    NotificationFilterFormInner,\n    NotificationViews,\n} from \"../partials/notifications/shared-lib\";\nimport { SidebarMenu } from \"../sidebar-menu\";\nimport { useDynamicTheme } from \"../../hooks/dynamic-theme\";\nimport { InfoBox } from \"../elements/info-box\";\n\nimport eggbox from \"@/client/images/eggbox.png\";\nimport sitemap from \"@/shared/sitemap\";\nimport { ResponsiveFormlet } from \"../elements/responsive-formlet\";\n\nconst PAGE_SIZE = 40;\n\nconst NotificationsPage: FunctionComponent = () => {\n    const { data, hasNextPage, fetchNextPage, isLoading } =\n        trpc.notifications.list.useInfiniteQuery(\n            {\n                limit: PAGE_SIZE,\n            },\n            {\n                suspense: true,\n                staleTime: Infinity,\n                keepPreviousData: true,\n                refetchInterval: (query) => {\n                    const isReady =\n                        query?.pages.some(isNotificationsListRespReady) ??\n                        false;\n                    return isReady ? Infinity : 5 * 1000;\n                },\n                getNextPageParam: (lastPage) => {\n                    return lastPage.ready ? lastPage.nextCursor : null;\n                },\n            }\n        );\n    const utils = trpc.useContext();\n\n    const { isServer } = useSSR();\n\n    const readyPages = useMemo(\n        () => (data ? data.pages : []).filter(isNotificationsListRespReady),\n        [data]\n    );\n\n    const notifications = useMemo(\n        () =>\n            readyPages.reduce(\n                (collector, curr) => [...collector, ...curr.notifications],\n                [] as WireNotification[]\n            ),\n        [readyPages]\n    );\n\n    const comments = useMemo(\n        () =>\n            readyPages.reduce(\n                (collector, curr) => ({ ...collector, ...curr.comments }),\n                {} as {\n                    [commentId: CommentId]: WireNotificationCommentViewModel;\n                }\n            ),\n        [readyPages]\n    );\n\n    const projects = useMemo(\n        () =>\n            readyPages.reduce(\n                (collector, curr) => ({ ...collector, ...curr.projects }),\n                {} as { [projectId: ProjectId]: WireProjectModel }\n            ),\n        [readyPages]\n    );\n\n    const posts = useMemo(\n        () =>\n            readyPages.reduce(\n                (collector, curr) => ({ ...collector, ...curr.posts }),\n                {} as { [postId: PostId]: WirePostViewModel }\n            ),\n        [readyPages]\n    );\n\n    const groupedNotifications = useMemo(\n        () =>\n            notifications.reduce<{ [dateString: string]: WireNotification[] }>(\n                (collector, notif) => {\n                    let notifs: WireNotification[] = [];\n                    const date = DateTime.fromISO(notif.createdAt, {\n                        zone: isServer ? \"UTC\" : \"local\",\n                    }).toISODate();\n                    if (collector[date]) {\n                        notifs = collector[date];\n                    }\n\n                    notifs.push(notif);\n                    return {\n                        ...collector,\n                        [date]: notifs,\n                    };\n                },\n                {}\n            ),\n        [isServer, notifications]\n    );\n\n    const isReady = readyPages.length > 0;\n\n    const invalidateNotifications = useCallback(() => {\n        return utils.notifications.list.invalidate();\n    }, [utils.notifications.list]);\n\n    const postBoxTheme = useDynamicTheme();\n\n    return (\n        <>\n            <Helmet title=\"notifications\" />\n            <main className=\"w-full pb-20 pt-8 lg:pt-16\">\n                <div className=\"container mx-auto grid grid-cols-1 gap-x-16 gap-y-8 lg:grid-cols-4\">\n                    <SidebarMenu />\n\n                    <div className=\"lg:order-3\">\n                        <ResponsiveFormlet title=\"notification filters\">\n                            <NotificationFilterFormInner\n                                invalidateNotifications={\n                                    invalidateNotifications\n                                }\n                            />\n                        </ResponsiveFormlet>\n                    </div>\n\n                    <section className=\"col-span-1 flex flex-col gap-8 lg:col-span-2\">\n                        {isReady ? (\n                            notifications.length > 0 ? (\n                                <>\n                                    <NotificationViews\n                                        comments={comments}\n                                        groupedNotifications={\n                                            groupedNotifications\n                                        }\n                                        posts={posts}\n                                        projects={projects}\n                                    />\n                                    <AuthnButton\n                                        onClick={fetchNextPage}\n                                        disabled={isLoading || !hasNextPage}\n                                    >\n                                        Load More\n                                    </AuthnButton>\n                                </>\n                            ) : (\n                                <div\n                                    className=\"co-post-box co-themed-box\"\n                                    data-theme={postBoxTheme.current}\n                                >\n                                    <div className=\"co-prose prose p-3\">\n                                        <p>\n                                            You don’t have any notifications\n                                            matching your filters. Switch 'em\n                                            up!\n                                        </p>\n                                    </div>\n                                </div>\n                            )\n                        ) : (\n                            <div\n                                className=\"co-post-box co-themed-box\"\n                                data-theme={postBoxTheme.current}\n                            >\n                                <div className=\"co-prose prose p-3\">\n                                    <h1>\n                                        We’re getting your notifications ready!\n                                    </h1>\n                                    <img\n                                        src={sitemap.public.static\n                                            .staticAsset({ path: eggbox })\n                                            .toString()}\n                                        className=\"mx-auto max-w-sm\"\n                                        alt=\"illustration of eggbug shaped like a mailbox\"\n                                    />\n                                    <p>\n                                        No need to refresh the page, it’ll\n                                        refresh automatically when they’re done.\n                                    </p>\n                                    <p>\n                                        If you’ve been seeing this for over a\n                                        few minutes, please e-mail us at{\" \"}\n                                        <a href=\"mailto:support@cohost.org\">\n                                            support@cohost.org\n                                        </a>{\" \"}\n                                        and we’ll look into it!\n                                    </p>\n                                </div>\n                            </div>\n                        )}\n                    </section>\n                </div>\n            </main>\n        </>\n    );\n};\n\nexport default NotificationsPage;\n","import { string, z } from \"zod\";\nimport { AccessResult, AccessResultEnum } from \"./access-result\";\nimport {\n    ArtistAlleyAdId,\n    AskId,\n    AttachmentId,\n    CommentId,\n    ISODateString,\n    InviteId,\n    PostId,\n    ProjectId,\n    RelationshipId,\n    UserId,\n} from \"./ids\";\nimport { StorageBlock, ViewBlock } from \"./post-blocks\";\nimport { PostStateEnum } from \"./posts\";\nimport { ProjectFlag, WireProjectModel } from \"./projects\";\n\n// Type data needed for posts on the client\nexport const WirePostContentCommon = z.object({\n    postId: PostId,\n    headline: z.string(),\n    publishedAt: z.string().optional(),\n    filename: z.string(),\n    transparentShareOfPostId: PostId.nullable(),\n    shareOfPostId: PostId.nullable(),\n    state: PostStateEnum,\n    numComments: z.number(),\n    cws: z.string().array(),\n    tags: z.string().array(),\n    hasCohostPlus: z.boolean(),\n    pinned: z.boolean(),\n    commentsLocked: z.boolean(),\n    sharesLocked: z.boolean(),\n});\nexport type WirePostContentCommon = z.infer<typeof WirePostContentCommon>;\n\nexport const WirePostModel = WirePostContentCommon.extend({\n    adultContent: z.boolean(),\n    shareOfPostId: PostId.nullable(),\n    updatedAt: z.string(),\n    blocks: StorageBlock.array(),\n    attachments: z\n        .object({ attachmentId: AttachmentId, filename: z.string() })\n        .array(),\n});\nexport type WirePostModel = z.infer<typeof WirePostModel>;\n\nexport const WirePostModelModeratorExtensions = WirePostModel.extend({\n    adultContentOverride: z.boolean(),\n    projectId: ProjectId,\n});\nexport type WirePostModelModeratorExtensions = z.infer<\n    typeof WirePostModelModeratorExtensions\n>;\n\nexport const Permission = z.enum([\n    // allow the user to grant all permissions to any user\n    \"grant_all_permissions\",\n\n    // allow the user to access the moderator UI + view unpublished posts by\n    // projects they don't edit + grant the read-only and suspended permissions\n    \"moderator\",\n\n    // prevent the user from doing most things\n    \"read_only\",\n\n    // prevent the user from logging in\n    // the inconsistency here is deliberate to avoid breaking existing suspended users\n    \"suspended\",\n\n    // prevent the user from creating new projects\n    // only used in instances of extreme username hording\n    \"no_new_projects\",\n\n    // prevent the user from creating new artist alley listings. used in\n    // instances of extreme artist alley spam or repeated content violations\n    \"no_artist_alley\",\n]);\nexport type Permission = z.infer<typeof Permission>;\n\n// double declaration required due to a typescript limitation with recursive types\n// see: https://github.com/colinhacks/zod#recursive-types\ntype WireCommentViewModelInternal = {\n    comment: {\n        commentId: CommentId;\n        postedAtISO: string;\n        deleted: boolean;\n        body: string;\n        children: WireCommentViewModelInternal[];\n        postId: PostId;\n        inReplyTo: CommentId | null;\n        hasCohostPlus: boolean;\n        hidden: boolean;\n    };\n    canInteract: AccessResult;\n    canEdit: AccessResult;\n    canHide: AccessResult;\n    poster?: WireProjectModel;\n};\n\nexport const WireNotificationCommentViewModel = z.object({\n    canInteract: AccessResultEnum,\n    canEdit: AccessResultEnum,\n    canHide: AccessResultEnum,\n    comment: z.object({\n        body: z.string(),\n        children: z.tuple([]),\n        commentId: CommentId,\n        deleted: z.boolean(),\n        postId: PostId,\n        postedAtISO: z.string(),\n        inReplyTo: CommentId.nullable(),\n        hasCohostPlus: z.boolean(),\n        hidden: z.boolean(),\n    }),\n    poster: z.object({\n        projectId: ProjectId,\n    }),\n});\nexport type WireNotificationCommentViewModel = z.infer<\n    typeof WireNotificationCommentViewModel\n>;\n\nexport const WireCommentViewModel: z.ZodType<WireCommentViewModelInternal> =\n    z.lazy(() =>\n        z.object({\n            comment: z.object({\n                commentId: CommentId,\n                postedAtISO: ISODateString,\n                deleted: z.boolean(),\n                body: z.string(),\n                children: WireCommentViewModel.array(),\n                postId: PostId,\n                inReplyTo: CommentId.nullable(),\n                hasCohostPlus: z.boolean(),\n                hidden: z.boolean(),\n            }),\n            canInteract: AccessResultEnum,\n            canEdit: AccessResultEnum,\n            canHide: AccessResultEnum,\n            poster: WireProjectModel.optional(),\n        })\n    );\n\nexport type WireCommentViewModel = z.infer<typeof WireCommentViewModel>;\n\nexport const WireRenderedPostContent = z.object({\n    initial: z.string(),\n    expanded: z.string().optional(),\n});\n\nexport type WireRenderedPostContent = z.infer<typeof WireRenderedPostContent>;\n\nexport const LimitedVisibilityReason = z.enum([\n    \"none\",\n    \"log-in-first\",\n    \"deleted\",\n    \"unpublished\",\n    \"adult-content\",\n    \"blocked\",\n]);\nexport type LimitedVisibilityReason = z.infer<typeof LimitedVisibilityReason>;\n\n// rationale for building the post AST this way: originally, the entire post\n// shared one AST; this doesn't suffice when attachments can move around.  the\n// natural way to break the AST down then is per-block, but an inline HTML tag\n// can span multiple blocks, so we need to build spans of contiguous markdown\n// blocks as a unit or else HTML's tag auto-insertion rules kick in.\nexport const PostASTMap = z.object({\n    spans: z.array(\n        z.object({\n            startIndex: z.number(),\n            endIndex: z.number(),\n            ast: z.string(),\n        })\n    ),\n    readMoreIndex: z.number().nullable(),\n});\nexport type PostASTMap = z.infer<typeof PostASTMap>;\n\n// double declaration required due to a typescript limitation with recursive types\n// see: https://github.com/colinhacks/zod#recursive-types\ntype WirePostViewModelInternal = WirePostContentCommon & {\n    blocks: ViewBlock[];\n\n    plainTextBody: string;\n\n    postingProject: WireProjectModel;\n    shareTree: WirePostViewModelInternal[];\n    numSharedComments: number;\n    relatedProjects: WireProjectModel[];\n    singlePostPageUrl: string;\n    effectiveAdultContent: boolean;\n    isEditor: boolean;\n    hasAnyContributorMuted: boolean;\n    contributorBlockIncomingOrOutgoing: boolean;\n    postEditUrl: string;\n    isLiked: boolean;\n    canShare: boolean;\n    canPublish: boolean;\n    limitedVisibilityReason: LimitedVisibilityReason;\n    astMap: PostASTMap;\n\n    responseToAskId: AskId | null;\n};\n\nexport const WirePostViewModel: z.ZodType<WirePostViewModelInternal> = z.lazy(\n    () =>\n        WirePostContentCommon.extend({\n            blocks: ViewBlock.array(),\n            plainTextBody: z.string(),\n            postingProject: WireProjectModel,\n            shareTree: WirePostViewModel.array(),\n            numSharedComments: z.number(),\n            relatedProjects: WireProjectModel.array(),\n            singlePostPageUrl: z.string().url(),\n            effectiveAdultContent: z.boolean(),\n            isEditor: z.boolean(),\n            hasAnyContributorMuted: z.boolean(),\n            contributorBlockIncomingOrOutgoing: z.boolean(),\n            postEditUrl: z.string().url(),\n            isLiked: z.boolean(),\n            canShare: z.boolean(),\n            canPublish: z.boolean(),\n            limitedVisibilityReason: LimitedVisibilityReason,\n            astMap: PostASTMap,\n            responseToAskId: AskId.nullable(),\n        })\n);\nexport type WirePostViewModel = z.infer<typeof WirePostViewModel>;\n\nexport type WireInviteModel = {\n    inviteId: InviteId;\n    userActivationsRemaining: number;\n    createdAt: string;\n    owningUserId: UserId;\n};\n\nexport const WireUserModel = z.object({\n    userId: UserId,\n    email: z.string(),\n    emailVerified: z.boolean(),\n    collapseAdultContent: z.boolean(),\n    isAdult: z.boolean(),\n    twoFactorEnabled: z.boolean(),\n});\n\nexport type WireUserModel = z.infer<typeof WireUserModel>;\n\n//#region Notifications\nexport const WireNotificationType = z.enum([\n    \"like\",\n    \"comment\",\n    \"share\",\n    \"follow\",\n    \"groupedLike\",\n    \"groupedFollow\",\n    \"groupedShare\",\n]);\nexport type WireNotificationType = z.infer<typeof WireNotificationType>;\n\nconst BaseWireNotification = z.object({\n    type: WireNotificationType,\n    createdAt: z.string(),\n    fromProjectId: ProjectId,\n});\n\nconst BaseWireGroupNotification = z.object({\n    type: WireNotificationType,\n    createdAt: z.string(),\n    fromProjectIds: ProjectId.array(),\n    oldestCreatedAt: z.string(),\n});\n\nconst WirePostNotificationCommon = BaseWireNotification.extend({\n    toPostId: PostId,\n});\n\nconst WireGroupPostNotificationCommon = BaseWireGroupNotification.extend({\n    toPostId: PostId,\n});\n\nexport const WireLikeNotification = WirePostNotificationCommon.extend({\n    type: z.literal(\"like\"),\n    relationshipId: RelationshipId,\n});\nexport type WireLikeNotification = z.infer<typeof WireLikeNotification>;\n\nexport const WireGroupedLikeNotification =\n    WireGroupPostNotificationCommon.extend({\n        type: z.literal(\"groupedLike\"),\n        relationshipIds: RelationshipId.array(),\n    });\nexport type WireGroupedLikeNotification = z.infer<\n    typeof WireGroupedLikeNotification\n>;\n\nexport const WireGroupedFollowNotification = BaseWireGroupNotification.extend({\n    type: z.literal(\"groupedFollow\"),\n});\nexport type WireGroupedFollowNotification = z.infer<\n    typeof WireGroupedFollowNotification\n>;\n\nexport const WireGroupedShareNotification =\n    WireGroupPostNotificationCommon.extend({\n        type: z.literal(\"groupedShare\"),\n        transparentShare: z.boolean(),\n        sharePostIds: PostId.array(),\n    });\nexport type WireGroupedShareNotification = z.infer<\n    typeof WireGroupedShareNotification\n>;\n\nexport const WireCommentNotification = WirePostNotificationCommon.extend({\n    type: z.literal(\"comment\"),\n    commentId: CommentId,\n    inReplyTo: CommentId.nullable(),\n});\nexport type WireCommentNotification = z.infer<typeof WireCommentNotification>;\n\nexport const WireShareNotification = WirePostNotificationCommon.extend({\n    type: z.literal(\"share\"),\n    sharePostId: PostId,\n    transparentShare: z.boolean(),\n});\nexport type WireShareNotification = z.infer<typeof WireShareNotification>;\n\nexport const WireFollowNotification = BaseWireNotification.extend({\n    type: z.literal(\"follow\"),\n});\nexport type WireFollowNotification = z.infer<typeof WireFollowNotification>;\n\n// we don't cache group notifications, so we need a separate type that excludes\n// them for redis operations.\nexport const WireUngroupedNotification = z.discriminatedUnion(\"type\", [\n    WireLikeNotification,\n    WireCommentNotification,\n    WireShareNotification,\n    WireFollowNotification,\n]);\nexport type WireUngroupedNotification = z.infer<\n    typeof WireUngroupedNotification\n>;\n\nexport const WireGroupedNotification = z.union([\n    WireGroupedLikeNotification,\n    WireGroupedFollowNotification,\n    WireGroupedShareNotification,\n]);\nexport type WireGroupedNotification = z.infer<typeof WireGroupedNotification>;\n\nexport const WireNotification = z.union([\n    WireUngroupedNotification,\n    WireGroupedNotification,\n]);\n\nexport type WireNotification = z.infer<typeof WireNotification>;\n//#endregion\n\n//#region audit logs\nexport const AuditLogType = z.enum([\n    \"edit_comment\",\n    \"delete_comment\",\n    \"edit_post\",\n    \"edit_project_ugc\",\n    \"edit_project_mod_flags\",\n    \"grant_permission\",\n    \"revoke_permission\",\n    \"add_editor\",\n    \"remove_editor\",\n    \"edit_project_flags\",\n    \"edit_user\",\n    \"2fa_login_failed\",\n    \"2fa_reset\",\n    \"2fa_reset_failed\",\n    \"artist_alley_approved\",\n    \"artist_alley_rejected\",\n    \"artist_alley_mod_edited\",\n]);\nexport type AuditLogType = z.infer<typeof AuditLogType>;\n\nconst BaseWireAuditLogBody = z.object({\n    entryId: z.string(),\n    loggedAt: z.string(),\n});\n\nconst TwoFactorAuditLogBody = BaseWireAuditLogBody.extend({\n    userId: UserId,\n});\n\nconst PermissionWireAuditLogBody = BaseWireAuditLogBody.extend({\n    userId: UserId,\n    permission: Permission,\n    changedBy: UserId,\n    reason: z.string(),\n});\n\nconst EditorshipWireAuditLogBody = BaseWireAuditLogBody.extend({\n    projectId: ProjectId,\n    userId: UserId,\n    changedBy: UserId,\n    reason: z.string(),\n});\n\nconst EditProjectModFlagsAuditLogBody = BaseWireAuditLogBody.extend({\n    projectId: ProjectId,\n    oldAdultContent: z.boolean(),\n    oldAdultContentOverride: z.boolean(),\n    newAdultContent: z.boolean(),\n    newAdultContentOverride: z.boolean(),\n    changedBy: UserId,\n    reason: z.string(),\n});\n\nconst EditProjectFlagsAuditLogBody = BaseWireAuditLogBody.extend({\n    projectId: ProjectId,\n    changedBy: UserId,\n    reason: z.string(),\n    oldFlags: ProjectFlag.array(),\n    newFlags: ProjectFlag.array(),\n});\n\nconst EditUserAuditLogBody = BaseWireAuditLogBody.extend({\n    userId: UserId,\n    oldEmail: z.string(),\n    newEmail: z.string(),\n    oldPendingEmail: z.string().nullable(),\n    newPendingEmail: z.string().nullable(),\n    oldUsername: z.string(),\n    newUsername: z.string(),\n});\n\nconst EditPostAuditLogBody = BaseWireAuditLogBody.extend({\n    postId: PostId,\n    oldHeadline: z.string(),\n    newHeadline: z.string(),\n    oldBlocks: StorageBlock.array(),\n    newBlocks: StorageBlock.array(),\n    oldState: PostStateEnum,\n    newState: PostStateEnum,\n    oldAdultContent: z.boolean().optional(), // types added later, missing from old audit logs\n    newAdultContent: z.boolean().optional(),\n    oldAdultContentOverride: z.boolean().optional(),\n    newAdultContentOverride: z.boolean().optional(),\n    oldCws: z.string().array().optional(),\n    newCws: z.string().array().optional(),\n    oldCommentsLocked: z.boolean().optional(),\n    newCommentsLocked: z.boolean().optional(),\n});\n\nexport const WireAuditLogEntryTypes = {\n    edit_comment: BaseWireAuditLogBody.extend({\n        logType: z.literal(\"edit_comment\"),\n    }),\n    delete_comment: BaseWireAuditLogBody.extend({\n        logType: z.literal(\"delete_comment\"),\n    }),\n    grant_permission: PermissionWireAuditLogBody.extend({\n        logType: z.literal(\"grant_permission\"),\n    }),\n    revoke_permission: PermissionWireAuditLogBody.extend({\n        logType: z.literal(\"revoke_permission\"),\n    }),\n    edit_post: EditPostAuditLogBody.extend({\n        logType: z.literal(\"edit_post\"),\n    }),\n    edit_project_ugc: BaseWireAuditLogBody.extend({\n        logType: z.literal(\"edit_project_ugc\"),\n    }),\n    edit_project_mod_flags: EditProjectModFlagsAuditLogBody.extend({\n        logType: z.literal(\"edit_project_mod_flags\"),\n    }),\n    add_editor: EditorshipWireAuditLogBody.extend({\n        logType: z.literal(\"add_editor\"),\n    }),\n    remove_editor: EditorshipWireAuditLogBody.extend({\n        logType: z.literal(\"remove_editor\"),\n    }),\n    edit_project_flags: EditProjectFlagsAuditLogBody.extend({\n        logType: z.literal(\"edit_project_flags\"),\n    }),\n    edit_user: EditUserAuditLogBody.extend({\n        logType: z.literal(\"edit_user\"),\n    }),\n    \"2fa_login_failed\": TwoFactorAuditLogBody.extend({\n        logType: z.literal(\"2fa_login_failed\"),\n    }),\n    \"2fa_reset\": TwoFactorAuditLogBody.extend({\n        logType: z.literal(\"2fa_reset\"),\n    }),\n    \"2fa_reset_failed\": TwoFactorAuditLogBody.extend({\n        logType: z.literal(\"2fa_reset_failed\"),\n    }),\n    artist_alley_approved: BaseWireAuditLogBody.extend({\n        logType: z.literal(\"artist_alley_approved\"),\n        listingId: ArtistAlleyAdId,\n        changedBy: UserId,\n    }),\n    artist_alley_rejected: BaseWireAuditLogBody.extend({\n        logType: z.literal(\"artist_alley_rejected\"),\n        listingId: ArtistAlleyAdId,\n        changedBy: UserId,\n        rejectionReason: z.string(),\n    }),\n    artist_alley_mod_edited: BaseWireAuditLogBody.extend({\n        logType: z.literal(\"artist_alley_mod_edited\"),\n        listingId: ArtistAlleyAdId,\n        changedBy: UserId,\n    }),\n} as const;\n\nexport type WireAuditLogEntryTypes = {\n    [t in keyof typeof AuditLogType.enum]: z.infer<\n        (typeof WireAuditLogEntryTypes)[t]\n    >;\n};\n\nexport const WireAuditLogEntry = z.discriminatedUnion(\"logType\", [\n    WireAuditLogEntryTypes.edit_comment,\n    WireAuditLogEntryTypes.delete_comment,\n    WireAuditLogEntryTypes.grant_permission,\n    WireAuditLogEntryTypes.revoke_permission,\n    WireAuditLogEntryTypes.edit_post,\n    WireAuditLogEntryTypes.edit_project_ugc,\n    WireAuditLogEntryTypes.add_editor,\n    WireAuditLogEntryTypes.remove_editor,\n]);\n\nexport type WireAuditLogEntry = z.infer<typeof WireAuditLogEntry>;\n//#endregion audit logs\n\nexport const SubscriptionStatus = z.enum([\n    \"active\",\n    \"past_due\",\n    \"unpaid\",\n    \"canceled\",\n    \"incomplete\",\n    \"incomplete_expired\",\n    \"trialing\",\n]);\nexport type SubscriptionStatus = z.infer<typeof SubscriptionStatus>;\n\nexport const WireSubscription = z.object({\n    expirationDate: ISODateString,\n    status: SubscriptionStatus,\n});\nexport type WireSubscription = z.infer<typeof WireSubscription>;\n\nexport const WirePostComposerSettings = z.object({\n    defaultAdultContent: z.boolean(),\n    editingPost: WirePostViewModel.optional(),\n    // everything below this point is currently unsupported but that may change\n    defaultCws: z.string().array(),\n    defaultTags: z.string().array(),\n});\n\nexport const FollowedProjectFeed = z.object({\n    projects: z.array(\n        z.object({\n            project: WireProjectModel,\n            projectPinned: z.boolean(),\n            latestPost: WirePostViewModel.nullable(),\n        })\n    ),\n    nextCursor: z.number().nullable(),\n});\nexport type FollowedProjectFeed = z.infer<typeof FollowedProjectFeed>;\n\nexport const FollowedProjectFeedSortOrder = z.enum([\n    \"recently-posted\",\n    \"followed-asc\",\n    \"followed-desc\",\n    \"alpha-asc\",\n    \"alpha-desc\",\n]);\nexport type FollowedProjectFeedSortOrder = z.infer<\n    typeof FollowedProjectFeedSortOrder\n>;\n","import * as React from \"react\";\n\nfunction ChevronRightIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z\",\n    clipRule: \"evenodd\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ChevronRightIcon);\nexport default ForwardRef;"],"names":["ResponsiveFormlet","title","children","postBoxTheme","useDynamicTheme","React","Disclosure","as","current","className","tw","ChevronRightIcon","z","count","int","NotificationFilters","includeShares","default","includeReplies","includeComments","includeLikes","includeFollows","isNotificationsListRespReady","resp","ready","projects","WireProjectModel","posts","WirePostViewModel","comments","CommentId","WireNotificationCommentViewModel","notifications","WireNotification","nextCursor","titleId","props","svgRef","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","fillRule","clipRule","ActorLink","handle","href","sitemap","projectHandle","toString","onClick","e","stopPropagation","SubjectLink","url","ExpandedGroupedShare","project","notificationType","expandedUrls","Trans","i18nKey","get","projectId","undefined","ActionElement","actorHandle","AttachmentPreview","attachment","processedImageUrl","useMemo","src","previewURL","parsedSrc","URL","searchParams","append","kind","alt","altText","SpeakerWaveIcon","NotificationCard","actionText","summary","firstAttachment","body","type","summaryUrl","Icon","HeartIcon","ChatBubbleOvalLeftEllipsisIcon","ArrowPathIcon","UserPlusIcon","UserGroupIcon","ExclamationCircleIcon","length","ProjectAvatar","noLink","hideLock","Menu","ChevronDownIcon","map","key","Transition","enter","enterFrom","enterTo","leave","leaveTo","leaveFrom","NotificationGroup","date","jsDate","DateTime","timeDiff","diffNow","years","notifViews","flatMap","notification","_extends","dateTime","toISODate","toLocaleString","month","day","weekday","year","getFirstAttachment","post","getAttachmentViewBlocks","blocks","prepareUngroupedNotificationView","t","userInfo","fromProjectId","toPostId","myPost","postingProject","renderPostSummary","slice","relationshipId","singlePostPageUrl","comment","commentId","isReply","inReplyTo","repliedComment","poster","notifSummary","renderSummaryNoHTML","postedAtISO","toJSDate","renderingContext","disableEmbeds","externalLinksInNewTab","hasCohostPlus","filename","sharePost","sharePostId","shareSummary","transparentShareOfPostId","NotificationViews","groupedNotifications","useTranslation","useUserInfo","keys","dateString","notifs","WireGroupedNotification","success","prepareGroupedNotificationView","notifProjects","fromProjectIds","filter","isDefined","ungroupedNotification","createdAt","relationshipIds","sharePostIds","transparentShare","JSON","stringify","Map","values","forEach","set","WireUngroupedNotification","view","toISO","NotificationFilterFormInner","invalidateNotifications","utils","trpc","data","suspense","setNotificationFilters","onMutate","async","notificationFilters","cancel","previousState","getData","parse","setData","onError","err","params","context","onSettled","invalidate","filterSettings","checked","onChange","mutate","target","disabled","isLoading","NotificationsPage","hasNextPage","fetchNextPage","limit","staleTime","Infinity","keepPreviousData","refetchInterval","query","pages","some","getNextPageParam","lastPage","isServer","useSSR","readyPages","reduce","collector","curr","notif","zone","push","isReady","useCallback","list","Helmet","SidebarMenu","AuthnButton","path","eggbox","WirePostContentCommon","postId","PostId","headline","publishedAt","optional","shareOfPostId","state","PostStateEnum","numComments","cws","array","tags","pinned","commentsLocked","sharesLocked","Permission","extend","adultContent","updatedAt","StorageBlock","attachments","attachmentId","AttachmentId","adultContentOverride","ProjectId","canInteract","AccessResultEnum","canEdit","canHide","deleted","hidden","WireCommentViewModel","ISODateString","LimitedVisibilityReason","initial","expanded","PostASTMap","spans","startIndex","endIndex","ast","readMoreIndex","nullable","ViewBlock","plainTextBody","shareTree","numSharedComments","relatedProjects","effectiveAdultContent","isEditor","hasAnyContributorMuted","contributorBlockIncomingOrOutgoing","postEditUrl","isLiked","canShare","canPublish","limitedVisibilityReason","astMap","responseToAskId","AskId","WireNotificationType","userId","UserId","email","emailVerified","collapseAdultContent","isAdult","twoFactorEnabled","BaseWireNotification","BaseWireGroupNotification","oldestCreatedAt","WirePostNotificationCommon","WireGroupPostNotificationCommon","WireLikeNotification","RelationshipId","WireGroupedLikeNotification","WireGroupedFollowNotification","WireGroupedShareNotification","WireCommentNotification","WireShareNotification","WireFollowNotification","BaseWireAuditLogBody","entryId","loggedAt","TwoFactorAuditLogBody","PermissionWireAuditLogBody","permission","changedBy","reason","EditorshipWireAuditLogBody","EditProjectModFlagsAuditLogBody","oldAdultContent","oldAdultContentOverride","newAdultContent","newAdultContentOverride","EditProjectFlagsAuditLogBody","oldFlags","ProjectFlag","newFlags","EditUserAuditLogBody","oldEmail","newEmail","oldPendingEmail","newPendingEmail","oldUsername","newUsername","EditPostAuditLogBody","oldHeadline","newHeadline","oldBlocks","newBlocks","oldState","newState","oldCws","newCws","oldCommentsLocked","newCommentsLocked","WireAuditLogEntryTypes","edit_comment","logType","delete_comment","grant_permission","revoke_permission","edit_post","edit_project_ugc","edit_project_mod_flags","add_editor","remove_editor","edit_project_flags","edit_user","artist_alley_approved","listingId","ArtistAlleyAdId","artist_alley_rejected","rejectionReason","artist_alley_mod_edited","SubscriptionStatus","expirationDate","status","defaultAdultContent","editingPost","defaultCws","defaultTags","projectPinned","latestPost","ForwardRef"],"sourceRoot":""}