{"version":3,"file":"client-preact-components-pages-moderation-manage-page-mod-flags.b478f55cecb7fd67f5f4.js","mappings":"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","sources":["webpack:///./preact/components/elements/button.tsx","webpack:///./preact/components/pages/moderation/manage-page.mod-flags.tsx"],"sourcesContent":["import classnames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { z } from \"zod\";\n\nexport const ButtonStyle = z.enum([\"pill\", \"roundrect\", \"authn\"]);\nexport type ButtonStyle = z.infer<typeof ButtonStyle>;\n\nexport const ButtonColor = z.enum([\n    \"cherry\",\n    \"strawberry\",\n    \"mango\",\n    \"not-black\",\n    \"red\",\n    \"green\",\n    \"accent\",\n    \"secondary\",\n    \"authn-primary\",\n    \"authn-other\",\n]);\nexport type ButtonColor = z.infer<typeof ButtonColor>;\n\nexport const SharedProps = z.object({\n    buttonStyle: ButtonStyle,\n    color: ButtonColor,\n    className: z.string().optional(),\n});\nexport type SharedProps = z.infer<typeof SharedProps>;\n\nconst baseColors = classnames(\"bg-notWhite\", \"hover:text-notWhite\");\n\n// WHY NOT HAVE THESE AS INTERPOLATED CLASS NAMES?\n// tailwind jit doesn't handle interpolated class names!\n// you have to have the full class name written for it to pick up on a string as\n// a class name! so we do this\nconst pillClasses = classnames(\n    \"font-atkinson\",\n    \"font-bold\",\n    \"rounded-full\",\n    \"border-2\"\n);\n\nconst roundrectClasses = classnames(\"body-2\", \"rounded-lg\");\n\nconst authnStyleClasses = classnames(\n    \"flex\",\n    \"h-12\",\n    \"items-center\",\n    \"justify-center\",\n    \"rounded-lg\",\n    \"px-6\",\n    \"text-lg\"\n);\n\nconst cherryClasses = classnames(\n    \"border-cherry\",\n    \"hover:bg-cherry\",\n    \"text-cherry\",\n    \"active:bg-cherry-600\",\n    \"active:border-cherry-600\",\n    \"disabled:text-cherry-300\",\n    \"disabled:border-cherry-300\",\n    \"focus:outline-cherry\",\n    \"focus:ring-cherry\",\n    baseColors\n);\nconst strawberryClasses = classnames(\n    \"border-strawberry\",\n    \"hover:bg-strawberry\",\n    \"text-strawberry\",\n    \"active:bg-strawberry-600\",\n    \"active:border-strawberry-600\",\n    \"disabled:text-strawberry-300\",\n    \"disabled:border-strawberry-300\",\n    \"focus:outline-strawberry\",\n    \"focus:ring-strawberry\",\n    baseColors\n);\n\nconst redClasses = classnames(\n    \"border-red\",\n    \"hover:bg-red\",\n    \"text-red\",\n    \"active:bg-red-600\",\n    \"active:border-red-600\",\n    \"disabled:text-red-300\",\n    \"disabled:border-red-300\",\n    \"focus:outline-red\",\n    baseColors\n);\n\nconst greenClasses = classnames(\n    \"border-green\",\n    \"hover:bg-green\",\n    \"text-green\",\n    \"active:bg-green-600\",\n    \"active:border-green-600\",\n    \"disabled:text-green-300\",\n    \"disabled:border-green-300\",\n    \"focus:outline-green\",\n    baseColors\n);\nconst mangoClasses = classnames(\n    \"border-mango\",\n    \"hover:bg-mango\",\n    \"text-mango\",\n    \"bg-notBlack\",\n    \"hover:text-notBlack\"\n);\nconst notBlackClasses = classnames(\n    \"border-notBlack\",\n    \"hover:bg-notBlack\",\n    \"text-notBlack\",\n    \"focus:outline-notBlack\",\n    \"focus:ring-notBlack\",\n    baseColors\n);\n\nconst accentClasses = classnames(\n    \"border-accent\",\n    \"text-accent\",\n    \"bg-foreground\",\n    \"hover:bg-accent\",\n    \"hover:text-text\"\n);\n\nconst secondaryClasses = classnames(\n    \"bg-secondary\",\n    \"text-notWhite\",\n    \"dark:text-notBlack\",\n    \"hover:bg-secondary-600\"\n);\n\nconst authnPrimaryColorClasses = classnames(\n    \"bg-foreground\",\n    \"text-text\",\n    \"hover:bg-foreground-600\",\n    \"active:bg-foreground-700\",\n    \"disabled:bg-foreground-200\"\n);\n\nconst authnOtherColorClasses = classnames(\n    \"border-2\",\n    \"border-foreground\",\n    \"text-foreground\",\n    \"hover:bg-longan-200\"\n);\n\nconst sharedClasses = (props: SharedProps) =>\n    classnames(\n        \"leading-none\",\n        \"align-middle\",\n        \"py-2\",\n        \"px-4\",\n        \"no-select\",\n        props.className,\n        {\n            [pillClasses]: props.buttonStyle === \"pill\",\n            [roundrectClasses]: props.buttonStyle === \"roundrect\",\n            [authnStyleClasses]: props.buttonStyle === \"authn\",\n            [cherryClasses]: props.color === \"cherry\",\n            [strawberryClasses]: props.color === \"strawberry\",\n            [mangoClasses]: props.color === \"mango\",\n            [notBlackClasses]: props.color === \"not-black\",\n            [redClasses]: props.color === \"red\",\n            [accentClasses]: props.color === \"accent\",\n            [greenClasses]: props.color === \"green\",\n            [secondaryClasses]: props.color === \"secondary\",\n            [authnPrimaryColorClasses]: props.color === \"authn-primary\",\n            [authnOtherColorClasses]: props.color === \"authn-other\",\n        }\n    );\n\nexport const Button: FunctionComponent<\n    SharedProps &\n        React.ButtonHTMLAttributes<HTMLButtonElement> & {\n            ref?: React.Ref<HTMLButtonElement>;\n        }\n> = React.forwardRef(({ buttonStyle, color, className, ...props }, ref) => {\n    const classes = sharedClasses({\n        buttonStyle,\n        color,\n        className,\n        ...props,\n    });\n    return (\n        <button {...props} className={classes} ref={ref}>\n            {props.children}\n        </button>\n    );\n});\nButton.displayName = \"Button\";\n\nexport const LinkButton: FunctionComponent<\n    SharedProps &\n        React.AnchorHTMLAttributes<HTMLAnchorElement> & {\n            ref?: React.Ref<HTMLAnchorElement>;\n        }\n> = React.forwardRef(({ buttonStyle, color, ...props }, ref) => {\n    const classes = sharedClasses({ buttonStyle, color, ...props });\n    return (\n        <a {...props} className={classes} ref={ref}>\n            {props.children}\n        </a>\n    );\n});\nLinkButton.displayName = \"LinkButton\";\n","import { trpc } from \"@/client/lib/trpc\";\nimport { Button } from \"@/client/preact/components/elements/button\";\nimport { ProjectHandle } from \"@/shared/types/ids\";\nimport React, { FunctionComponent } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { type ManagePageProps } from \"./manage-page\";\n\nconst useModFlags = (projectHandle: ProjectHandle) => {\n    const results = trpc.projects.modFlags.query.useQuery({ projectHandle });\n    return {\n        isFetched: results.isFetched,\n        projectId: results.data?.projectId,\n        adultContent: results.data?.adultContent,\n        adultContentOverride: results.data?.adultContentOverride,\n    };\n};\n\ntype ModFlagOperation =\n    | \"clear-adult-content\"\n    | \"set-adult-content\"\n    | \"clear-adult-content-override\"\n    | \"set-adult-content-override\";\ntype Inputs = {\n    reason: string;\n    operation: ModFlagOperation;\n};\n\nexport const ModFlags: FunctionComponent<ManagePageProps> = ({ project }) => {\n    const { register, handleSubmit, setValue } = useForm<Inputs>();\n    const modFlags = useModFlags(project.handle);\n    const mutation = trpc.projects.modFlags.mutate.useMutation();\n\n    const onSubmit: SubmitHandler<Inputs> = (data) => {\n        try {\n            const payload: {\n                projectHandle: ProjectHandle;\n                reason: string;\n                adultContent?: boolean;\n                adultContentOverride?: boolean;\n            } = {\n                reason: data.reason,\n                projectHandle: project.handle,\n            };\n\n            switch (data.operation) {\n                case \"clear-adult-content\":\n                    payload.adultContent = false;\n                    break;\n                case \"set-adult-content\":\n                    payload.adultContent = true;\n                    break;\n                case \"set-adult-content-override\":\n                    payload.adultContentOverride = true;\n                    break;\n                case \"clear-adult-content-override\":\n                    payload.adultContentOverride = false;\n                    break;\n            }\n\n            mutation.mutate(payload);\n        } finally {\n            location.reload();\n        }\n    };\n\n    const onButtonClicked = (operation: ModFlagOperation) => {\n        setValue(\"operation\", operation);\n        handleSubmit(onSubmit);\n    };\n\n    return (\n        <div className=\"max-w-fit gap-2 rounded-lg border border-accent p-3\">\n            <h4 className=\"h4\">moderation flags</h4>\n\n            {modFlags.isFetched ? (\n                <form\n                    className=\"flex flex-col\"\n                    onSubmit={handleSubmit(onSubmit)}\n                >\n                    <p>\n                        adult content:{\" \"}\n                        {modFlags.adultContent?.toString() ?? \"loading...\"}\n                    </p>\n\n                    <p>\n                        adult content override:{\" \"}\n                        {modFlags.adultContentOverride?.toString() ??\n                            \"loading...\"}\n                    </p>\n\n                    {modFlags.adultContent ? (\n                        <Button\n                            buttonStyle=\"pill\"\n                            color=\"cherry\"\n                            onClick={() =>\n                                onButtonClicked(\"clear-adult-content\")\n                            }\n                            className=\"w-fit\"\n                        >\n                            set adult content flag to false\n                        </Button>\n                    ) : (\n                        <Button\n                            buttonStyle=\"pill\"\n                            color=\"cherry\"\n                            onClick={() => onButtonClicked(\"set-adult-content\")}\n                            className=\"w-fit\"\n                        >\n                            set adult content flag to true\n                        </Button>\n                    )}\n                    {modFlags.adultContentOverride ? (\n                        <Button\n                            buttonStyle=\"pill\"\n                            color=\"cherry\"\n                            onClick={() =>\n                                onButtonClicked(\"clear-adult-content-override\")\n                            }\n                            className=\"w-fit\"\n                        >\n                            set adult content override to false\n                        </Button>\n                    ) : (\n                        <Button\n                            buttonStyle=\"pill\"\n                            color=\"cherry\"\n                            onClick={() =>\n                                onButtonClicked(\"set-adult-content-override\")\n                            }\n                            className=\"w-fit\"\n                        >\n                            set adult content override to true\n                        </Button>\n                    )}\n\n                    <p>\n                        reason for making change:\n                        <textarea {...register(\"reason\", { required: true })} />\n                    </p>\n                </form>\n            ) : (\n                <>(loading current state)</>\n            )}\n        </div>\n    );\n};\n"],"names":["ButtonStyle","z","ButtonColor","baseColors","buttonStyle","color","className","optional","classnames","pillClasses","roundrectClasses","authnStyleClasses","cherryClasses","strawberryClasses","redClasses","greenClasses","mangoClasses","notBlackClasses","accentClasses","secondaryClasses","authnPrimaryColorClasses","authnOtherColorClasses","sharedClasses","props","Button","React","ref","classes","_extends","children","displayName","LinkButton","ModFlags","project","register","handleSubmit","setValue","useForm","modFlags","projectHandle","results","trpc","isFetched","projectId","data","adultContent","adultContentOverride","useModFlags","handle","mutation","onSubmit","payload","reason","operation","mutate","location","reload","onButtonClicked","toString","onClick","required"],"sourceRoot":""}