{"version":3,"file":"client-preact-components-pages-inbox.e310c1bd054d44399d42.js","mappings":"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","sources":["webpack:///./preact/components/elements/button.tsx","webpack:///./preact/components/pages/inbox.tsx"],"sourcesContent":["import classnames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { z } from \"zod\";\n\nexport const ButtonStyle = z.enum([\"pill\", \"roundrect\", \"authn\"]);\nexport type ButtonStyle = z.infer<typeof ButtonStyle>;\n\nexport const ButtonColor = z.enum([\n    \"cherry\",\n    \"strawberry\",\n    \"mango\",\n    \"not-black\",\n    \"red\",\n    \"green\",\n    \"accent\",\n    \"secondary\",\n    \"authn-primary\",\n    \"authn-other\",\n]);\nexport type ButtonColor = z.infer<typeof ButtonColor>;\n\nexport const SharedProps = z.object({\n    buttonStyle: ButtonStyle,\n    color: ButtonColor,\n    className: z.string().optional(),\n});\nexport type SharedProps = z.infer<typeof SharedProps>;\n\nconst baseColors = classnames(\"bg-notWhite\", \"hover:text-notWhite\");\n\n// WHY NOT HAVE THESE AS INTERPOLATED CLASS NAMES?\n// tailwind jit doesn't handle interpolated class names!\n// you have to have the full class name written for it to pick up on a string as\n// a class name! so we do this\nconst pillClasses = classnames(\n    \"font-atkinson\",\n    \"font-bold\",\n    \"rounded-full\",\n    \"border-2\"\n);\n\nconst roundrectClasses = classnames(\"body-2\", \"rounded-lg\");\n\nconst authnStyleClasses = classnames(\n    \"flex\",\n    \"h-12\",\n    \"items-center\",\n    \"justify-center\",\n    \"rounded-lg\",\n    \"px-6\",\n    \"text-lg\"\n);\n\nconst cherryClasses = classnames(\n    \"border-cherry\",\n    \"hover:bg-cherry\",\n    \"text-cherry\",\n    \"active:bg-cherry-600\",\n    \"active:border-cherry-600\",\n    \"disabled:text-cherry-300\",\n    \"disabled:border-cherry-300\",\n    \"focus:outline-cherry\",\n    \"focus:ring-cherry\",\n    baseColors\n);\nconst strawberryClasses = classnames(\n    \"border-strawberry\",\n    \"hover:bg-strawberry\",\n    \"text-strawberry\",\n    \"active:bg-strawberry-600\",\n    \"active:border-strawberry-600\",\n    \"disabled:text-strawberry-300\",\n    \"disabled:border-strawberry-300\",\n    \"focus:outline-strawberry\",\n    \"focus:ring-strawberry\",\n    baseColors\n);\n\nconst redClasses = classnames(\n    \"border-red\",\n    \"hover:bg-red\",\n    \"text-red\",\n    \"active:bg-red-600\",\n    \"active:border-red-600\",\n    \"disabled:text-red-300\",\n    \"disabled:border-red-300\",\n    \"focus:outline-red\",\n    baseColors\n);\n\nconst greenClasses = classnames(\n    \"border-green\",\n    \"hover:bg-green\",\n    \"text-green\",\n    \"active:bg-green-600\",\n    \"active:border-green-600\",\n    \"disabled:text-green-300\",\n    \"disabled:border-green-300\",\n    \"focus:outline-green\",\n    baseColors\n);\nconst mangoClasses = classnames(\n    \"border-mango\",\n    \"hover:bg-mango\",\n    \"text-mango\",\n    \"bg-notBlack\",\n    \"hover:text-notBlack\"\n);\nconst notBlackClasses = classnames(\n    \"border-notBlack\",\n    \"hover:bg-notBlack\",\n    \"text-notBlack\",\n    \"focus:outline-notBlack\",\n    \"focus:ring-notBlack\",\n    baseColors\n);\n\nconst accentClasses = classnames(\n    \"border-accent\",\n    \"text-accent\",\n    \"bg-foreground\",\n    \"hover:bg-accent\",\n    \"hover:text-text\"\n);\n\nconst secondaryClasses = classnames(\n    \"bg-secondary\",\n    \"text-notWhite\",\n    \"dark:text-notBlack\",\n    \"hover:bg-secondary-600\"\n);\n\nconst authnPrimaryColorClasses = classnames(\n    \"bg-foreground\",\n    \"text-text\",\n    \"hover:bg-foreground-600\",\n    \"active:bg-foreground-700\",\n    \"disabled:bg-foreground-200\"\n);\n\nconst authnOtherColorClasses = classnames(\n    \"border-2\",\n    \"border-foreground\",\n    \"text-foreground\",\n    \"hover:bg-longan-200\"\n);\n\nconst sharedClasses = (props: SharedProps) =>\n    classnames(\n        \"leading-none\",\n        \"align-middle\",\n        \"py-2\",\n        \"px-4\",\n        \"no-select\",\n        props.className,\n        {\n            [pillClasses]: props.buttonStyle === \"pill\",\n            [roundrectClasses]: props.buttonStyle === \"roundrect\",\n            [authnStyleClasses]: props.buttonStyle === \"authn\",\n            [cherryClasses]: props.color === \"cherry\",\n            [strawberryClasses]: props.color === \"strawberry\",\n            [mangoClasses]: props.color === \"mango\",\n            [notBlackClasses]: props.color === \"not-black\",\n            [redClasses]: props.color === \"red\",\n            [accentClasses]: props.color === \"accent\",\n            [greenClasses]: props.color === \"green\",\n            [secondaryClasses]: props.color === \"secondary\",\n            [authnPrimaryColorClasses]: props.color === \"authn-primary\",\n            [authnOtherColorClasses]: props.color === \"authn-other\",\n        }\n    );\n\nexport const Button: FunctionComponent<\n    SharedProps &\n        React.ButtonHTMLAttributes<HTMLButtonElement> & {\n            ref?: React.Ref<HTMLButtonElement>;\n        }\n> = React.forwardRef(({ buttonStyle, color, className, ...props }, ref) => {\n    const classes = sharedClasses({\n        buttonStyle,\n        color,\n        className,\n        ...props,\n    });\n    return (\n        <button {...props} className={classes} ref={ref}>\n            {props.children}\n        </button>\n    );\n});\nButton.displayName = \"Button\";\n\nexport const LinkButton: FunctionComponent<\n    SharedProps &\n        React.AnchorHTMLAttributes<HTMLAnchorElement> & {\n            ref?: React.Ref<HTMLAnchorElement>;\n        }\n> = React.forwardRef(({ buttonStyle, color, ...props }, ref) => {\n    const classes = sharedClasses({ buttonStyle, color, ...props });\n    return (\n        <a {...props} className={classes} ref={ref}>\n            {props.children}\n        </a>\n    );\n});\nLinkButton.displayName = \"LinkButton\";\n","import { trpc } from \"@/client/lib/trpc\";\nimport { WireAskModel } from \"@/shared/types/asks\";\nimport { TRPCClientError } from \"@trpc/client\";\nimport React, {\n    FunctionComponent,\n    useCallback,\n    useEffect,\n    useState,\n} from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useCurrentProject } from \"../../hooks/data-loaders\";\nimport { useUserInfo } from \"../../providers/user-info-provider\";\nimport { useModalPostComposer } from \"../modal-post-composer-context\";\nimport { AskInboxPreview } from \"../partials/ask-inbox-preview\";\nimport { SidebarMenu } from \"../sidebar-menu\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"../elements/button\";\nimport { useDisplayPrefs } from \"../../hooks/use-display-prefs\";\nimport sitemap from \"@/shared/sitemap\";\nimport { ProjectHandle } from \"@/shared/types/ids\";\nimport { SimpleModalDialog } from \"../elements/simple-modal-dialog\";\n\nexport const InboxPage: FunctionComponent = () => {\n    const { loggedIn } = useUserInfo();\n    const utils = trpc.useContext();\n    const askResp = trpc.asks.listPending.useInfiniteQuery(\n        {},\n        {\n            staleTime: 1000 * 60 * 5,\n            suspense: true,\n            enabled: loggedIn,\n            onSettled: async () => {\n                await utils.asks.unreadCount.invalidate();\n            },\n            getNextPageParam: (lastPage) => lastPage.nextCursor,\n        }\n    );\n    const pages = askResp.data?.pages ?? [];\n    const currentProject = useCurrentProject();\n    const modalPostComposer = useModalPostComposer();\n    useEffect(() => {\n        if (currentProject) {\n            modalPostComposer.setup({\n                project: currentProject,\n            });\n        }\n    }, [currentProject, modalPostComposer]);\n    return (\n        <main className=\"w-full pb-16 pt-16\">\n            <div className=\"container mx-auto grid grid-cols-1 gap-16 lg:grid-cols-4\">\n                <SidebarMenu />\n                <section className=\"col-span-1 flex flex-col gap-12 lg:col-span-2\">\n                    <div className=\"flex flex-col gap-8 p-3\">\n                        <h1 className=\"text-4xl font-bold text-bgText\">\n                            inbox\n                        </h1>\n                        {pages.map((page) => (\n                            <>\n                                {page.asks.map((ask) => (\n                                    <AskListing key={ask.askId} ask={ask} />\n                                ))}\n                            </>\n                        ))}\n                        {askResp.hasNextPage && (\n                            <Button\n                                buttonStyle=\"authn\"\n                                color=\"authn-primary\"\n                                onClick={async () => {\n                                    await askResp.fetchNextPage();\n                                }}\n                            >\n                                load more\n                            </Button>\n                        )}\n                    </div>\n                </section>\n            </div>\n        </main>\n    );\n};\n\nconst RejectAskDialog: FunctionComponent<{\n    ask: WireAskModel;\n    isOpen: boolean;\n    onClose: () => void;\n}> = ({ ask, isOpen, onClose }) => {\n    const { t } = useTranslation();\n    const utils = trpc.useContext();\n    const rejectAskMutation = trpc.asks.reject.useMutation({\n        onSettled: async () => {\n            await utils.asks.listPending.invalidate();\n        },\n    });\n    const rejectAsk = useCallback(() => {\n        onClose();\n        toast\n            .promise(rejectAskMutation.mutateAsync(ask.askId), {\n                loading: \"Rejecting ask...\",\n                success: \"Ask rejected!\",\n                error: (err) => {\n                    console.error(err);\n                    if (err instanceof TRPCClientError) {\n                        return err.message;\n                    }\n                    return \"Failed to reject ask\";\n                },\n            })\n            .catch((_) => null);\n    }, [ask.askId, onClose, rejectAskMutation]);\n\n    return (\n        <SimpleModalDialog\n            isOpen={isOpen}\n            title={t(\"client:reject-ask.confirm-title\", \"Reject this ask\")}\n            body={t(\n                \"client:reject-ask.confirm-message\",\n                \"Are you sure you want to reject this ask? This cannot be undone.\"\n            )}\n            confirm={{\n                label: t(\"common:reject\", \"reject\"),\n                color: \"destructive\",\n            }}\n            cancel={{\n                label: t(\"common:cancel\"),\n            }}\n            onConfirm={rejectAsk}\n            onCancel={onClose}\n        />\n    );\n};\n\nconst AskListing: FunctionComponent<{ ask: WireAskModel }> = ({ ask }) => {\n    const modalPostComposer = useModalPostComposer();\n    const utils = trpc.useContext();\n\n    const onResponsePosted = useCallback(() => {\n        void utils.asks.listPending.invalidate();\n    }, [utils.asks.listPending]);\n\n    const [rejectAskDialogOpen, setRejectAskDialogOpen] = useState(false);\n\n    const { disableModalPostComposer } = useDisplayPrefs();\n\n    const onClickRespond = useCallback<\n        React.MouseEventHandler<HTMLAnchorElement>\n    >(\n        (e) => {\n            if (disableModalPostComposer) {\n                return;\n            }\n\n            if (e.ctrlKey || e.metaKey || e.button === 3) {\n                // ctrl/cmd/middle click: user wants this to open in a new\n                // tab, treat it as a link.\n                return;\n            }\n\n            e.preventDefault();\n            modalPostComposer.activate({\n                responseToAskId: ask.askId,\n                onPost: onResponsePosted,\n            });\n        },\n        [\n            ask.askId,\n            disableModalPostComposer,\n            modalPostComposer,\n            onResponsePosted,\n        ]\n    );\n\n    const currentProject = useCurrentProject();\n\n    return (\n        <div>\n            <RejectAskDialog\n                ask={ask}\n                isOpen={rejectAskDialogOpen}\n                onClose={() => setRejectAskDialogOpen(false)}\n            />\n            <AskInboxPreview ask={ask}>\n                <button\n                    onClick={() => setRejectAskDialogOpen(true)}\n                    className=\"cursor-pointer text-sm text-gray-400 hover:underline\"\n                >\n                    reject\n                </button>\n\n                <a\n                    onClick={onClickRespond}\n                    href={sitemap.public.project\n                        .composePost({\n                            projectHandle:\n                                currentProject?.handle ?? (\"\" as ProjectHandle),\n                            responseToAskId: ask.askId,\n                        })\n                        .toString()}\n                    className=\"cursor-pointer text-sm text-gray-400 hover:underline\"\n                >\n                    respond\n                </a>\n            </AskInboxPreview>\n        </div>\n    );\n};\n\nexport default InboxPage;\n"],"names":["ButtonStyle","z","ButtonColor","baseColors","buttonStyle","color","className","optional","classnames","pillClasses","roundrectClasses","authnStyleClasses","cherryClasses","strawberryClasses","redClasses","greenClasses","mangoClasses","notBlackClasses","accentClasses","secondaryClasses","authnPrimaryColorClasses","authnOtherColorClasses","sharedClasses","props","Button","React","ref","classes","_extends","children","displayName","LinkButton","InboxPage","loggedIn","useUserInfo","utils","trpc","askResp","staleTime","suspense","enabled","onSettled","async","asks","unreadCount","invalidate","getNextPageParam","lastPage","nextCursor","pages","data","currentProject","useCurrentProject","modalPostComposer","useModalPostComposer","useEffect","setup","project","SidebarMenu","map","page","ask","AskListing","key","askId","hasNextPage","onClick","fetchNextPage","RejectAskDialog","isOpen","onClose","t","useTranslation","rejectAskMutation","listPending","rejectAsk","useCallback","toast","mutateAsync","loading","success","error","err","console","TRPCClientError","message","catch","_","SimpleModalDialog","title","body","confirm","label","cancel","onConfirm","onCancel","onResponsePosted","rejectAskDialogOpen","setRejectAskDialogOpen","useState","disableModalPostComposer","useDisplayPrefs","onClickRespond","e","ctrlKey","metaKey","button","preventDefault","activate","responseToAskId","onPost","AskInboxPreview","href","sitemap","projectHandle","handle","toString"],"sourceRoot":""}