{"version":3,"file":"client-preact-components-pages-moderation-manage-user-manage-permissions.ecd459bb776a6f38624c.js","mappings":"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","sources":["webpack:///./preact/components/elements/button.tsx","webpack:///./preact/components/pages/moderation/manage-user.manage-permissions.tsx","webpack:///../shared/types/wire-models.ts"],"sourcesContent":["import classnames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { z } from \"zod\";\n\nexport const ButtonStyle = z.enum([\"pill\", \"roundrect\", \"authn\"]);\nexport type ButtonStyle = z.infer<typeof ButtonStyle>;\n\nexport const ButtonColor = z.enum([\n    \"cherry\",\n    \"strawberry\",\n    \"mango\",\n    \"not-black\",\n    \"red\",\n    \"green\",\n    \"accent\",\n    \"secondary\",\n    \"authn-primary\",\n    \"authn-other\",\n]);\nexport type ButtonColor = z.infer<typeof ButtonColor>;\n\nexport const SharedProps = z.object({\n    buttonStyle: ButtonStyle,\n    color: ButtonColor,\n    className: z.string().optional(),\n});\nexport type SharedProps = z.infer<typeof SharedProps>;\n\nconst baseColors = classnames(\"bg-notWhite\", \"hover:text-notWhite\");\n\n// WHY NOT HAVE THESE AS INTERPOLATED CLASS NAMES?\n// tailwind jit doesn't handle interpolated class names!\n// you have to have the full class name written for it to pick up on a string as\n// a class name! so we do this\nconst pillClasses = classnames(\n    \"font-atkinson\",\n    \"font-bold\",\n    \"rounded-full\",\n    \"border-2\"\n);\n\nconst roundrectClasses = classnames(\"body-2\", \"rounded-lg\");\n\nconst authnStyleClasses = classnames(\n    \"flex\",\n    \"h-12\",\n    \"items-center\",\n    \"justify-center\",\n    \"rounded-lg\",\n    \"px-6\",\n    \"text-lg\"\n);\n\nconst cherryClasses = classnames(\n    \"border-cherry\",\n    \"hover:bg-cherry\",\n    \"text-cherry\",\n    \"active:bg-cherry-600\",\n    \"active:border-cherry-600\",\n    \"disabled:text-cherry-300\",\n    \"disabled:border-cherry-300\",\n    \"focus:outline-cherry\",\n    \"focus:ring-cherry\",\n    baseColors\n);\nconst strawberryClasses = classnames(\n    \"border-strawberry\",\n    \"hover:bg-strawberry\",\n    \"text-strawberry\",\n    \"active:bg-strawberry-600\",\n    \"active:border-strawberry-600\",\n    \"disabled:text-strawberry-300\",\n    \"disabled:border-strawberry-300\",\n    \"focus:outline-strawberry\",\n    \"focus:ring-strawberry\",\n    baseColors\n);\n\nconst redClasses = classnames(\n    \"border-red\",\n    \"hover:bg-red\",\n    \"text-red\",\n    \"active:bg-red-600\",\n    \"active:border-red-600\",\n    \"disabled:text-red-300\",\n    \"disabled:border-red-300\",\n    \"focus:outline-red\",\n    baseColors\n);\n\nconst greenClasses = classnames(\n    \"border-green\",\n    \"hover:bg-green\",\n    \"text-green\",\n    \"active:bg-green-600\",\n    \"active:border-green-600\",\n    \"disabled:text-green-300\",\n    \"disabled:border-green-300\",\n    \"focus:outline-green\",\n    baseColors\n);\nconst mangoClasses = classnames(\n    \"border-mango\",\n    \"hover:bg-mango\",\n    \"text-mango\",\n    \"bg-notBlack\",\n    \"hover:text-notBlack\"\n);\nconst notBlackClasses = classnames(\n    \"border-notBlack\",\n    \"hover:bg-notBlack\",\n    \"text-notBlack\",\n    \"focus:outline-notBlack\",\n    \"focus:ring-notBlack\",\n    baseColors\n);\n\nconst accentClasses = classnames(\n    \"border-accent\",\n    \"text-accent\",\n    \"bg-foreground\",\n    \"hover:bg-accent\",\n    \"hover:text-text\"\n);\n\nconst secondaryClasses = classnames(\n    \"bg-secondary\",\n    \"text-notWhite\",\n    \"dark:text-notBlack\",\n    \"hover:bg-secondary-600\"\n);\n\nconst authnPrimaryColorClasses = classnames(\n    \"bg-foreground\",\n    \"text-text\",\n    \"hover:bg-foreground-600\",\n    \"active:bg-foreground-700\",\n    \"disabled:bg-foreground-200\"\n);\n\nconst authnOtherColorClasses = classnames(\n    \"border-2\",\n    \"border-foreground\",\n    \"text-foreground\",\n    \"hover:bg-longan-200\"\n);\n\nconst sharedClasses = (props: SharedProps) =>\n    classnames(\n        \"leading-none\",\n        \"align-middle\",\n        \"py-2\",\n        \"px-4\",\n        \"no-select\",\n        props.className,\n        {\n            [pillClasses]: props.buttonStyle === \"pill\",\n            [roundrectClasses]: props.buttonStyle === \"roundrect\",\n            [authnStyleClasses]: props.buttonStyle === \"authn\",\n            [cherryClasses]: props.color === \"cherry\",\n            [strawberryClasses]: props.color === \"strawberry\",\n            [mangoClasses]: props.color === \"mango\",\n            [notBlackClasses]: props.color === \"not-black\",\n            [redClasses]: props.color === \"red\",\n            [accentClasses]: props.color === \"accent\",\n            [greenClasses]: props.color === \"green\",\n            [secondaryClasses]: props.color === \"secondary\",\n            [authnPrimaryColorClasses]: props.color === \"authn-primary\",\n            [authnOtherColorClasses]: props.color === \"authn-other\",\n        }\n    );\n\nexport const Button: FunctionComponent<\n    SharedProps &\n        React.ButtonHTMLAttributes<HTMLButtonElement> & {\n            ref?: React.Ref<HTMLButtonElement>;\n        }\n> = React.forwardRef(({ buttonStyle, color, className, ...props }, ref) => {\n    const classes = sharedClasses({\n        buttonStyle,\n        color,\n        className,\n        ...props,\n    });\n    return (\n        <button {...props} className={classes} ref={ref}>\n            {props.children}\n        </button>\n    );\n});\nButton.displayName = \"Button\";\n\nexport const LinkButton: FunctionComponent<\n    SharedProps &\n        React.AnchorHTMLAttributes<HTMLAnchorElement> & {\n            ref?: React.Ref<HTMLAnchorElement>;\n        }\n> = React.forwardRef(({ buttonStyle, color, ...props }, ref) => {\n    const classes = sharedClasses({ buttonStyle, color, ...props });\n    return (\n        <a {...props} className={classes} ref={ref}>\n            {props.children}\n        </a>\n    );\n});\nLinkButton.displayName = \"LinkButton\";\n","import { Button } from \"@/client/preact/components/elements/button\";\nimport { GrantOrRevokePermissionReq } from \"@/shared/api-types/moderation-v1\";\nimport sitemap from \"@/shared/sitemap\";\nimport { Permission, WireUserModel } from \"@/shared/types/wire-models\";\nimport axios, { AxiosResponse } from \"axios\";\nimport React, { FunctionComponent } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\n\ntype Inputs = {\n    action: \"grant\" | \"revoke\";\n    permission: Permission;\n    reason: string;\n};\n\nexport const ManagePermissionsForm: FunctionComponent<{\n    user: WireUserModel;\n    permissions: Permission[];\n}> = ({ permissions, user }) => {\n    const { register: registerGrant, handleSubmit: handleSubmitGrant } =\n        useForm<Inputs>();\n    const { register: registerRevoke, handleSubmit: handleSubmitRevoke } =\n        useForm<Inputs>();\n    const ungrantedPermissions = Permission.options.filter(\n        (p) => permissions.indexOf(p) === -1\n    );\n\n    const onSubmit: SubmitHandler<Inputs> = async (data) => {\n        try {\n            const reqData: GrantOrRevokePermissionReq = {\n                userId: user.userId,\n                ...data,\n            };\n\n            if (data.action === \"grant\") {\n                await axios.post<\n                    any,\n                    AxiosResponse<any>,\n                    GrantOrRevokePermissionReq\n                >(\n                    sitemap.public.apiV1.moderation\n                        .grantOrRevokePermission()\n                        .toString(),\n                    reqData\n                );\n            } else {\n                await axios.delete<\n                    any,\n                    AxiosResponse<any>,\n                    GrantOrRevokePermissionReq\n                >(\n                    sitemap.public.apiV1.moderation\n                        .grantOrRevokePermission()\n                        .toString(),\n                    { data: reqData }\n                );\n            }\n        } finally {\n            window.location.reload();\n        }\n    };\n\n    return (\n        <>\n            <form\n                className=\"flex max-w-fit flex-col gap-2 rounded-lg border border-accent p-3\"\n                onSubmit={handleSubmitGrant(onSubmit)}\n            >\n                <h4 className=\"h4\">grant permissions</h4>\n                <input\n                    type=\"hidden\"\n                    value=\"grant\"\n                    {...registerGrant(\"action\")}\n                />\n                permission to grant:\n                {ungrantedPermissions.map((permission) => (\n                    <div key={permission}>\n                        <input\n                            type=\"radio\"\n                            id={`grant-permission-${permission}`}\n                            value={permission}\n                            {...registerGrant(\"permission\", { required: true })}\n                        />\n                        <label htmlFor={`permission-${permission}`}>\n                            {permission}\n                        </label>\n                    </div>\n                ))}\n                reason for granting permission:\n                <textarea {...registerGrant(\"reason\", { required: true })} />\n                <Button\n                    type=\"submit\"\n                    buttonStyle=\"pill\"\n                    color=\"cherry\"\n                    className=\"w-fit\"\n                >\n                    grant permission\n                </Button>\n            </form>\n            <form\n                className=\"flex max-w-fit flex-col gap-2 rounded-lg border border-accent p-3\"\n                onSubmit={handleSubmitRevoke(onSubmit)}\n            >\n                <h4 className=\"h4\">revoke permissions</h4>\n                <input\n                    type=\"hidden\"\n                    value=\"revoke\"\n                    {...registerRevoke(\"action\")}\n                />\n                permission to revoke:\n                {permissions.map((permission) => (\n                    <div key={permission}>\n                        <input\n                            type=\"radio\"\n                            id={`revoke-permission-${permission}`}\n                            value={permission}\n                            {...registerRevoke(\"permission\", {\n                                required: true,\n                            })}\n                        />\n                        <label htmlFor={`permission-${permission}`}>\n                            {permission}\n                        </label>\n                    </div>\n                ))}\n                reason for revoking permission:\n                <textarea {...registerRevoke(\"reason\", { required: true })} />\n                <Button\n                    type=\"submit\"\n                    buttonStyle=\"pill\"\n                    color=\"cherry\"\n                    className=\"w-fit\"\n                >\n                    revoke permission\n                </Button>\n            </form>\n        </>\n    );\n};\n","import { string, z } from \"zod\";\nimport { AccessResult, AccessResultEnum } from \"./access-result\";\nimport {\n    ArtistAlleyAdId,\n    AskId,\n    AttachmentId,\n    CommentId,\n    ISODateString,\n    InviteId,\n    PostId,\n    ProjectId,\n    RelationshipId,\n    UserId,\n} from \"./ids\";\nimport { StorageBlock, ViewBlock } from \"./post-blocks\";\nimport { PostStateEnum } from \"./posts\";\nimport { ProjectFlag, WireProjectModel } from \"./projects\";\n\n// Type data needed for posts on the client\nexport const WirePostContentCommon = z.object({\n    postId: PostId,\n    headline: z.string(),\n    publishedAt: z.string().optional(),\n    filename: z.string(),\n    transparentShareOfPostId: PostId.nullable(),\n    shareOfPostId: PostId.nullable(),\n    state: PostStateEnum,\n    numComments: z.number(),\n    cws: z.string().array(),\n    tags: z.string().array(),\n    hasCohostPlus: z.boolean(),\n    pinned: z.boolean(),\n    commentsLocked: z.boolean(),\n    sharesLocked: z.boolean(),\n});\nexport type WirePostContentCommon = z.infer<typeof WirePostContentCommon>;\n\nexport const WirePostModel = WirePostContentCommon.extend({\n    adultContent: z.boolean(),\n    shareOfPostId: PostId.nullable(),\n    updatedAt: z.string(),\n    blocks: StorageBlock.array(),\n    attachments: z\n        .object({ attachmentId: AttachmentId, filename: z.string() })\n        .array(),\n});\nexport type WirePostModel = z.infer<typeof WirePostModel>;\n\nexport const WirePostModelModeratorExtensions = WirePostModel.extend({\n    adultContentOverride: z.boolean(),\n    projectId: ProjectId,\n});\nexport type WirePostModelModeratorExtensions = z.infer<\n    typeof WirePostModelModeratorExtensions\n>;\n\nexport const Permission = z.enum([\n    // allow the user to grant all permissions to any user\n    \"grant_all_permissions\",\n\n    // allow the user to access the moderator UI + view unpublished posts by\n    // projects they don't edit + grant the read-only and suspended permissions\n    \"moderator\",\n\n    // prevent the user from doing most things\n    \"read_only\",\n\n    // prevent the user from logging in\n    // the inconsistency here is deliberate to avoid breaking existing suspended users\n    \"suspended\",\n\n    // prevent the user from creating new projects\n    // only used in instances of extreme username hording\n    \"no_new_projects\",\n\n    // prevent the user from creating new artist alley listings. used in\n    // instances of extreme artist alley spam or repeated content violations\n    \"no_artist_alley\",\n]);\nexport type Permission = z.infer<typeof Permission>;\n\n// double declaration required due to a typescript limitation with recursive types\n// see: https://github.com/colinhacks/zod#recursive-types\ntype WireCommentViewModelInternal = {\n    comment: {\n        commentId: CommentId;\n        postedAtISO: string;\n        deleted: boolean;\n        body: string;\n        children: WireCommentViewModelInternal[];\n        postId: PostId;\n        inReplyTo: CommentId | null;\n        hasCohostPlus: boolean;\n        hidden: boolean;\n    };\n    canInteract: AccessResult;\n    canEdit: AccessResult;\n    canHide: AccessResult;\n    poster?: WireProjectModel;\n};\n\nexport const WireNotificationCommentViewModel = z.object({\n    canInteract: AccessResultEnum,\n    canEdit: AccessResultEnum,\n    canHide: AccessResultEnum,\n    comment: z.object({\n        body: z.string(),\n        children: z.tuple([]),\n        commentId: CommentId,\n        deleted: z.boolean(),\n        postId: PostId,\n        postedAtISO: z.string(),\n        inReplyTo: CommentId.nullable(),\n        hasCohostPlus: z.boolean(),\n        hidden: z.boolean(),\n    }),\n    poster: z.object({\n        projectId: ProjectId,\n    }),\n});\nexport type WireNotificationCommentViewModel = z.infer<\n    typeof WireNotificationCommentViewModel\n>;\n\nexport const WireCommentViewModel: z.ZodType<WireCommentViewModelInternal> =\n    z.lazy(() =>\n        z.object({\n            comment: z.object({\n                commentId: CommentId,\n                postedAtISO: ISODateString,\n                deleted: z.boolean(),\n                body: z.string(),\n                children: WireCommentViewModel.array(),\n                postId: PostId,\n                inReplyTo: CommentId.nullable(),\n                hasCohostPlus: z.boolean(),\n                hidden: z.boolean(),\n            }),\n            canInteract: AccessResultEnum,\n            canEdit: AccessResultEnum,\n            canHide: AccessResultEnum,\n            poster: WireProjectModel.optional(),\n        })\n    );\n\nexport type WireCommentViewModel = z.infer<typeof WireCommentViewModel>;\n\nexport const WireRenderedPostContent = z.object({\n    initial: z.string(),\n    expanded: z.string().optional(),\n});\n\nexport type WireRenderedPostContent = z.infer<typeof WireRenderedPostContent>;\n\nexport const LimitedVisibilityReason = z.enum([\n    \"none\",\n    \"log-in-first\",\n    \"deleted\",\n    \"unpublished\",\n    \"adult-content\",\n    \"blocked\",\n]);\nexport type LimitedVisibilityReason = z.infer<typeof LimitedVisibilityReason>;\n\n// rationale for building the post AST this way: originally, the entire post\n// shared one AST; this doesn't suffice when attachments can move around.  the\n// natural way to break the AST down then is per-block, but an inline HTML tag\n// can span multiple blocks, so we need to build spans of contiguous markdown\n// blocks as a unit or else HTML's tag auto-insertion rules kick in.\nexport const PostASTMap = z.object({\n    spans: z.array(\n        z.object({\n            startIndex: z.number(),\n            endIndex: z.number(),\n            ast: z.string(),\n        })\n    ),\n    readMoreIndex: z.number().nullable(),\n});\nexport type PostASTMap = z.infer<typeof PostASTMap>;\n\n// double declaration required due to a typescript limitation with recursive types\n// see: https://github.com/colinhacks/zod#recursive-types\ntype WirePostViewModelInternal = WirePostContentCommon & {\n    blocks: ViewBlock[];\n\n    plainTextBody: string;\n\n    postingProject: WireProjectModel;\n    shareTree: WirePostViewModelInternal[];\n    numSharedComments: number;\n    relatedProjects: WireProjectModel[];\n    singlePostPageUrl: string;\n    effectiveAdultContent: boolean;\n    isEditor: boolean;\n    hasAnyContributorMuted: boolean;\n    contributorBlockIncomingOrOutgoing: boolean;\n    postEditUrl: string;\n    isLiked: boolean;\n    canShare: boolean;\n    canPublish: boolean;\n    limitedVisibilityReason: LimitedVisibilityReason;\n    astMap: PostASTMap;\n\n    responseToAskId: AskId | null;\n};\n\nexport const WirePostViewModel: z.ZodType<WirePostViewModelInternal> = z.lazy(\n    () =>\n        WirePostContentCommon.extend({\n            blocks: ViewBlock.array(),\n            plainTextBody: z.string(),\n            postingProject: WireProjectModel,\n            shareTree: WirePostViewModel.array(),\n            numSharedComments: z.number(),\n            relatedProjects: WireProjectModel.array(),\n            singlePostPageUrl: z.string().url(),\n            effectiveAdultContent: z.boolean(),\n            isEditor: z.boolean(),\n            hasAnyContributorMuted: z.boolean(),\n            contributorBlockIncomingOrOutgoing: z.boolean(),\n            postEditUrl: z.string().url(),\n            isLiked: z.boolean(),\n            canShare: z.boolean(),\n            canPublish: z.boolean(),\n            limitedVisibilityReason: LimitedVisibilityReason,\n            astMap: PostASTMap,\n            responseToAskId: AskId.nullable(),\n        })\n);\nexport type WirePostViewModel = z.infer<typeof WirePostViewModel>;\n\nexport type WireInviteModel = {\n    inviteId: InviteId;\n    userActivationsRemaining: number;\n    createdAt: string;\n    owningUserId: UserId;\n};\n\nexport const WireUserModel = z.object({\n    userId: UserId,\n    email: z.string(),\n    emailVerified: z.boolean(),\n    collapseAdultContent: z.boolean(),\n    isAdult: z.boolean(),\n    twoFactorEnabled: z.boolean(),\n});\n\nexport type WireUserModel = z.infer<typeof WireUserModel>;\n\n//#region Notifications\nexport const WireNotificationType = z.enum([\n    \"like\",\n    \"comment\",\n    \"share\",\n    \"follow\",\n    \"groupedLike\",\n    \"groupedFollow\",\n    \"groupedShare\",\n]);\nexport type WireNotificationType = z.infer<typeof WireNotificationType>;\n\nconst BaseWireNotification = z.object({\n    type: WireNotificationType,\n    createdAt: z.string(),\n    fromProjectId: ProjectId,\n});\n\nconst BaseWireGroupNotification = z.object({\n    type: WireNotificationType,\n    createdAt: z.string(),\n    fromProjectIds: ProjectId.array(),\n    oldestCreatedAt: z.string(),\n});\n\nconst WirePostNotificationCommon = BaseWireNotification.extend({\n    toPostId: PostId,\n});\n\nconst WireGroupPostNotificationCommon = BaseWireGroupNotification.extend({\n    toPostId: PostId,\n});\n\nexport const WireLikeNotification = WirePostNotificationCommon.extend({\n    type: z.literal(\"like\"),\n    relationshipId: RelationshipId,\n});\nexport type WireLikeNotification = z.infer<typeof WireLikeNotification>;\n\nexport const WireGroupedLikeNotification =\n    WireGroupPostNotificationCommon.extend({\n        type: z.literal(\"groupedLike\"),\n        relationshipIds: RelationshipId.array(),\n    });\nexport type WireGroupedLikeNotification = z.infer<\n    typeof WireGroupedLikeNotification\n>;\n\nexport const WireGroupedFollowNotification = BaseWireGroupNotification.extend({\n    type: z.literal(\"groupedFollow\"),\n});\nexport type WireGroupedFollowNotification = z.infer<\n    typeof WireGroupedFollowNotification\n>;\n\nexport const WireGroupedShareNotification =\n    WireGroupPostNotificationCommon.extend({\n        type: z.literal(\"groupedShare\"),\n        transparentShare: z.boolean(),\n        sharePostIds: PostId.array(),\n    });\nexport type WireGroupedShareNotification = z.infer<\n    typeof WireGroupedShareNotification\n>;\n\nexport const WireCommentNotification = WirePostNotificationCommon.extend({\n    type: z.literal(\"comment\"),\n    commentId: CommentId,\n    inReplyTo: CommentId.nullable(),\n});\nexport type WireCommentNotification = z.infer<typeof WireCommentNotification>;\n\nexport const WireShareNotification = WirePostNotificationCommon.extend({\n    type: z.literal(\"share\"),\n    sharePostId: PostId,\n    transparentShare: z.boolean(),\n});\nexport type WireShareNotification = z.infer<typeof WireShareNotification>;\n\nexport const WireFollowNotification = BaseWireNotification.extend({\n    type: z.literal(\"follow\"),\n});\nexport type WireFollowNotification = z.infer<typeof WireFollowNotification>;\n\n// we don't cache group notifications, so we need a separate type that excludes\n// them for redis operations.\nexport const WireUngroupedNotification = z.discriminatedUnion(\"type\", [\n    WireLikeNotification,\n    WireCommentNotification,\n    WireShareNotification,\n    WireFollowNotification,\n]);\nexport type WireUngroupedNotification = z.infer<\n    typeof WireUngroupedNotification\n>;\n\nexport const WireGroupedNotification = z.union([\n    WireGroupedLikeNotification,\n    WireGroupedFollowNotification,\n    WireGroupedShareNotification,\n]);\nexport type WireGroupedNotification = z.infer<typeof WireGroupedNotification>;\n\nexport const WireNotification = z.union([\n    WireUngroupedNotification,\n    WireGroupedNotification,\n]);\n\nexport type WireNotification = z.infer<typeof WireNotification>;\n//#endregion\n\n//#region audit logs\nexport const AuditLogType = z.enum([\n    \"edit_comment\",\n    \"delete_comment\",\n    \"edit_post\",\n    \"edit_project_ugc\",\n    \"edit_project_mod_flags\",\n    \"grant_permission\",\n    \"revoke_permission\",\n    \"add_editor\",\n    \"remove_editor\",\n    \"edit_project_flags\",\n    \"edit_user\",\n    \"2fa_login_failed\",\n    \"2fa_reset\",\n    \"2fa_reset_failed\",\n    \"artist_alley_approved\",\n    \"artist_alley_rejected\",\n    \"artist_alley_mod_edited\",\n]);\nexport type AuditLogType = z.infer<typeof AuditLogType>;\n\nconst BaseWireAuditLogBody = z.object({\n    entryId: z.string(),\n    loggedAt: z.string(),\n});\n\nconst TwoFactorAuditLogBody = BaseWireAuditLogBody.extend({\n    userId: UserId,\n});\n\nconst PermissionWireAuditLogBody = BaseWireAuditLogBody.extend({\n    userId: UserId,\n    permission: Permission,\n    changedBy: UserId,\n    reason: z.string(),\n});\n\nconst EditorshipWireAuditLogBody = BaseWireAuditLogBody.extend({\n    projectId: ProjectId,\n    userId: UserId,\n    changedBy: UserId,\n    reason: z.string(),\n});\n\nconst EditProjectModFlagsAuditLogBody = BaseWireAuditLogBody.extend({\n    projectId: ProjectId,\n    oldAdultContent: z.boolean(),\n    oldAdultContentOverride: z.boolean(),\n    newAdultContent: z.boolean(),\n    newAdultContentOverride: z.boolean(),\n    changedBy: UserId,\n    reason: z.string(),\n});\n\nconst EditProjectFlagsAuditLogBody = BaseWireAuditLogBody.extend({\n    projectId: ProjectId,\n    changedBy: UserId,\n    reason: z.string(),\n    oldFlags: ProjectFlag.array(),\n    newFlags: ProjectFlag.array(),\n});\n\nconst EditUserAuditLogBody = BaseWireAuditLogBody.extend({\n    userId: UserId,\n    oldEmail: z.string(),\n    newEmail: z.string(),\n    oldPendingEmail: z.string().nullable(),\n    newPendingEmail: z.string().nullable(),\n    oldUsername: z.string(),\n    newUsername: z.string(),\n});\n\nconst EditPostAuditLogBody = BaseWireAuditLogBody.extend({\n    postId: PostId,\n    oldHeadline: z.string(),\n    newHeadline: z.string(),\n    oldBlocks: StorageBlock.array(),\n    newBlocks: StorageBlock.array(),\n    oldState: PostStateEnum,\n    newState: PostStateEnum,\n    oldAdultContent: z.boolean().optional(), // types added later, missing from old audit logs\n    newAdultContent: z.boolean().optional(),\n    oldAdultContentOverride: z.boolean().optional(),\n    newAdultContentOverride: z.boolean().optional(),\n    oldCws: z.string().array().optional(),\n    newCws: z.string().array().optional(),\n    oldCommentsLocked: z.boolean().optional(),\n    newCommentsLocked: z.boolean().optional(),\n});\n\nexport const WireAuditLogEntryTypes = {\n    edit_comment: BaseWireAuditLogBody.extend({\n        logType: z.literal(\"edit_comment\"),\n    }),\n    delete_comment: BaseWireAuditLogBody.extend({\n        logType: z.literal(\"delete_comment\"),\n    }),\n    grant_permission: PermissionWireAuditLogBody.extend({\n        logType: z.literal(\"grant_permission\"),\n    }),\n    revoke_permission: PermissionWireAuditLogBody.extend({\n        logType: z.literal(\"revoke_permission\"),\n    }),\n    edit_post: EditPostAuditLogBody.extend({\n        logType: z.literal(\"edit_post\"),\n    }),\n    edit_project_ugc: BaseWireAuditLogBody.extend({\n        logType: z.literal(\"edit_project_ugc\"),\n    }),\n    edit_project_mod_flags: EditProjectModFlagsAuditLogBody.extend({\n        logType: z.literal(\"edit_project_mod_flags\"),\n    }),\n    add_editor: EditorshipWireAuditLogBody.extend({\n        logType: z.literal(\"add_editor\"),\n    }),\n    remove_editor: EditorshipWireAuditLogBody.extend({\n        logType: z.literal(\"remove_editor\"),\n    }),\n    edit_project_flags: EditProjectFlagsAuditLogBody.extend({\n        logType: z.literal(\"edit_project_flags\"),\n    }),\n    edit_user: EditUserAuditLogBody.extend({\n        logType: z.literal(\"edit_user\"),\n    }),\n    \"2fa_login_failed\": TwoFactorAuditLogBody.extend({\n        logType: z.literal(\"2fa_login_failed\"),\n    }),\n    \"2fa_reset\": TwoFactorAuditLogBody.extend({\n        logType: z.literal(\"2fa_reset\"),\n    }),\n    \"2fa_reset_failed\": TwoFactorAuditLogBody.extend({\n        logType: z.literal(\"2fa_reset_failed\"),\n    }),\n    artist_alley_approved: BaseWireAuditLogBody.extend({\n        logType: z.literal(\"artist_alley_approved\"),\n        listingId: ArtistAlleyAdId,\n        changedBy: UserId,\n    }),\n    artist_alley_rejected: BaseWireAuditLogBody.extend({\n        logType: z.literal(\"artist_alley_rejected\"),\n        listingId: ArtistAlleyAdId,\n        changedBy: UserId,\n        rejectionReason: z.string(),\n    }),\n    artist_alley_mod_edited: BaseWireAuditLogBody.extend({\n        logType: z.literal(\"artist_alley_mod_edited\"),\n        listingId: ArtistAlleyAdId,\n        changedBy: UserId,\n    }),\n} as const;\n\nexport type WireAuditLogEntryTypes = {\n    [t in keyof typeof AuditLogType.enum]: z.infer<\n        (typeof WireAuditLogEntryTypes)[t]\n    >;\n};\n\nexport const WireAuditLogEntry = z.discriminatedUnion(\"logType\", [\n    WireAuditLogEntryTypes.edit_comment,\n    WireAuditLogEntryTypes.delete_comment,\n    WireAuditLogEntryTypes.grant_permission,\n    WireAuditLogEntryTypes.revoke_permission,\n    WireAuditLogEntryTypes.edit_post,\n    WireAuditLogEntryTypes.edit_project_ugc,\n    WireAuditLogEntryTypes.add_editor,\n    WireAuditLogEntryTypes.remove_editor,\n]);\n\nexport type WireAuditLogEntry = z.infer<typeof WireAuditLogEntry>;\n//#endregion audit logs\n\nexport const SubscriptionStatus = z.enum([\n    \"active\",\n    \"past_due\",\n    \"unpaid\",\n    \"canceled\",\n    \"incomplete\",\n    \"incomplete_expired\",\n    \"trialing\",\n]);\nexport type SubscriptionStatus = z.infer<typeof SubscriptionStatus>;\n\nexport const WireSubscription = z.object({\n    expirationDate: ISODateString,\n    status: SubscriptionStatus,\n});\nexport type WireSubscription = z.infer<typeof WireSubscription>;\n\nexport const WirePostComposerSettings = z.object({\n    defaultAdultContent: z.boolean(),\n    editingPost: WirePostViewModel.optional(),\n    // everything below this point is currently unsupported but that may change\n    defaultCws: z.string().array(),\n    defaultTags: z.string().array(),\n});\n\nexport const FollowedProjectFeed = z.object({\n    projects: z.array(\n        z.object({\n            project: WireProjectModel,\n            projectPinned: z.boolean(),\n            latestPost: WirePostViewModel.nullable(),\n        })\n    ),\n    nextCursor: z.number().nullable(),\n});\nexport type FollowedProjectFeed = z.infer<typeof FollowedProjectFeed>;\n\nexport const FollowedProjectFeedSortOrder = z.enum([\n    \"recently-posted\",\n    \"followed-asc\",\n    \"followed-desc\",\n    \"alpha-asc\",\n    \"alpha-desc\",\n]);\nexport type FollowedProjectFeedSortOrder = z.infer<\n    typeof FollowedProjectFeedSortOrder\n>;\n"],"names":["ButtonStyle","z","ButtonColor","baseColors","buttonStyle","color","className","optional","classnames","pillClasses","roundrectClasses","authnStyleClasses","cherryClasses","strawberryClasses","redClasses","greenClasses","mangoClasses","notBlackClasses","accentClasses","secondaryClasses","authnPrimaryColorClasses","authnOtherColorClasses","sharedClasses","props","Button","React","ref","classes","_extends","children","displayName","LinkButton","ManagePermissionsForm","permissions","user","register","registerGrant","handleSubmit","handleSubmitGrant","useForm","registerRevoke","handleSubmitRevoke","ungrantedPermissions","Permission","p","indexOf","onSubmit","async","reqData","userId","data","action","axios","sitemap","toString","window","location","reload","type","value","map","permission","key","id","required","htmlFor","WirePostContentCommon","postId","PostId","headline","publishedAt","filename","transparentShareOfPostId","shareOfPostId","state","PostStateEnum","numComments","cws","array","tags","hasCohostPlus","pinned","commentsLocked","sharesLocked","extend","adultContent","updatedAt","blocks","StorageBlock","attachments","attachmentId","AttachmentId","adultContentOverride","projectId","ProjectId","WireNotificationCommentViewModel","canInteract","AccessResultEnum","canEdit","canHide","comment","body","commentId","CommentId","deleted","postedAtISO","inReplyTo","hidden","poster","WireCommentViewModel","ISODateString","WireProjectModel","LimitedVisibilityReason","initial","expanded","PostASTMap","spans","startIndex","endIndex","ast","readMoreIndex","nullable","WirePostViewModel","ViewBlock","plainTextBody","postingProject","shareTree","numSharedComments","relatedProjects","singlePostPageUrl","url","effectiveAdultContent","isEditor","hasAnyContributorMuted","contributorBlockIncomingOrOutgoing","postEditUrl","isLiked","canShare","canPublish","limitedVisibilityReason","astMap","responseToAskId","AskId","WireNotificationType","UserId","email","emailVerified","collapseAdultContent","isAdult","twoFactorEnabled","BaseWireNotification","createdAt","fromProjectId","BaseWireGroupNotification","fromProjectIds","oldestCreatedAt","WirePostNotificationCommon","toPostId","WireGroupPostNotificationCommon","WireLikeNotification","relationshipId","RelationshipId","WireGroupedLikeNotification","relationshipIds","WireGroupedFollowNotification","WireGroupedShareNotification","transparentShare","sharePostIds","WireCommentNotification","WireShareNotification","sharePostId","WireFollowNotification","WireUngroupedNotification","WireGroupedNotification","WireNotification","BaseWireAuditLogBody","entryId","loggedAt","TwoFactorAuditLogBody","PermissionWireAuditLogBody","changedBy","reason","EditorshipWireAuditLogBody","EditProjectModFlagsAuditLogBody","oldAdultContent","oldAdultContentOverride","newAdultContent","newAdultContentOverride","EditProjectFlagsAuditLogBody","oldFlags","ProjectFlag","newFlags","EditUserAuditLogBody","oldEmail","newEmail","oldPendingEmail","newPendingEmail","oldUsername","newUsername","EditPostAuditLogBody","oldHeadline","newHeadline","oldBlocks","newBlocks","oldState","newState","oldCws","newCws","oldCommentsLocked","newCommentsLocked","WireAuditLogEntryTypes","edit_comment","logType","delete_comment","grant_permission","revoke_permission","edit_post","edit_project_ugc","edit_project_mod_flags","add_editor","remove_editor","edit_project_flags","edit_user","artist_alley_approved","listingId","ArtistAlleyAdId","artist_alley_rejected","rejectionReason","artist_alley_mod_edited","SubscriptionStatus","expirationDate","status","defaultAdultContent","editingPost","defaultCws","defaultTags","projects","project","projectPinned","latestPost","nextCursor"],"sourceRoot":""}