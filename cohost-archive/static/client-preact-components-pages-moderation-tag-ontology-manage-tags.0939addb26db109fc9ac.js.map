{"version":3,"file":"client-preact-components-pages-moderation-tag-ontology-manage-tags.0939addb26db109fc9ac.js","mappings":"gcAIO,MAAMA,EAAcC,EAAAA,EAAAA,KAAO,CAAC,OAAQ,YAAa,UAG3CC,EAAcD,EAAAA,EAAAA,KAAO,CAC9B,SACA,aACA,QACA,YACA,MACA,QACA,SACA,YACA,gBACA,gBAWEE,GAPqBF,EAAAA,EAAAA,OAAS,CAChCG,YAAaJ,EACbK,MAAOH,EACPI,UAAWL,EAAAA,EAAAA,SAAWM,aAIPC,GAAAA,CAAW,cAAe,wBAMvCC,EAAcD,GAAAA,CAChB,gBACA,YACA,eACA,YAGEE,EAAmBF,GAAAA,CAAW,SAAU,cAExCG,EAAoBH,GAAAA,CACtB,OACA,OACA,eACA,iBACA,aACA,OACA,WAGEI,EAAgBJ,GAAAA,CAClB,gBACA,kBACA,cACA,uBACA,2BACA,2BACA,6BACA,uBACA,oBACAL,GAEEU,EAAoBL,GAAAA,CACtB,oBACA,sBACA,kBACA,2BACA,+BACA,+BACA,iCACA,2BACA,wBACAL,GAGEW,EAAaN,GAAAA,CACf,aACA,eACA,WACA,oBACA,wBACA,wBACA,0BACA,oBACAL,GAGEY,EAAeP,GAAAA,CACjB,eACA,iBACA,aACA,sBACA,0BACA,0BACA,4BACA,sBACAL,GAEEa,EAAeR,GAAAA,CACjB,eACA,iBACA,aACA,cACA,uBAEES,EAAkBT,GAAAA,CACpB,kBACA,oBACA,gBACA,yBACA,sBACAL,GAGEe,EAAgBV,GAAAA,CAClB,gBACA,cACA,gBACA,kBACA,mBAGEW,EAAmBX,GAAAA,CACrB,eACA,gBACA,qBACA,0BAGEY,EAA2BZ,GAAAA,CAC7B,gBACA,YACA,0BACA,2BACA,8BAGEa,EAAyBb,GAAAA,CAC3B,WACA,oBACA,kBACA,uBAGEc,EAAiBC,GACnBf,GAAAA,CACI,eACA,eACA,OACA,OACA,YACAe,EAAMjB,UACN,CACI,CAACG,GAAoC,SAAtBc,EAAMnB,YACrB,CAACM,GAAyC,cAAtBa,EAAMnB,YAC1B,CAACO,GAA0C,UAAtBY,EAAMnB,YAC3B,CAACQ,GAAgC,WAAhBW,EAAMlB,MACvB,CAACQ,GAAoC,eAAhBU,EAAMlB,MAC3B,CAACW,GAA+B,UAAhBO,EAAMlB,MACtB,CAACY,GAAkC,cAAhBM,EAAMlB,MACzB,CAACS,GAA6B,QAAhBS,EAAMlB,MACpB,CAACa,GAAgC,WAAhBK,EAAMlB,MACvB,CAACU,GAA+B,UAAhBQ,EAAMlB,MACtB,CAACc,GAAmC,cAAhBI,EAAMlB,MAC1B,CAACe,GAA2C,kBAAhBG,EAAMlB,MAClC,CAACgB,GAAyC,gBAAhBE,EAAMlB,QAI/BmB,EAKTC,EAAAA,YAAiB,EAAGrB,YAAAA,EAAaC,MAAAA,EAAOC,UAAAA,KAAciB,GAASG,KAC/D,MAAMC,EAAUL,EAAc,CAC1BlB,YAAAA,EACAC,MAAAA,EACAC,UAAAA,KACGiB,IAEP,OACIE,EAAAA,cAAA,SAAAG,EAAA,GAAYL,EAAK,CAAEjB,UAAWqB,EAASD,IAAKA,IACvCH,EAAMM,aAInBL,EAAOM,YAAc,SAEd,MAAMC,EAKTN,EAAAA,YAAiB,EAAGrB,YAAAA,EAAaC,MAAAA,KAAUkB,GAASG,KACpD,MAAMC,EAAUL,EAAc,CAAElB,YAAAA,EAAaC,MAAAA,KAAUkB,IACvD,OACIE,EAAAA,cAAA,IAAAG,EAAA,GAAOL,EAAK,CAAEjB,UAAWqB,EAASD,IAAKA,IAClCH,EAAMM,aAInBE,EAAWD,YAAc,c,mbC/JzB,MAAME,EAEDA,EAAGC,cAAAA,MACJ,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,OACjCC,EAAaC,IAAkBC,EAAAA,EAAAA,WAClC,IAAML,EAAaM,IAAI,YAAc,MAGjCC,KAAMC,GAAkBC,EAAAA,EAAAA,WAAAA,IAAAA,OAAAA,SAC5B,CAAEC,MAAOP,GACT,CACIQ,UAAU,EACVC,UAAWT,KAIZ,CAAEU,IAAmBC,EAAAA,EAAAA,kBAEpBC,SAAUC,EAAgBC,aAAcC,IAC5CC,EAAAA,EAAAA,IAAsB,CAClBC,cAAe,CACXC,QAASlB,KAmBrB,OACIZ,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,QAAM+B,SAAUJ,GAjBuBX,IAC3CM,GAAgB,KACZT,EAAeG,EAAKc,SACpBpB,GACKsB,IACGA,EAAOC,IAAI,UAAWjB,EAAKc,SACpBE,IAEX,CACIE,SAAS,WAQ6B,8BAE1ClC,EAAAA,cAAA,QAAAG,EAAA,CAAOgC,KAAK,QAAWV,EAAe,aACtCzB,EAAAA,cAACoC,EAAAA,EAAW,CACRD,KAAK,SACLE,WAAW,UACXC,YAAY,UACf,WAKJrB,EACGjB,EAAAA,cAAA,SAAOnB,UAAU,SACbmB,EAAAA,cAAA,aACIA,EAAAA,cAAA,UACIA,EAAAA,cAAA,UACIA,EAAAA,cAAA,cAAQ,WAEZA,EAAAA,cAAA,UACIA,EAAAA,cAAA,cAAQ,gBAEZA,EAAAA,cAAA,UACIA,EAAAA,cAAA,cAAQ,sBAIpBA,EAAAA,cAAA,aACKiB,EAAcsB,KAAKC,GAChBxC,EAAAA,cAAA,MAAIyC,IAAKD,EAAIE,OACT1C,EAAAA,cAAA,UACIA,EAAAA,cAACD,EAAAA,GAAM,CACH4C,QAASA,IAAMnC,EAAcgC,EAAIE,OACjC/D,YAAY,OACZC,MAAM,UAEL4D,EAAIE,QAGb1C,EAAAA,cAAA,UACIA,EAAAA,cAAA,KACI4C,KAAMC,EAAAA,GAAAA,OAAAA,KACI,CAAEC,QAASN,EAAIV,UACpBiB,WACLC,OAAO,SACPC,IAAI,YACP,IACKT,EAAIV,UAGd9B,EAAAA,cAAA,UACIA,EAAAA,cAAA,KACI4C,KAAMC,EAAAA,GAAAA,OAAAA,KACI,CACFC,QACIN,EAAIU,wBAEXH,WACLC,OAAO,SACPC,IAAI,YACP,IACKT,EAAIU,6BAO9B,OAKVC,EAGDA,EAAGT,MAAAA,EAAOlC,cAAAA,MACX,MAAQQ,KAAMoC,GAAelC,EAAAA,EAAAA,WAAAA,IAAAA,QAAAA,SACzB,CAAEwB,MAAAA,GACF,CACItB,UAAU,EACVC,UAAWqB,IAGbW,EACFnC,EAAAA,EAAAA,WAAAA,IAAAA,oBAAAA,cAEEoC,EAAyBF,EACzBG,GAAAA,CAAEH,EAAWI,aACRC,QAAQjB,GAAQA,EAAIE,QAAUU,EAAWV,QACzCgB,SAASlB,GAAQA,EAAImB,eACrBC,QACL,GACAC,EAAWP,EAAgC,SAAK,GAChDE,EAAcF,EAAgC,SAAK,GAEzD,OAAKF,EAKDpD,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,MAAInB,UAAU,YAAW,iBACNuE,EAAWV,MAAM,MAC/BU,EAAWtB,QAAQ,KAGxB9B,EAAAA,cAAA,aACIA,EAAAA,cAAA,aACIA,EAAAA,cAAA,UACIA,EAAAA,cAAA,UAAI,UACJA,EAAAA,cAAA,UAAKoD,EAAWV,QAEpB1C,EAAAA,cAAA,UACIA,EAAAA,cAAA,UAAI,eACJA,EAAAA,cAAA,UACIA,EAAAA,cAAA,KACI4C,KAAMC,EAAAA,GAAAA,OAAAA,KACI,CAAEC,QAASM,EAAWtB,UAC3BiB,WACLC,OAAO,SACPC,IAAI,YAEHG,EAAWtB,WAIxB9B,EAAAA,cAAA,UACIA,EAAAA,cAAA,UAAI,mBACJA,EAAAA,cAAA,UACKoD,EAAWU,eACR9D,EAAAA,cAACD,EAAAA,GAAM,CACH4C,QAASA,IACLnC,EACI4C,EAAWU,eAAgBpB,OAGnC/D,YAAY,OACZC,MAAM,UAELwE,EAAWU,eAAepB,MAAM,MAChCU,EAAWU,eAAehC,QAAQ,KAGvC,IACF,IAEDsB,EAAWU,gBAAgBpB,QAC5BU,EAAWV,MACP1C,EAAAA,cAACD,EAAAA,GAAM,CACH4C,QAASA,KACLU,EAA4BU,OAAO,CAC/BrB,MAAAA,IAEJsB,SAASC,UAEbtF,YAAY,OACZC,MAAM,OACT,SAGD,OAGZoB,EAAAA,cAAA,UACIA,EAAAA,cAAA,UAAI,kBACJA,EAAAA,cAAA,UACIA,EAAAA,cAAA,UACK6D,EAASK,OAAS,EACbL,EAAStB,KAAKC,GACVxC,EAAAA,cAAA,MAAIyC,IAAKD,EAAIE,OACT1C,EAAAA,cAACD,EAAAA,GAAM,CACH4C,QAASA,IACLnC,EAAcgC,EAAIE,OAEtB/D,YAAY,OACZC,MAAM,UAEL4D,EAAIE,MAAM,MACVF,EAAIV,QAAQ,QAIzB,OAIlB9B,EAAAA,cAAA,UACIA,EAAAA,cAAA,UAAI,gBACJA,EAAAA,cAAA,UACIA,EAAAA,cAAA,UACKwD,EAAYU,OAAS,EAChBV,EAAYjB,KAAKC,GACbxC,EAAAA,cAAA,MAAIyC,IAAKD,EAAIE,OACT1C,EAAAA,cAACD,EAAAA,GAAM,CACH4C,QAASA,IACLnC,EAAcgC,EAAIE,OAEtB/D,YAAY,OACZC,MAAM,UAEL4D,EAAIE,MAAM,MACVF,EAAIV,QAAQ,QAIzB,SAO1B9B,EAAAA,cAAA,WAEAA,EAAAA,cAAA,UAAI,qBAEJA,EAAAA,cAACmE,EAA8B,CAC3BzB,MAAOU,EAAWV,MAClB0B,WAAYhB,EAAWtB,UAG3B9B,EAAAA,cAAA,WAEAA,EAAAA,cAACqE,EAAwB,CACrB3B,MAAOA,EACP0B,WAAYhB,EAAWtB,UAG3B9B,EAAAA,cAAA,WAEAA,EAAAA,cAACsE,EAA2B,CACxB5B,MAAOA,EACP0B,WAAYhB,EAAWtB,UAG3B9B,EAAAA,cAAA,WAEAA,EAAAA,cAAA,eACIA,EAAAA,cAAA,eACIA,EAAAA,cAAA,MAAInB,UAAU,gBAAe,iBAGjCmB,EAAAA,cAACuE,EAAyB,CACtB7B,MAAOU,EAAWV,MAClB0B,WAAYhB,EAAWtB,UAG3B9B,EAAAA,cAAA,WAEAA,EAAAA,cAACwE,EAAkB,CACf9B,MAAOA,EACP0B,WAAYhB,EAAWtB,UAG3B9B,EAAAA,cAAA,WAEAA,EAAAA,cAACyE,EAAqB,CAClB/B,MAAOA,EACP0B,WAAYhB,EAAWtB,YAlK5B,MAyKTqC,EAGDA,EAAGzB,MAAAA,EAAO0B,WAAAA,MACX,MAAMM,EAAQxD,EAAAA,EAAAA,aAERyD,EAAwBzD,EAAAA,EAAAA,WAAAA,IAAAA,cAAAA,YAC1B,KAGIQ,aAAckD,EAAwBC,QAASC,IACnDlD,EAAAA,EAAAA,IAAmC,CAC/BC,cAAe,CACXkD,WAAY,MAmBxB,OACI/E,EAAAA,cAAA,QAAM+B,SAAU6C,GAhB2CI,MAAAA,IAG3D,MAAMlB,QAAuBY,EAAMO,WAAWzC,IAAI0C,aAAaC,MAAM,CACjErD,QAASd,EAAK+D,WAAW,WAGvBJ,EAAsBS,YAAY,CACpCC,iBAAkBvB,EAAepB,MACjC4C,WAAY5C,IAGhBsB,SAASC,aAKLjE,EAAAA,cAAA,MAAInB,UAAU,WAAU,4BAA0BuF,GAElDpE,EAAAA,cAAA,SAAG,sBACHA,EAAAA,cAAA,OAAKnB,UAAU,iEACXmB,EAAAA,cAACuF,EAAAA,GAAU,CACPV,QAASC,EACTU,KAAK,aACLC,OAAQA,EAAGC,MAAAA,KACP1F,EAAAA,cAAC2F,EAAAA,EAAU,CACPC,UAAWC,EAAAA,EACXC,UAAWJ,EAAMK,SACjBC,OAAQN,EAAM9B,MACdqC,gBAAgB,EAChBC,YAAY,mBAM5BlG,EAAAA,cAACoC,EAAAA,EAAW,CACRD,KAAK,SACLE,WAAW,UACXC,YAAY,UACf,SAOPiC,EAGDA,EAAG7B,MAAAA,EAAO0B,WAAAA,MACX,MAAMO,EAAwBzD,EAAAA,EAAAA,WAAAA,IAAAA,cAAAA,YAC1B,KAGIQ,aAAckD,EAAsB,SAAEpD,IAC1CI,EAAAA,EAAAA,IAA8B,CAC1BC,cAAe,CACXsE,aAAc,MAa1B,OACInG,EAAAA,cAAA,QAAM+B,SAAU6C,GAVsCI,MAAAA,UAChDL,EAAsBS,YAAY,CACpCC,iBAAkBrE,EAAKmF,aACvBb,WAAY5C,IAGhBsB,SAASC,aAKLjE,EAAAA,cAAA,MAAInB,UAAU,WAAU,4BAA0BuF,GAElDpE,EAAAA,cAAA,OAAKnB,UAAU,iEACXmB,EAAAA,cAAA,aAAO,iBAEHA,EAAAA,cAAA,QAAAG,EAAA,CAAOgC,KAAK,UAAaX,EAAS,oBAI1CxB,EAAAA,cAACoC,EAAAA,EAAW,CACRD,KAAK,SACLE,WAAW,UACXC,YAAY,UACf,SAOP+B,EAGDA,EAAG3B,MAAAA,EAAO0B,WAAAA,MACX,MAAMO,EAAwBzD,EAAAA,EAAAA,WAAAA,IAAAA,cAAAA,YAC1B,IAGEwD,EAAQxD,EAAAA,EAAAA,cAGVQ,aAAc0E,EACdvB,QAASwB,IACTzE,EAAAA,EAAAA,IAAoC,CACpCC,cAAe,CACXgC,SAAU,MAuBlB,OACI7D,EAAAA,cAAA,QAAM+B,SAAUqE,GApB6CpB,MAAAA,UAGvDsB,QAAQC,IACVvF,EAAK6C,SAAStB,KAAKT,GACf4C,EAAMO,WAAWzC,IAAI0C,aAChBC,MAAM,CAAErD,QAAAA,IACR0E,MAAMhE,GACHmC,EAAsBS,YAAY,CAC9BC,iBAAkB3C,EAClB4C,WAAY9C,EAAIE,aAMpCsB,SAASC,aAKLjE,EAAAA,cAAA,MAAInB,UAAU,WAAU,2BAAyBuF,GAEjDpE,EAAAA,cAAA,OAAKnB,UAAU,iEACXmB,EAAAA,cAACuF,EAAAA,GAAU,CACPV,QAASwB,EACTb,KAAK,WACLC,OAAQA,EAAGC,MAAAA,KACP1F,EAAAA,cAAC2F,EAAAA,EAAU,CACPC,UAAWC,EAAAA,EACXC,UAAWJ,EAAMK,SACjBC,OAAQN,EAAM9B,MACdqC,gBAAgB,EAChBC,YAAY,mBAM5BlG,EAAAA,cAACoC,EAAAA,EAAW,CACRD,KAAK,SACLE,WAAW,UACXC,YAAY,UACf,SAOPkC,EAGDA,EAAG9B,MAAAA,EAAO0B,WAAAA,MACX,MAAMO,EAAwBzD,EAAAA,EAAAA,WAAAA,IAAAA,cAAAA,YAC1B,KAGIQ,aAAc0E,EAAuB,SAAE5E,IAC3CI,EAAAA,EAAAA,IAA8B,CAC1BC,cAAe,CACX4E,aAAc,MAa1B,OACIzG,EAAAA,cAAA,QAAM+B,SAAUqE,GAVuCpB,MAAAA,UACjDL,EAAsBS,YAAY,CACpCC,iBAAkB3C,EAClB4C,WAAYtE,EAAKyF,eAGrBzC,SAASC,aAKLjE,EAAAA,cAAA,MAAInB,UAAU,WAAU,0BAAwBuF,GAEhDpE,EAAAA,cAAA,OAAKnB,UAAU,iEACXmB,EAAAA,cAAA,aAAO,uBAEHA,EAAAA,cAAA,QAAAG,EAAA,CAAOgC,KAAK,UAAaX,EAAS,oBAI1CxB,EAAAA,cAACoC,EAAAA,EAAW,CACRD,KAAK,SACLE,WAAW,UACXC,YAAY,UACf,SAOPgC,EAGDA,EAAG5B,MAAAA,EAAO0B,WAAAA,MACX,MAAMsC,EACFxF,EAAAA,EAAAA,WAAAA,IAAAA,eAAAA,YAA+C,IAE7CwD,EAAQxD,EAAAA,EAAAA,cAER,aAAEQ,EAAY,QAAEmD,IAAYjD,EAAAA,EAAAA,IAAuC,CACrEC,cAAe,CACX2B,YAAa,MAuBrB,OACIxD,EAAAA,cAAA,QAAM+B,SAAUL,GAlBhBsD,MAAAA,UACMsB,QAAQC,IACVvF,EAAKwC,YAAYjB,KAAKT,GAClB4C,EAAMO,WAAWzC,IAAI0C,aAChBC,MAAM,CAAErD,QAAAA,IACR0E,MAAMhE,GACHkE,EAAuBtB,YAAY,CAC/BuB,OAAQjE,EACRkE,OAAQpE,EAAIE,aAMhCsB,SAASC,aAKLjE,EAAAA,cAAA,MAAInB,UAAU,WAAU,yBAAuBuF,GAE/CpE,EAAAA,cAAA,OAAKnB,UAAU,iEACXmB,EAAAA,cAACuF,EAAAA,GAAU,CACPV,QAASA,EACTW,KAAK,cACLC,OAAQA,EAAGC,MAAAA,KACP1F,EAAAA,cAAC2F,EAAAA,EAAU,CACPC,UAAWC,EAAAA,EACXC,UAAWJ,EAAMK,SACjBC,OAAQN,EAAM9B,MACdqC,gBAAgB,EAChBC,YAAY,mBAK5BlG,EAAAA,cAACoC,EAAAA,EAAW,CACRD,KAAK,SACLE,WAAW,UACXC,YAAY,UACf,SAOPmC,EAGDA,EAAG/B,MAAAA,EAAO0B,WAAAA,MACX,MAAMsC,EACFxF,EAAAA,EAAAA,WAAAA,IAAAA,eAAAA,YAA+C,KAE7C,aAAEQ,EAAY,SAAEF,IAAaI,EAAAA,EAAAA,IAA8B,CAC7DC,cAAe,CACXgF,aAAc,MAetB,OACI7G,EAAAA,cAAA,QAAM+B,SAAUL,GAZ0CsD,MAAAA,UAGpD0B,EAAuBtB,YAAY,CACrCuB,OAAQjE,EACRkE,OAAQ5F,EAAK6F,eAGjB7C,SAASC,aAKLjE,EAAAA,cAAA,MAAInB,UAAU,WAAU,yBAAuBuF,GAE/CpE,EAAAA,cAAA,OAAKnB,UAAU,iEACXmB,EAAAA,cAAA,aAAO,iBAEHA,EAAAA,cAAA,QAAAG,EAAA,CAAOgC,KAAK,UAAaX,EAAS,oBAG1CxB,EAAAA,cAACoC,EAAAA,EAAW,CACRD,KAAK,SACLE,WAAW,UACXC,YAAY,UACf,SAOAwE,EAA+CA,KACxD,MAAOrG,EAAcC,IAAmBC,EAAAA,EAAAA,OACjCoG,EAAcC,IAAmBlG,EAAAA,EAAAA,WACpC,IAAOL,EAAaM,IAAI,UAAY,MAGjC,CAAEO,IAAmBC,EAAAA,EAAAA,iBAEtB0F,GAAgBC,EAAAA,EAAAA,cACjBxE,IACGpB,GAAgB,KACZ0F,EAAgBtE,GAChBhC,GACKsB,IACGA,EAAOC,IAAI,QAASS,GACbV,IAEX,CACIE,SAAS,SAKzB,CAACxB,IAGL,OACIV,EAAAA,cAAA,OACInB,UAAU,oIAGVmB,EAAAA,cAAA,OAAKnB,UAAU,SACXmB,EAAAA,cAAA,MAAInB,UAAU,YAAW,eAEzBmB,EAAAA,cAACO,EAAS,CAACC,cAAeyG,IAE1BjH,EAAAA,cAAA,WAEAA,EAAAA,cAACmD,EAAU,CACPT,MAAOqE,EACPvG,cAAeyG,OAOnC","sources":["webpack:///./preact/components/elements/button.tsx","webpack:///./preact/components/pages/moderation/tag-ontology/manage-tags.tsx"],"sourcesContent":["import classnames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { z } from \"zod\";\n\nexport const ButtonStyle = z.enum([\"pill\", \"roundrect\", \"authn\"]);\nexport type ButtonStyle = z.infer<typeof ButtonStyle>;\n\nexport const ButtonColor = z.enum([\n    \"cherry\",\n    \"strawberry\",\n    \"mango\",\n    \"not-black\",\n    \"red\",\n    \"green\",\n    \"accent\",\n    \"secondary\",\n    \"authn-primary\",\n    \"authn-other\",\n]);\nexport type ButtonColor = z.infer<typeof ButtonColor>;\n\nexport const SharedProps = z.object({\n    buttonStyle: ButtonStyle,\n    color: ButtonColor,\n    className: z.string().optional(),\n});\nexport type SharedProps = z.infer<typeof SharedProps>;\n\nconst baseColors = classnames(\"bg-notWhite\", \"hover:text-notWhite\");\n\n// WHY NOT HAVE THESE AS INTERPOLATED CLASS NAMES?\n// tailwind jit doesn't handle interpolated class names!\n// you have to have the full class name written for it to pick up on a string as\n// a class name! so we do this\nconst pillClasses = classnames(\n    \"font-atkinson\",\n    \"font-bold\",\n    \"rounded-full\",\n    \"border-2\"\n);\n\nconst roundrectClasses = classnames(\"body-2\", \"rounded-lg\");\n\nconst authnStyleClasses = classnames(\n    \"flex\",\n    \"h-12\",\n    \"items-center\",\n    \"justify-center\",\n    \"rounded-lg\",\n    \"px-6\",\n    \"text-lg\"\n);\n\nconst cherryClasses = classnames(\n    \"border-cherry\",\n    \"hover:bg-cherry\",\n    \"text-cherry\",\n    \"active:bg-cherry-600\",\n    \"active:border-cherry-600\",\n    \"disabled:text-cherry-300\",\n    \"disabled:border-cherry-300\",\n    \"focus:outline-cherry\",\n    \"focus:ring-cherry\",\n    baseColors\n);\nconst strawberryClasses = classnames(\n    \"border-strawberry\",\n    \"hover:bg-strawberry\",\n    \"text-strawberry\",\n    \"active:bg-strawberry-600\",\n    \"active:border-strawberry-600\",\n    \"disabled:text-strawberry-300\",\n    \"disabled:border-strawberry-300\",\n    \"focus:outline-strawberry\",\n    \"focus:ring-strawberry\",\n    baseColors\n);\n\nconst redClasses = classnames(\n    \"border-red\",\n    \"hover:bg-red\",\n    \"text-red\",\n    \"active:bg-red-600\",\n    \"active:border-red-600\",\n    \"disabled:text-red-300\",\n    \"disabled:border-red-300\",\n    \"focus:outline-red\",\n    baseColors\n);\n\nconst greenClasses = classnames(\n    \"border-green\",\n    \"hover:bg-green\",\n    \"text-green\",\n    \"active:bg-green-600\",\n    \"active:border-green-600\",\n    \"disabled:text-green-300\",\n    \"disabled:border-green-300\",\n    \"focus:outline-green\",\n    baseColors\n);\nconst mangoClasses = classnames(\n    \"border-mango\",\n    \"hover:bg-mango\",\n    \"text-mango\",\n    \"bg-notBlack\",\n    \"hover:text-notBlack\"\n);\nconst notBlackClasses = classnames(\n    \"border-notBlack\",\n    \"hover:bg-notBlack\",\n    \"text-notBlack\",\n    \"focus:outline-notBlack\",\n    \"focus:ring-notBlack\",\n    baseColors\n);\n\nconst accentClasses = classnames(\n    \"border-accent\",\n    \"text-accent\",\n    \"bg-foreground\",\n    \"hover:bg-accent\",\n    \"hover:text-text\"\n);\n\nconst secondaryClasses = classnames(\n    \"bg-secondary\",\n    \"text-notWhite\",\n    \"dark:text-notBlack\",\n    \"hover:bg-secondary-600\"\n);\n\nconst authnPrimaryColorClasses = classnames(\n    \"bg-foreground\",\n    \"text-text\",\n    \"hover:bg-foreground-600\",\n    \"active:bg-foreground-700\",\n    \"disabled:bg-foreground-200\"\n);\n\nconst authnOtherColorClasses = classnames(\n    \"border-2\",\n    \"border-foreground\",\n    \"text-foreground\",\n    \"hover:bg-longan-200\"\n);\n\nconst sharedClasses = (props: SharedProps) =>\n    classnames(\n        \"leading-none\",\n        \"align-middle\",\n        \"py-2\",\n        \"px-4\",\n        \"no-select\",\n        props.className,\n        {\n            [pillClasses]: props.buttonStyle === \"pill\",\n            [roundrectClasses]: props.buttonStyle === \"roundrect\",\n            [authnStyleClasses]: props.buttonStyle === \"authn\",\n            [cherryClasses]: props.color === \"cherry\",\n            [strawberryClasses]: props.color === \"strawberry\",\n            [mangoClasses]: props.color === \"mango\",\n            [notBlackClasses]: props.color === \"not-black\",\n            [redClasses]: props.color === \"red\",\n            [accentClasses]: props.color === \"accent\",\n            [greenClasses]: props.color === \"green\",\n            [secondaryClasses]: props.color === \"secondary\",\n            [authnPrimaryColorClasses]: props.color === \"authn-primary\",\n            [authnOtherColorClasses]: props.color === \"authn-other\",\n        }\n    );\n\nexport const Button: FunctionComponent<\n    SharedProps &\n        React.ButtonHTMLAttributes<HTMLButtonElement> & {\n            ref?: React.Ref<HTMLButtonElement>;\n        }\n> = React.forwardRef(({ buttonStyle, color, className, ...props }, ref) => {\n    const classes = sharedClasses({\n        buttonStyle,\n        color,\n        className,\n        ...props,\n    });\n    return (\n        <button {...props} className={classes} ref={ref}>\n            {props.children}\n        </button>\n    );\n});\nButton.displayName = \"Button\";\n\nexport const LinkButton: FunctionComponent<\n    SharedProps &\n        React.AnchorHTMLAttributes<HTMLAnchorElement> & {\n            ref?: React.Ref<HTMLAnchorElement>;\n        }\n> = React.forwardRef(({ buttonStyle, color, ...props }, ref) => {\n    const classes = sharedClasses({ buttonStyle, color, ...props });\n    return (\n        <a {...props} className={classes} ref={ref}>\n            {props.children}\n        </a>\n    );\n});\nLinkButton.displayName = \"LinkButton\";\n","import { trpc } from \"@/client/lib/trpc\";\nimport { TagId } from \"@/shared/types/ids\";\nimport _ from \"lodash\";\nimport React, {\n    FunctionComponent,\n    useCallback,\n    useEffect,\n    useState,\n    useTransition,\n} from \"react\";\nimport { useForm, SubmitHandler, Controller } from \"react-hook-form\";\nimport { BasicButton } from \"../../../elements/basic-button\";\nimport { Button } from \"../../../elements/button\";\nimport { TokenInput } from \"../../../token-input\";\nimport { HashtagIcon } from \"@heroicons/react/20/solid\";\nimport { useSearchParams } from \"react-router-dom\";\nimport sitemap from \"@/shared/sitemap\";\n\ntype SearchInputs = {\n    content: string;\n};\n\ntype AddRelatedTagsByContentInputs = {\n    relatedTags: string[];\n};\n\ntype AddRelatedByIdInputs = {\n    relatedTagId: TagId;\n};\n\ntype SetPrimaryByContentInputs = {\n    primaryTag: string[];\n};\n\ntype SetPrimaryByIdInputs = {\n    primaryTagId: TagId;\n};\n\ntype AddSynonymsByContentInputs = {\n    synonyms: string[];\n};\n\ntype AddSynonymByIdInputs = {\n    synonymTagId: TagId;\n};\n\nconst TagSearch: FunctionComponent<{\n    onTagSelected: (tagId: TagId) => void;\n}> = ({ onTagSelected }) => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [searchToken, setSearchToken] = useState<string>(\n        () => searchParams.get(\"content\") ?? \"\"\n    );\n\n    const { data: searchResults } = trpc.moderation.tag.search.useQuery(\n        { query: searchToken },\n        {\n            suspense: true,\n            enabled: !!searchToken,\n        }\n    );\n\n    const [, startTransition] = useTransition();\n\n    const { register: registerSearch, handleSubmit: handleSubmitSearch } =\n        useForm<SearchInputs>({\n            defaultValues: {\n                content: searchToken,\n            },\n        });\n\n    const onSearch: SubmitHandler<SearchInputs> = (data) => {\n        startTransition(() => {\n            setSearchToken(data.content);\n            setSearchParams(\n                (params) => {\n                    params.set(\"content\", data.content);\n                    return params;\n                },\n                {\n                    replace: true,\n                }\n            );\n        });\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmitSearch(onSearch)}>\n                search for tags by content:\n                <input type=\"text\" {...registerSearch(\"content\")} />\n                <BasicButton\n                    type=\"submit\"\n                    buttonSize=\"regular\"\n                    buttonColor=\"cherry\"\n                >\n                    submit\n                </BasicButton>\n            </form>\n\n            {searchResults ? (\n                <table className=\"prose\">\n                    <thead>\n                        <tr>\n                            <td>\n                                <strong>tag ID</strong>\n                            </td>\n                            <td>\n                                <strong>tag content</strong>\n                            </td>\n                            <td>\n                                <strong>primary synonym</strong>\n                            </td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {searchResults.map((tag) => (\n                            <tr key={tag.tagId}>\n                                <td>\n                                    <Button\n                                        onClick={() => onTagSelected(tag.tagId)}\n                                        buttonStyle=\"pill\"\n                                        color=\"cherry\"\n                                    >\n                                        {tag.tagId}\n                                    </Button>\n                                </td>\n                                <td>\n                                    <a\n                                        href={sitemap.public\n                                            .tags({ tagSlug: tag.content })\n                                            .toString()}\n                                        target=\"_blank\"\n                                        rel=\"noopener\"\n                                    >\n                                        #{tag.content}\n                                    </a>\n                                </td>\n                                <td>\n                                    <a\n                                        href={sitemap.public\n                                            .tags({\n                                                tagSlug:\n                                                    tag.primarySynonymContent,\n                                            })\n                                            .toString()}\n                                        target=\"_blank\"\n                                        rel=\"noopener\"\n                                    >\n                                        #{tag.primarySynonymContent}\n                                    </a>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            ) : null}\n        </>\n    );\n};\n\nconst TagDetails: FunctionComponent<{\n    tagId: TagId;\n    onTagSelected: (tagId: TagId) => void;\n}> = ({ tagId, onTagSelected }) => {\n    const { data: tagDetails } = trpc.moderation.tag.getById.useQuery(\n        { tagId },\n        {\n            suspense: true,\n            enabled: !!tagId,\n        }\n    );\n    const resetPrimarySynonymMutation =\n        trpc.moderation.tag.resetPrimarySynonym.useMutation();\n\n    const synonymsAndRelatedTags = tagDetails\n        ? _(tagDetails.relatedTags)\n              .filter((tag) => tag.tagId !== tagDetails.tagId)\n              .groupBy((tag) => tag.relationship)\n              .value()\n        : {};\n    const synonyms = synonymsAndRelatedTags[\"synonym\"] ?? [];\n    const relatedTags = synonymsAndRelatedTags[\"related\"] ?? [];\n\n    if (!tagDetails) {\n        return null;\n    }\n\n    return (\n        <>\n            <h2 className=\"text-3xl\">\n                manage tag ID {tagDetails.tagId} (#\n                {tagDetails.content})\n            </h2>\n\n            <table>\n                <tbody>\n                    <tr>\n                        <td>tag ID</td>\n                        <td>{tagDetails.tagId}</td>\n                    </tr>\n                    <tr>\n                        <td>tag content</td>\n                        <td>\n                            <a\n                                href={sitemap.public\n                                    .tags({ tagSlug: tagDetails.content })\n                                    .toString()}\n                                target=\"_blank\"\n                                rel=\"noopener\"\n                            >\n                                {tagDetails.content}\n                            </a>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>primary synonym</td>\n                        <td>\n                            {tagDetails.primarySynonym ? (\n                                <Button\n                                    onClick={() =>\n                                        onTagSelected(\n                                            tagDetails.primarySynonym!.tagId\n                                        )\n                                    }\n                                    buttonStyle=\"pill\"\n                                    color=\"cherry\"\n                                >\n                                    {tagDetails.primarySynonym.tagId} (#\n                                    {tagDetails.primarySynonym.content})\n                                </Button>\n                            ) : (\n                                \"\\u2014\"\n                            )}\n                            &nbsp;\n                            {tagDetails.primarySynonym?.tagId !==\n                            tagDetails.tagId ? (\n                                <Button\n                                    onClick={() => {\n                                        resetPrimarySynonymMutation.mutate({\n                                            tagId,\n                                        });\n                                        location.reload();\n                                    }}\n                                    buttonStyle=\"pill\"\n                                    color=\"red\"\n                                >\n                                    reset\n                                </Button>\n                            ) : null}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>other synonyms</td>\n                        <td>\n                            <ul>\n                                {synonyms.length > 0\n                                    ? synonyms.map((tag) => (\n                                          <li key={tag.tagId}>\n                                              <Button\n                                                  onClick={() =>\n                                                      onTagSelected(tag.tagId)\n                                                  }\n                                                  buttonStyle=\"pill\"\n                                                  color=\"cherry\"\n                                              >\n                                                  {tag.tagId} (#\n                                                  {tag.content})\n                                              </Button>\n                                          </li>\n                                      ))\n                                    : \"\\u2014\"}\n                            </ul>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>related tags</td>\n                        <td>\n                            <ul>\n                                {relatedTags.length > 0\n                                    ? relatedTags.map((tag) => (\n                                          <li key={tag.tagId}>\n                                              <Button\n                                                  onClick={() =>\n                                                      onTagSelected(tag.tagId)\n                                                  }\n                                                  buttonStyle=\"pill\"\n                                                  color=\"cherry\"\n                                              >\n                                                  {tag.tagId} (#\n                                                  {tag.content})\n                                              </Button>\n                                          </li>\n                                      ))\n                                    : \"\\u2014\"}\n                            </ul>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n\n            <hr />\n\n            <h2>modify by content</h2>\n\n            <SetPrimarySynonymByContentForm\n                tagId={tagDetails.tagId}\n                tagContent={tagDetails.content}\n            />\n\n            <hr />\n\n            <AddSynonymsByContentForm\n                tagId={tagId}\n                tagContent={tagDetails.content}\n            />\n\n            <hr />\n\n            <AddRelatedTagsByContentForm\n                tagId={tagId}\n                tagContent={tagDetails.content}\n            />\n\n            <hr />\n\n            <details>\n                <summary>\n                    <h2 className=\"inline-block\">modify by ID</h2>\n                </summary>\n\n                <SetPrimarySynonymByIdForm\n                    tagId={tagDetails.tagId}\n                    tagContent={tagDetails.content}\n                />\n\n                <hr />\n\n                <AddSynonymByIdForm\n                    tagId={tagId}\n                    tagContent={tagDetails.content}\n                />\n\n                <hr />\n\n                <AddRelatedTagByIdForm\n                    tagId={tagId}\n                    tagContent={tagDetails.content}\n                />\n            </details>\n        </>\n    );\n};\n\nconst SetPrimarySynonymByContentForm: FunctionComponent<{\n    tagId: TagId;\n    tagContent: string;\n}> = ({ tagId, tagContent }) => {\n    const utils = trpc.useContext();\n\n    const createSynonymMutation = trpc.moderation.tag.createSynonym.useMutation(\n        {}\n    );\n\n    const { handleSubmit: handleSubmitSetPrimary, control: controlSetPrimary } =\n        useForm<SetPrimaryByContentInputs>({\n            defaultValues: {\n                primaryTag: [],\n            },\n        });\n\n    const onSetPrimary: SubmitHandler<SetPrimaryByContentInputs> = async (\n        data\n    ) => {\n        const primarySynonym = await utils.moderation.tag.getByContent.fetch({\n            content: data.primaryTag[0],\n        });\n\n        await createSynonymMutation.mutateAsync({\n            primarySynonymId: primarySynonym.tagId,\n            otherTagId: tagId,\n        });\n\n        location.reload();\n    };\n\n    return (\n        <form onSubmit={handleSubmitSetPrimary(onSetPrimary)}>\n            <h3 className=\"text-xl\">set new primary tag for #{tagContent}</h3>\n\n            <p>uses the first tag</p>\n            <div className=\"not-prose flex flex-col rounded-lg border border-gray-500 p-3\">\n                <Controller\n                    control={controlSetPrimary}\n                    name=\"primaryTag\"\n                    render={({ field }) => (\n                        <TokenInput\n                            TokenIcon={HashtagIcon}\n                            setTokens={field.onChange}\n                            tokens={field.value}\n                            getSuggestions={true}\n                            placeholder=\"Pick a tag!\"\n                        />\n                    )}\n                />\n            </div>\n\n            <BasicButton\n                type=\"submit\"\n                buttonSize=\"regular\"\n                buttonColor=\"cherry\"\n            >\n                set\n            </BasicButton>\n        </form>\n    );\n};\n\nconst SetPrimarySynonymByIdForm: FunctionComponent<{\n    tagId: TagId;\n    tagContent: string;\n}> = ({ tagId, tagContent }) => {\n    const createSynonymMutation = trpc.moderation.tag.createSynonym.useMutation(\n        {}\n    );\n\n    const { handleSubmit: handleSubmitSetPrimary, register } =\n        useForm<SetPrimaryByIdInputs>({\n            defaultValues: {\n                primaryTagId: \"\" as TagId,\n            },\n        });\n\n    const onSetPrimary: SubmitHandler<SetPrimaryByIdInputs> = async (data) => {\n        await createSynonymMutation.mutateAsync({\n            primarySynonymId: data.primaryTagId as TagId,\n            otherTagId: tagId,\n        });\n\n        location.reload();\n    };\n\n    return (\n        <form onSubmit={handleSubmitSetPrimary(onSetPrimary)}>\n            <h3 className=\"text-xl\">set new primary tag for #{tagContent}</h3>\n\n            <div className=\"not-prose flex flex-col rounded-lg border border-gray-500 p-3\">\n                <label>\n                    primary tag ID\n                    <input type=\"number\" {...register(\"primaryTagId\")} />\n                </label>\n            </div>\n\n            <BasicButton\n                type=\"submit\"\n                buttonSize=\"regular\"\n                buttonColor=\"cherry\"\n            >\n                set\n            </BasicButton>\n        </form>\n    );\n};\n\nconst AddSynonymsByContentForm: FunctionComponent<{\n    tagId: TagId;\n    tagContent: string;\n}> = ({ tagId, tagContent }) => {\n    const createSynonymMutation = trpc.moderation.tag.createSynonym.useMutation(\n        {}\n    );\n\n    const utils = trpc.useContext();\n\n    const {\n        handleSubmit: handleSubmitAddSynonyms,\n        control: controlAddSynonyms,\n    } = useForm<AddSynonymsByContentInputs>({\n        defaultValues: {\n            synonyms: [],\n        },\n    });\n\n    const onAddSynonyms: SubmitHandler<AddSynonymsByContentInputs> = async (\n        data\n    ) => {\n        await Promise.all(\n            data.synonyms.map((content) =>\n                utils.moderation.tag.getByContent\n                    .fetch({ content })\n                    .then((tag) =>\n                        createSynonymMutation.mutateAsync({\n                            primarySynonymId: tagId,\n                            otherTagId: tag.tagId,\n                        })\n                    )\n            )\n        );\n\n        location.reload();\n    };\n\n    return (\n        <form onSubmit={handleSubmitAddSynonyms(onAddSynonyms)}>\n            <h3 className=\"text-xl\">add child synonyms for #{tagContent}</h3>\n\n            <div className=\"not-prose flex flex-col rounded-lg border border-gray-500 p-3\">\n                <Controller\n                    control={controlAddSynonyms}\n                    name=\"synonyms\"\n                    render={({ field }) => (\n                        <TokenInput\n                            TokenIcon={HashtagIcon}\n                            setTokens={field.onChange}\n                            tokens={field.value}\n                            getSuggestions={true}\n                            placeholder=\"Pick a tag!\"\n                        />\n                    )}\n                />\n            </div>\n\n            <BasicButton\n                type=\"submit\"\n                buttonSize=\"regular\"\n                buttonColor=\"cherry\"\n            >\n                add\n            </BasicButton>\n        </form>\n    );\n};\n\nconst AddSynonymByIdForm: FunctionComponent<{\n    tagId: TagId;\n    tagContent: string;\n}> = ({ tagId, tagContent }) => {\n    const createSynonymMutation = trpc.moderation.tag.createSynonym.useMutation(\n        {}\n    );\n\n    const { handleSubmit: handleSubmitAddSynonyms, register } =\n        useForm<AddSynonymByIdInputs>({\n            defaultValues: {\n                synonymTagId: \"\" as TagId,\n            },\n        });\n\n    const onAddSynonyms: SubmitHandler<AddSynonymByIdInputs> = async (data) => {\n        await createSynonymMutation.mutateAsync({\n            primarySynonymId: tagId,\n            otherTagId: data.synonymTagId as TagId,\n        });\n\n        location.reload();\n    };\n\n    return (\n        <form onSubmit={handleSubmitAddSynonyms(onAddSynonyms)}>\n            <h3 className=\"text-xl\">add child synonym for #{tagContent}</h3>\n\n            <div className=\"not-prose flex flex-col rounded-lg border border-gray-500 p-3\">\n                <label>\n                    child synonym tag ID\n                    <input type=\"number\" {...register(\"synonymTagId\")} />\n                </label>\n            </div>\n\n            <BasicButton\n                type=\"submit\"\n                buttonSize=\"regular\"\n                buttonColor=\"cherry\"\n            >\n                add\n            </BasicButton>\n        </form>\n    );\n};\n\nconst AddRelatedTagsByContentForm: FunctionComponent<{\n    tagId: TagId;\n    tagContent: string;\n}> = ({ tagId, tagContent }) => {\n    const createRelationMutation =\n        trpc.moderation.tag.createRelation.useMutation({});\n\n    const utils = trpc.useContext();\n\n    const { handleSubmit, control } = useForm<AddRelatedTagsByContentInputs>({\n        defaultValues: {\n            relatedTags: [],\n        },\n    });\n\n    const onAddRelatedTags: SubmitHandler<\n        AddRelatedTagsByContentInputs\n    > = async (data) => {\n        await Promise.all(\n            data.relatedTags.map((content) =>\n                utils.moderation.tag.getByContent\n                    .fetch({ content })\n                    .then((tag) =>\n                        createRelationMutation.mutateAsync({\n                            tagIdA: tagId,\n                            tagIdB: tag.tagId,\n                        })\n                    )\n            )\n        );\n\n        location.reload();\n    };\n\n    return (\n        <form onSubmit={handleSubmit(onAddRelatedTags)}>\n            <h3 className=\"text-xl\">add a related tag to #{tagContent}</h3>\n\n            <div className=\"not-prose flex flex-col rounded-lg border border-gray-500 p-3\">\n                <Controller\n                    control={control}\n                    name=\"relatedTags\"\n                    render={({ field }) => (\n                        <TokenInput\n                            TokenIcon={HashtagIcon}\n                            setTokens={field.onChange}\n                            tokens={field.value}\n                            getSuggestions={true}\n                            placeholder=\"Pick a tag!\"\n                        />\n                    )}\n                />\n            </div>\n            <BasicButton\n                type=\"submit\"\n                buttonSize=\"regular\"\n                buttonColor=\"cherry\"\n            >\n                add\n            </BasicButton>\n        </form>\n    );\n};\n\nconst AddRelatedTagByIdForm: FunctionComponent<{\n    tagId: TagId;\n    tagContent: string;\n}> = ({ tagId, tagContent }) => {\n    const createRelationMutation =\n        trpc.moderation.tag.createRelation.useMutation({});\n\n    const { handleSubmit, register } = useForm<AddRelatedByIdInputs>({\n        defaultValues: {\n            relatedTagId: \"\" as TagId,\n        },\n    });\n\n    const onAddRelatedTags: SubmitHandler<AddRelatedByIdInputs> = async (\n        data\n    ) => {\n        await createRelationMutation.mutateAsync({\n            tagIdA: tagId,\n            tagIdB: data.relatedTagId as TagId,\n        });\n\n        location.reload();\n    };\n\n    return (\n        <form onSubmit={handleSubmit(onAddRelatedTags)}>\n            <h3 className=\"text-xl\">add a related tag to #{tagContent}</h3>\n\n            <div className=\"not-prose flex flex-col rounded-lg border border-gray-500 p-3\">\n                <label>\n                    related tag ID\n                    <input type=\"number\" {...register(\"relatedTagId\")} />\n                </label>\n            </div>\n            <BasicButton\n                type=\"submit\"\n                buttonSize=\"regular\"\n                buttonColor=\"cherry\"\n            >\n                add\n            </BasicButton>\n        </form>\n    );\n};\n\nexport const TagOntologyManageTagsPage: FunctionComponent = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [detailsTagId, setDetailsTagId] = useState<TagId>(\n        () => (searchParams.get(\"tagId\") ?? \"\") as TagId\n    );\n\n    const [, startTransition] = useTransition();\n\n    const onSelectTagId = useCallback(\n        (tagId: TagId) => {\n            startTransition(() => {\n                setDetailsTagId(tagId);\n                setSearchParams(\n                    (params) => {\n                        params.set(\"tagId\", tagId);\n                        return params;\n                    },\n                    {\n                        replace: true,\n                    }\n                );\n            });\n        },\n        [setSearchParams]\n    );\n\n    return (\n        <div\n            className=\"cohost-shadow-light dark:cohost-shadow-dark container\n                mx-auto mt-12 flex flex-col gap-4 rounded-lg bg-notWhite p-3 text-notBlack\"\n        >\n            <div className=\"prose\">\n                <h1 className=\"text-4xl\">manage tags</h1>\n\n                <TagSearch onTagSelected={onSelectTagId} />\n\n                <hr />\n\n                <TagDetails\n                    tagId={detailsTagId}\n                    onTagSelected={onSelectTagId}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default TagOntologyManageTagsPage;\n"],"names":["ButtonStyle","z","ButtonColor","baseColors","buttonStyle","color","className","optional","classnames","pillClasses","roundrectClasses","authnStyleClasses","cherryClasses","strawberryClasses","redClasses","greenClasses","mangoClasses","notBlackClasses","accentClasses","secondaryClasses","authnPrimaryColorClasses","authnOtherColorClasses","sharedClasses","props","Button","React","ref","classes","_extends","children","displayName","LinkButton","TagSearch","onTagSelected","searchParams","setSearchParams","useSearchParams","searchToken","setSearchToken","useState","get","data","searchResults","trpc","query","suspense","enabled","startTransition","useTransition","register","registerSearch","handleSubmit","handleSubmitSearch","useForm","defaultValues","content","onSubmit","params","set","replace","type","BasicButton","buttonSize","buttonColor","map","tag","key","tagId","onClick","href","sitemap","tagSlug","toString","target","rel","primarySynonymContent","TagDetails","tagDetails","resetPrimarySynonymMutation","synonymsAndRelatedTags","_","relatedTags","filter","groupBy","relationship","value","synonyms","primarySynonym","mutate","location","reload","length","SetPrimarySynonymByContentForm","tagContent","AddSynonymsByContentForm","AddRelatedTagsByContentForm","SetPrimarySynonymByIdForm","AddSynonymByIdForm","AddRelatedTagByIdForm","utils","createSynonymMutation","handleSubmitSetPrimary","control","controlSetPrimary","primaryTag","async","moderation","getByContent","fetch","mutateAsync","primarySynonymId","otherTagId","Controller","name","render","field","TokenInput","TokenIcon","HashtagIcon","setTokens","onChange","tokens","getSuggestions","placeholder","primaryTagId","handleSubmitAddSynonyms","controlAddSynonyms","Promise","all","then","synonymTagId","createRelationMutation","tagIdA","tagIdB","relatedTagId","TagOntologyManageTagsPage","detailsTagId","setDetailsTagId","onSelectTagId","useCallback"],"sourceRoot":""}