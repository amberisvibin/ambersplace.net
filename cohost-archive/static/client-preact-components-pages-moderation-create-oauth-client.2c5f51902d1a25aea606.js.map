{"version":3,"file":"client-preact-components-pages-moderation-create-oauth-client.2c5f51902d1a25aea606.js","mappings":"0fAsBO,MAAMA,EAA4CC,IACrD,MAAM,SAAEC,EAAQ,aAAEC,IAAiBC,EAAAA,EAAAA,IAAiC,CAChEC,cAAe,CACXC,UAAUC,EAAAA,EAAAA,KACVC,aAPDC,GAAAA,CAAY,IAAIC,SAAS,OAQxBC,aAAc,GACdC,YAAa,MAIfC,EACFC,EAAAA,EAAAA,WAAAA,YAAAA,OAAAA,cAEEC,GAAWC,EAAAA,EAAAA,cACZC,IACG,MAAMC,EAAUL,EAA0BM,YAAY,CAClDb,SAAUW,EAAOX,SACjBE,aAAcS,EAAOT,aACrBG,aAAcM,EAAON,aACrBC,YAAaK,EAAOL,cAGxBQ,EAAAA,GAAAA,QACaF,EAAS,CACdG,QAAS,qBACTC,QAAS,iBACTC,MAAMC,GACEA,aAAeC,EAAAA,GACRD,EAAIE,QAGR,kBAGdC,OAAM,IAAM,SAErB,CAACd,IAGL,OACIe,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,MAAIC,UAAU,sBAAqB,8BAEnCD,EAAAA,cAAA,QACIb,SAAUZ,EAAaY,GACvBc,UAAU,uBAEVD,EAAAA,cAAA,SAAOE,QAAQ,aAAY,aAC3BF,EAAAA,cAAA,QAAAG,EAAA,CAAOC,KAAK,QAAW9B,EAAS,YAAW,CAAE+B,GAAG,eAEhDL,EAAAA,cAAA,SAAOE,QAAQ,iBAAgB,qEAI/BF,EAAAA,cAAA,QAAAG,EAAA,CACIC,KAAK,QACD9B,EAAS,gBAAe,CAC5B+B,GAAG,mBAGPL,EAAAA,cAAA,SAAOE,QAAQ,iBAAgB,iBAC/BF,EAAAA,cAAA,QAAAG,EAAA,CACIC,KAAK,QACD9B,EAAS,gBAAe,CAC5B+B,GAAG,mBAGPL,EAAAA,cAAA,SAAOE,QAAQ,gBAAe,gBAC9BF,EAAAA,cAAA,QAAAG,EAAA,CACIC,KAAK,QACD9B,EAAS,eAAc,CAC3B+B,GAAG,kBAGPL,EAAAA,cAACM,EAAAA,EAAW,CACRF,KAAK,SACLG,WAAW,UACXC,YAAY,UACf,aAOjBpC,EAAsBqC,YAAc,2BAEpC","sources":["webpack:///./preact/components/pages/moderation/create-oauth-client.tsx"],"sourcesContent":["import { trpc } from \"@/client/lib/trpc\";\nimport { OAuthClientId, OAuthClientSecret } from \"@/shared/types/ids\";\nimport { TRPCClientError } from \"@trpc/client\";\nimport React, { FunctionComponent, useCallback } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { toast } from \"react-hot-toast\";\nimport { BasicButton } from \"../../elements/basic-button\";\n// polyfills for node crypto randombytes/randomuuid\nimport randomBytes from \"randombytes\";\nimport { v4 } from \"uuid\";\n\ntype CreateOAuthClientInputs = {\n    clientId: OAuthClientId;\n    clientSecret: OAuthClientSecret;\n    friendlyName: string;\n    redirectUri: string;\n};\n\nfunction generateClientSecret(): string {\n    return randomBytes(32).toString(\"hex\");\n}\n\nexport const CreateOAuthClientPage: FunctionComponent = (props) => {\n    const { register, handleSubmit } = useForm<CreateOAuthClientInputs>({\n        defaultValues: {\n            clientId: v4(),\n            clientSecret: generateClientSecret(),\n            friendlyName: \"\",\n            redirectUri: \"\",\n        },\n    });\n\n    const createOAuthClientMutation =\n        trpc.moderation.oauthClient.create.useMutation();\n\n    const onSubmit = useCallback<SubmitHandler<CreateOAuthClientInputs>>(\n        (inputs) => {\n            const promise = createOAuthClientMutation.mutateAsync({\n                clientId: inputs.clientId as OAuthClientId,\n                clientSecret: inputs.clientSecret as OAuthClientSecret,\n                friendlyName: inputs.friendlyName,\n                redirectUri: inputs.redirectUri,\n            });\n\n            toast\n                .promise(promise, {\n                    loading: \"creating client...\",\n                    success: \"client created\",\n                    error(err) {\n                        if (err instanceof TRPCClientError) {\n                            return err.message;\n                        }\n\n                        return \"unknown error\";\n                    },\n                })\n                .catch(() => null);\n        },\n        [createOAuthClientMutation]\n    );\n\n    return (\n        <>\n            <h1 className=\"text-4xl font-bold\">create OAuth client record</h1>\n\n            <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"flex flex-col gap-4\"\n            >\n                <label htmlFor=\"client-id\">client id</label>\n                <input type=\"text\" {...register(\"clientId\")} id=\"client-id\" />\n\n                <label htmlFor=\"client-secret\">\n                    client secret (this will never be displayed again, write it\n                    down)\n                </label>\n                <input\n                    type=\"text\"\n                    {...register(\"clientSecret\")}\n                    id=\"client-secret\"\n                />\n\n                <label htmlFor=\"friendly-name\">friendly name</label>\n                <input\n                    type=\"text\"\n                    {...register(\"friendlyName\")}\n                    id=\"friendly-name\"\n                />\n\n                <label htmlFor=\"redirect-uri\">redirect URI</label>\n                <input\n                    type=\"text\"\n                    {...register(\"redirectUri\")}\n                    id=\"redirect-uri\"\n                />\n\n                <BasicButton\n                    type=\"submit\"\n                    buttonSize=\"regular\"\n                    buttonColor=\"cherry\"\n                >\n                    submit\n                </BasicButton>\n            </form>\n        </>\n    );\n};\nCreateOAuthClientPage.displayName = \"create-oauth-client-page\";\n\nexport default CreateOAuthClientPage;\n"],"names":["CreateOAuthClientPage","props","register","handleSubmit","useForm","defaultValues","clientId","v4","clientSecret","randomBytes","toString","friendlyName","redirectUri","createOAuthClientMutation","trpc","onSubmit","useCallback","inputs","promise","mutateAsync","toast","loading","success","error","err","TRPCClientError","message","catch","React","className","htmlFor","_extends","type","id","BasicButton","buttonSize","buttonColor","displayName"],"sourceRoot":""}