{"version":3,"file":"client-preact-components-pages-single-post-view.54bc4e1d90c7c9696b34.js","mappings":"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","sources":["webpack:///./preact/components/partials/project-page/single-post-feed.tsx","webpack:///./preact/components/pages/single-post-view.tsx","webpack:///./preact/components/partials/opengraph.tsx"],"sourcesContent":["import { trpc } from \"@/client/lib/trpc\";\nimport { useDisplayPrefs } from \"@/client/preact/hooks/use-display-prefs\";\nimport { PostId, ProjectHandle } from \"@/shared/types/ids\";\nimport React, { FunctionComponent, useMemo } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { PostPreview } from \"../../posts/post-preview\";\nimport { PostOpenGraph } from \"../opengraph\";\n\nexport const SinglePostFeed: FunctionComponent<{\n    handle: ProjectHandle;\n    postId: PostId;\n    nonce?: string;\n}> = ({ handle, postId, nonce }) => {\n    const displayPrefs = useDisplayPrefs();\n\n    const fetchedPost = trpc.posts.singlePost.useQuery(\n        {\n            handle,\n            postId,\n            nonce,\n        },\n        {\n            suspense: true,\n        }\n    );\n\n    const pageTitle = useMemo(() => {\n        if (fetchedPost.data?.post.headline) {\n            return `\"${fetchedPost.data.post.headline}\"`;\n        }\n\n        return `post from @${\n            fetchedPost.data?.post.postingProject.handle ?? \"unknown\"\n        }`;\n    }, [\n        fetchedPost.data?.post.headline,\n        fetchedPost.data?.post.postingProject.handle,\n    ]);\n\n    if (!fetchedPost.data) {\n        return null;\n    }\n\n    return (\n        <>\n            <Helmet title={pageTitle} />\n            <div className=\"mt-4 flex flex-col gap-4\">\n                <PostOpenGraph viewModel={fetchedPost.data.post} />\n                <PostPreview\n                    viewModel={fetchedPost.data.post}\n                    highlightedTags={[]}\n                    condensed={true}\n                    skipCollapse={true}\n                    showThreadCollapser={false}\n                    displayPrefs={displayPrefs}\n                    commentThreads={fetchedPost.data.comments}\n                />\n            </div>\n        </>\n    );\n};\n","import { AccessResult } from \"@/shared/types/access-result\";\nimport { PostId } from \"@/shared/types/ids\";\nimport { WireProjectModel } from \"@/shared/types/projects\";\nimport React, { FunctionComponent } from \"react\";\nimport ProfileView from \"../partials/profile-view\";\nimport { SinglePostFeed } from \"../partials/project-page/single-post-feed\";\n\ntype SinglePostViewProps = {\n    project: WireProjectModel;\n    postId: PostId;\n    nonce?: string;\n};\n\nexport const SinglePostView: FunctionComponent<SinglePostViewProps> = ({\n    project,\n    postId,\n    nonce,\n}) => {\n    return (\n        <div className=\"container mx-auto flex flex-grow flex-col\">\n            <ProfileView\n                project={project}\n                canAccessPermissions={{\n                    // these get overwritten by the post view model's access\n                    // flags, so don't worry if they're less restrictive than\n                    // they look like they should be\n                    canRead: AccessResult.Allowed,\n                    canEdit: AccessResult.NotAllowed,\n                    canShare: AccessResult.Allowed,\n                    canInteract: AccessResult.Allowed,\n                }}\n            >\n                <SinglePostFeed\n                    postId={postId}\n                    nonce={nonce}\n                    handle={project.handle}\n                />\n            </ProfileView>\n        </div>\n    );\n};\n\nexport default SinglePostView;\nSinglePostView.displayName = \"single-post-view\";\n","import { renderPostSummary } from \"@/client/lib/markdown/post-rendering\";\nimport sitemap from \"@/shared/sitemap\";\nimport {\n    AttachmentViewBlock,\n    getAttachmentViewBlocks,\n    isAttachmentRowViewBlock,\n    isAttachmentViewBlock,\n} from \"@/shared/types/post-blocks\";\nimport { WireProjectModel } from \"@/shared/types/projects\";\nimport { WirePostViewModel } from \"@/shared/types/wire-models\";\nimport React, {\n    cloneElement,\n    FunctionComponent,\n    isValidElement,\n    ReactElement,\n    useMemo,\n} from \"react\";\nimport { Helmet } from \"react-helmet-async\";\n\n/**\n * Needed to get around helmet still not supporting react fragmets for some reason.\n *\n * See: https://github.com/nfl/react-helmet/issues/342#issuecomment-432537982\n * for prior art.\n * @param fragment a fragment containing child vnodes. any non-vnodes are in the output!\n * @returns an array of vnodes, which helmet is fine with.\n */\nfunction renderFragment(\n    { props: { children } }: ReactElement<{ children: React.ReactNode }>,\n    key: string\n) {\n    return React.Children.toArray(children)\n        .filter(isValidElement)\n        .map((child, childIndex) =>\n            cloneElement(child, {\n                key: `${key}-${childIndex}`,\n            })\n        );\n}\n\nexport const PostOpenGraph: FunctionComponent<{\n    viewModel: WirePostViewModel;\n}> = ({ viewModel: initialViewModel }) => {\n    const viewModel = useMemo(() => {\n        if (!initialViewModel.transparentShareOfPostId) return initialViewModel;\n\n        // if it's a transparent share, get the opaque post\n        return (\n            initialViewModel.shareTree.find(\n                (vm) => vm.postId === initialViewModel.transparentShareOfPostId\n                // this shouldn't happen but in the event we don't have a share\n                // tree, return the initial view model as fallback.\n            ) ?? initialViewModel\n        );\n    }, [initialViewModel]);\n\n    const attachmentBlocks = useMemo(\n        () => getAttachmentViewBlocks(viewModel.blocks),\n        [viewModel.blocks]\n    );\n\n    const siteTitle = `${\n        viewModel.postingProject.displayName\n            ? viewModel.postingProject.displayName\n            : `@${viewModel.postingProject.handle}`\n    } on cohost`;\n\n    return (\n        <Helmet>\n            {/* opengraph */}\n            <meta property=\"og:site_name\" content={siteTitle} />\n            {viewModel.headline ? (\n                <meta property=\"og:title\" content={viewModel.headline} />\n            ) : (\n                <meta property=\"og:title\" content={siteTitle} />\n            )}\n            <meta\n                property=\"og:description\"\n                content={renderPostSummary(viewModel, {\n                    myPost: false,\n                    skipHeadline: true,\n                })}\n            />\n            <meta property=\"og:type\" content=\"article\" />\n            <meta\n                property=\"article:published_time\"\n                content={viewModel.publishedAt}\n            />\n            <meta\n                property=\"article:author\"\n                content={sitemap.public.project\n                    .mainAppProfile({\n                        projectHandle: viewModel.postingProject.handle,\n                    })\n                    .toString()}\n            />\n            <meta\n                property=\"og:url\"\n                // we still want to link to the initial view model's single post\n                // page in the event of a transparent share, as that's what the\n                // user would have actually pasted in.\n                content={initialViewModel.singlePostPageUrl.toString()}\n            />\n            <link\n                href={initialViewModel.singlePostPageUrl.toString()}\n                rel=\"alternate\"\n                type=\"application/activity+json\"\n            />\n            {viewModel.tags.map((tag) => (\n                <meta property=\"article:tag\" content={tag} key={tag} />\n            ))}\n\n            {/* hide image previews if the post is 18+ or has any content warnings */}\n            {!viewModel.effectiveAdultContent && viewModel.cws.length === 0\n                ? attachmentBlocks.map((attachment) => {\n                      switch (attachment.attachment.kind) {\n                          case \"image\":\n                              return (\n                                  <meta\n                                      key={attachment.attachment.attachmentId}\n                                      property=\"og:image\"\n                                      content={attachment.attachment.fileURL}\n                                  />\n                              );\n                          case \"audio\":\n                              return (\n                                  <meta\n                                      key={attachment.attachment.attachmentId}\n                                      property=\"og:audio\"\n                                      content={attachment.attachment.fileURL}\n                                  />\n                              );\n                      }\n                  })\n                : null}\n\n            {/* if we don't have any attachments, render the page's avatar */}\n            {!attachmentBlocks.length ? (\n                renderFragment(\n                    <>\n                        <meta\n                            property=\"og:image\"\n                            content={viewModel.postingProject.avatarURL}\n                        />\n                        <meta\n                            property=\"og:image:alt\"\n                            content={viewModel.postingProject.handle}\n                        />\n                        <meta property=\"og:image:width\" content=\"128\" />\n                        <meta property=\"og:image:height\" content=\"128\" />\n                        <meta property=\"twitter:card\" content=\"summary\" />\n                    </>,\n                    \"avatar\"\n                )\n            ) : (\n                <meta property=\"twitter:card\" content=\"summary_large_image\" />\n            )}\n        </Helmet>\n    );\n};\n\nexport const ProjectOpenGraph: FunctionComponent<{\n    project: WireProjectModel;\n}> = ({ project }) => {\n    const siteTitle = `${\n        project.displayName ? project.displayName : `@${project.handle}`\n    } on cohost`;\n\n    return (\n        <Helmet>\n            {/* opengraph */}\n            <meta property=\"og:site_name\" content=\"cohost\" />\n            <meta property=\"og:title\" content={siteTitle} />\n            {project.dek ? (\n                <meta property=\"og:description\" content={project.dek} />\n            ) : null}\n            <meta property=\"og:type\" content=\"profile\" />\n            {project.displayName ? (\n                <meta\n                    property=\"profile:first_name\"\n                    content={project.displayName}\n                />\n            ) : null}\n            <meta property=\"profile:username\" content={project.handle} />\n            <meta\n                property=\"og:url\"\n                content={sitemap.public.project\n                    .mainAppProfile({\n                        projectHandle: project.handle,\n                    })\n                    .toString()}\n            />\n\n            <meta property=\"og:image\" content={project.avatarURL} />\n            <meta property=\"og:image:alt\" content={project.handle} />\n            <meta property=\"og:image:width\" content=\"128\" />\n            <meta property=\"og:image:height\" content=\"128\" />\n            {/* twitter card */}\n            <meta property=\"twitter:card\" content=\"summary\" />\n        </Helmet>\n    );\n};\n\nexport const TagPageOpenGraph: FunctionComponent<{\n    tagName: string;\n}> = ({ tagName }) => {\n    return (\n        <Helmet>\n            {/* opengraph */}\n            <meta property=\"og:site_name\" content=\"cohost\" />\n            <meta property=\"og:title\" content={`#${tagName} on cohost`} />\n            <meta\n                property=\"og:description\"\n                content={`read more posts about #${tagName} on cohost`}\n            />\n            <meta property=\"og:type\" content=\"website\" />\n            <meta\n                property=\"og:url\"\n                content={sitemap.public.tags({ tagSlug: tagName }).toString()}\n            />\n\n            {/* twitter card */}\n            <meta property=\"twitter:card\" content=\"summary\" />\n        </Helmet>\n    );\n};\n"],"names":["SinglePostFeed","handle","postId","nonce","displayPrefs","useDisplayPrefs","fetchedPost","trpc","suspense","pageTitle","useMemo","data","post","headline","postingProject","React","Helmet","title","className","PostOpenGraph","viewModel","PostPreview","highlightedTags","condensed","skipCollapse","showThreadCollapser","commentThreads","comments","SinglePostView","project","ProfileView","canAccessPermissions","canRead","AccessResult","canEdit","canShare","canInteract","displayName","initialViewModel","transparentShareOfPostId","shareTree","find","vm","attachmentBlocks","getAttachmentViewBlocks","blocks","siteTitle","property","content","renderPostSummary","myPost","skipHeadline","publishedAt","sitemap","projectHandle","toString","singlePostPageUrl","href","rel","type","tags","map","tag","key","effectiveAdultContent","cws","length","attachment","kind","attachmentId","fileURL","props","children","filter","isValidElement","child","childIndex","cloneElement","renderFragment","avatarURL","ProjectOpenGraph","dek","TagPageOpenGraph","tagName","tagSlug"],"sourceRoot":""}