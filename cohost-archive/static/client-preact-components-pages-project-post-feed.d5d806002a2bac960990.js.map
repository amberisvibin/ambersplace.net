{"version":3,"file":"client-preact-components-pages-project-post-feed.d5d806002a2bac960990.js","mappings":"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","sources":["webpack:///./preact/components/partials/no-posts-placeholder.tsx","webpack:///./preact/components/partials/project-post-feed-pagination.tsx","webpack:///./preact/components/pages/project-post-feed.tsx","webpack:///../node_modules/.pnpm/@heroicons+react@2.0.13_react@18.0.0/node_modules/@heroicons/react/24/outline/esm/ChevronRightIcon.js","webpack:///./preact/components/partials/pagination-eggs.tsx"],"sourcesContent":["import React, { FunctionComponent } from \"react\";\n\nexport const NoPostsPlaceholder: FunctionComponent<{\n    children: React.ReactNode;\n}> = ({ children }) => {\n    return (\n        <div\n            className={`cohost-shadow-light dark:cohost-shadow-dark flex flex-row \n                gap-3 rounded-lg bg-notWhite p-3 text-cherry`}\n        >\n            {children}\n        </div>\n    );\n};\n","import { sitemap } from \"@/shared/sitemap\";\nimport { ProjectHandle } from \"@/shared/types/ids\";\nimport React, { FunctionComponent } from \"react\";\nimport PaginationEggs from \"../partials/pagination-eggs\";\n\ntype RefTimestampOffsetLimitPaginationMode = {\n    mode: \"refTimestampOffsetLimit\";\n    refTimestamp: number;\n    currentSkip: number;\n    morePagesForward: boolean;\n    morePagesBackward: boolean;\n    idealPageStride: number;\n    pageUrlFactoryName: string;\n    tagSlug?: string;\n    projectHandle?: ProjectHandle;\n};\ntype BeforeAfterLimitPaginationMode = {\n    mode: \"beforeAfterLimit\";\n    beforeTime: number | undefined;\n    afterTime: number | undefined;\n    pageUrlFactoryName: string;\n    tagSlug?: string;\n    projectHandle?: ProjectHandle;\n};\n\nexport type PaginationMode =\n    | { mode: false }\n    | RefTimestampOffsetLimitPaginationMode\n    | BeforeAfterLimitPaginationMode;\n\ntype PageUrlFactory<TOtherQueryParams = Record<string, never>> = (\n    args?: {\n        refTimestamp: number | undefined;\n        skipPosts: number | undefined;\n        tagSlug: string | undefined;\n        projectHandle: ProjectHandle | undefined;\n        afterTime: number | undefined;\n        beforeTime: number | undefined;\n    } & TOtherQueryParams\n) => URL;\n\nconst getPageUrlFactory = <TOtherQueryParams,>(pageUrlFactoryName: string) => {\n    return pageUrlFactoryName.split(\".\").reduce(\n        // @ts-expect-error it's kind of impossible to type this correctly unfortunately\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        (sitemap, key) => sitemap[key],\n        sitemap.public\n    ) as unknown as PageUrlFactory<TOtherQueryParams>;\n};\n\n//#region refTimestampOffsetLimit\ninterface RefTimestampOffsetLimitPaginationProps<TOtherQueryParams> {\n    paginationMode: RefTimestampOffsetLimitPaginationMode;\n    postsLength: number;\n    otherQueryParams: TOtherQueryParams;\n}\n\nconst RefTimestampOffsetLimitPagination = <TOtherQueryParams,>({\n    paginationMode,\n    postsLength,\n    otherQueryParams,\n}: RefTimestampOffsetLimitPaginationProps<TOtherQueryParams>) => {\n    const pageUrlFactory = getPageUrlFactory<TOtherQueryParams>(\n        paginationMode.pageUrlFactoryName\n    );\n    const paginationLinkForward = paginationMode.morePagesForward\n        ? pageUrlFactory({\n              refTimestamp: paginationMode.refTimestamp,\n              skipPosts: paginationMode.currentSkip + postsLength,\n              tagSlug: paginationMode.tagSlug,\n              projectHandle: paginationMode.projectHandle,\n              beforeTime: undefined,\n              afterTime: undefined,\n              ...otherQueryParams,\n          }).toString()\n        : undefined;\n\n    let paginationLinkBack: string | undefined;\n\n    if (paginationMode.morePagesBackward) {\n        if (paginationMode.currentSkip <= paginationMode.idealPageStride) {\n            // go back to the live feed\n            paginationLinkBack = pageUrlFactory({\n                tagSlug: paginationMode.tagSlug,\n                refTimestamp: undefined,\n                skipPosts: undefined,\n                projectHandle: paginationMode.projectHandle,\n                beforeTime: undefined,\n                afterTime: undefined,\n                ...otherQueryParams,\n            }).toString();\n        } else {\n            // go back to a previous page of the backlog\n            paginationLinkBack = pageUrlFactory({\n                refTimestamp: paginationMode.refTimestamp,\n                skipPosts: Math.max(\n                    0,\n                    paginationMode.currentSkip - paginationMode.idealPageStride\n                ),\n                tagSlug: paginationMode.tagSlug,\n                projectHandle: paginationMode.projectHandle,\n                beforeTime: undefined,\n                afterTime: undefined,\n                ...otherQueryParams,\n            }).toString();\n        }\n    }\n\n    return (\n        <PaginationEggs\n            backLink={paginationLinkBack}\n            forwardLink={paginationLinkForward}\n        />\n    );\n};\n//#endregion\n\n//#region beforeAfterLimit\ninterface BeforeAfterTimestampLimitPaginationArgs<TOtherQueryParams> {\n    paginationMode: BeforeAfterLimitPaginationMode;\n    otherQueryParams: TOtherQueryParams;\n}\n\nconst BeforeAfterTimestampLimitPagination = <TOtherQueryParams,>({\n    paginationMode,\n    otherQueryParams,\n}: BeforeAfterTimestampLimitPaginationArgs<TOtherQueryParams>) => {\n    const pageUrlFactory = getPageUrlFactory(paginationMode.pageUrlFactoryName);\n    const paginationLinkForward = paginationMode.beforeTime\n        ? pageUrlFactory({\n              refTimestamp: undefined,\n              skipPosts: undefined,\n              tagSlug: paginationMode.tagSlug,\n              projectHandle: paginationMode.projectHandle,\n              beforeTime: paginationMode.beforeTime,\n              afterTime: undefined,\n              ...otherQueryParams,\n          }).toString()\n        : undefined;\n\n    const paginationLinkBack = paginationMode.afterTime\n        ? pageUrlFactory({\n              refTimestamp: undefined,\n              skipPosts: undefined,\n              tagSlug: paginationMode.tagSlug,\n              projectHandle: paginationMode.projectHandle,\n              beforeTime: undefined,\n              afterTime: paginationMode.afterTime,\n              ...otherQueryParams,\n          }).toString()\n        : undefined;\n\n    return (\n        <PaginationEggs\n            backLink={paginationLinkBack}\n            forwardLink={paginationLinkForward}\n        />\n    );\n};\n//#endregion\n\ninterface ProjectPostFeedPaginationProps<TOtherQueryParams> {\n    paginationMode: PaginationMode;\n    postsLength: number;\n    otherQueryParams: TOtherQueryParams;\n}\n\nexport const ProjectPostFeedPagination = <TOtherQueryParams,>({\n    paginationMode,\n    postsLength,\n    otherQueryParams,\n}: ProjectPostFeedPaginationProps<TOtherQueryParams>) => {\n    if (paginationMode.mode === \"refTimestampOffsetLimit\") {\n        return (\n            <RefTimestampOffsetLimitPagination\n                paginationMode={paginationMode}\n                postsLength={postsLength}\n                otherQueryParams={otherQueryParams}\n            />\n        );\n    } else if (paginationMode.mode === \"beforeAfterLimit\") {\n        return (\n            <BeforeAfterTimestampLimitPagination\n                paginationMode={paginationMode}\n                otherQueryParams={otherQueryParams}\n            />\n        );\n    }\n\n    return null;\n};\n","import { PostPreview } from \"@/client/preact/components/posts/post-preview\";\nimport { ProjectHandle } from \"@/shared/types/ids\";\nimport { WirePostViewModel } from \"@/shared/types/wire-models\";\nimport { DocumentTextIcon } from \"@heroicons/react/24/outline\";\nimport loadable from \"@loadable/component\";\nimport React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport RenderIfVisible from \"react-render-if-visible\";\nimport { useCurrentProject } from \"../../hooks/data-loaders\";\nimport { useDisplayPrefs } from \"../../hooks/use-display-prefs\";\nimport { useModalPostComposer } from \"../modal-post-composer-context\";\nimport { NoPostsPlaceholder } from \"../partials/no-posts-placeholder\";\nimport {\n    PaginationMode,\n    ProjectPostFeedPagination,\n} from \"../partials/project-post-feed-pagination\";\nimport { SidebarMenu } from \"../sidebar-menu\";\n\nexport type ProjectPostFeedProps<TQueryParams = Record<string, never>> = {\n    handle?: ProjectHandle;\n    posts: WirePostViewModel[];\n    highlightedTags: readonly string[];\n    paginationMode: PaginationMode;\n    noPostsStringId: string;\n    children?: React.ReactNode;\n    bare?: boolean;\n    condensed?: boolean;\n    queryParams?: TQueryParams;\n};\n\nexport const ProjectPostFeed = Object.assign(\n    <TQueryParams,>({\n        posts,\n        highlightedTags,\n        paginationMode,\n        noPostsStringId,\n        children,\n        bare,\n        condensed,\n        queryParams,\n    }: ProjectPostFeedProps<TQueryParams>) => {\n        const { t } = useTranslation();\n        const currentProject = useCurrentProject();\n        const displayPrefs = useDisplayPrefs();\n\n        const inner = (\n            <>\n                {/* TODO: if we have more than one subcomponent we should \n                            do something fancier than this */}\n                {children}\n\n                <div className=\"flex flex-col gap-12\">\n                    {posts.length > 0 ? (\n                        posts.map((post, index) =>\n                            post ? (\n                                <RenderIfVisible\n                                    key={post.postId}\n                                    initialVisible={index < 4}\n                                    stayRendered={true}\n                                >\n                                    <PostPreview\n                                        viewModel={post}\n                                        highlightedTags={highlightedTags}\n                                        displayPrefs={displayPrefs}\n                                        condensed={condensed}\n                                    />\n                                </RenderIfVisible>\n                            ) : null\n                        )\n                    ) : (\n                        <NoPostsPlaceholder>\n                            <DocumentTextIcon className=\"h-6 w-6\" />\n                            {t(noPostsStringId)}\n                        </NoPostsPlaceholder>\n                    )}\n\n                    <ProjectPostFeedPagination\n                        paginationMode={paginationMode}\n                        postsLength={posts.length}\n                        otherQueryParams={queryParams ?? {}}\n                    />\n                </div>\n            </>\n        );\n\n        const modalPostComposer = useModalPostComposer();\n        useEffect(() => {\n            if (currentProject) {\n                modalPostComposer.setup({\n                    project: currentProject,\n                });\n            }\n        }, [currentProject, modalPostComposer]);\n\n        return bare ? (\n            inner\n        ) : (\n            <main className=\"w-full lg:pt-16\">\n                <div className=\"container mx-auto grid grid-cols-1 gap-16 lg:grid-cols-4\">\n                    <SidebarMenu />\n                    <section className=\"col-span-1 flex flex-col lg:col-span-2\">\n                        {inner}\n                    </section>\n                </div>\n            </main>\n        );\n    },\n    {\n        displayName: \"project-post-feed\",\n    }\n);\n\nexport default ProjectPostFeed;\n","import * as React from \"react\";\n\nfunction ChevronRightIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M8.25 4.5l7.5 7.5-7.5 7.5\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ChevronRightIcon);\nexport default ForwardRef;","import { ChevronRightIcon } from \"@heroicons/react/24/outline\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { IconEgg } from \"../icons/text-egg\";\n\nexport interface PaginationEggProps {\n    backLink: string | undefined;\n    forwardLink: string | undefined;\n    condensed?: boolean | undefined;\n    backOnClick?: React.MouseEventHandler | undefined;\n    forwardOnClick?: React.MouseEventHandler | undefined;\n}\n\nconst paginationEggStyles = classNames(\n    \"h-8\",\n    \"pr-3\",\n    \"fill-secondary\",\n    \"text-notWhite\",\n    \"cohost-shadow-light\",\n    \"dark:cohost-shadow-dark\",\n    \"dark:text-notBlack\"\n);\n\nexport const PaginationEggs: FunctionComponent<PaginationEggProps> = ({\n    backLink,\n    forwardLink,\n    condensed = false,\n    backOnClick,\n    forwardOnClick,\n}) => {\n    return (\n        <div className=\"mb-12 flex flex-row gap-x-6\">\n            {/* to take up the space occupied by the avatar column */}\n            {!condensed ? (\n                <span className=\"hidden w-16 lg:block\">&nbsp;</span>\n            ) : null}\n            {backLink ? (\n                <a href={backLink} onClick={backOnClick}>\n                    <IconEgg className={`${paginationEggStyles} scale-x-[-1]`}>\n                        <ChevronRightIcon />\n                    </IconEgg>\n                </a>\n            ) : null}\n            <span className=\"flex-grow\">&nbsp;</span>\n            {forwardLink ? (\n                <a href={forwardLink} onClick={forwardOnClick}>\n                    <IconEgg className={paginationEggStyles}>\n                        <ChevronRightIcon />\n                    </IconEgg>\n                </a>\n            ) : null}\n        </div>\n    );\n};\n\nexport default PaginationEggs;\n"],"names":["NoPostsPlaceholder","children","React","className","getPageUrlFactory","pageUrlFactoryName","split","reduce","sitemap","key","RefTimestampOffsetLimitPagination","paginationMode","postsLength","otherQueryParams","pageUrlFactory","paginationLinkForward","morePagesForward","refTimestamp","skipPosts","currentSkip","tagSlug","projectHandle","beforeTime","undefined","afterTime","toString","paginationLinkBack","morePagesBackward","idealPageStride","Math","max","PaginationEggs","backLink","forwardLink","BeforeAfterTimestampLimitPagination","ProjectPostFeedPagination","mode","ProjectPostFeed","Object","assign","posts","highlightedTags","noPostsStringId","bare","condensed","queryParams","t","useTranslation","currentProject","useCurrentProject","displayPrefs","useDisplayPrefs","inner","length","map","post","index","RenderIfVisible","postId","initialVisible","stayRendered","PostPreview","viewModel","DocumentTextIcon","modalPostComposer","useModalPostComposer","useEffect","setup","project","SidebarMenu","displayName","title","titleId","props","svgRef","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","paginationEggStyles","classNames","backOnClick","forwardOnClick","href","onClick","IconEgg","ChevronRightIcon"],"sourceRoot":""}