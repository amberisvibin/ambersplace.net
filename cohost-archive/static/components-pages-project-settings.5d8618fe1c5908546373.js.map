{"version":3,"file":"components-pages-project-settings.5d8618fe1c5908546373.js","mappings":"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","sources":["webpack:///./lib/auth-helpers.ts","webpack:///./preact/components/elements/settings-row.tsx","webpack:///./preact/components/elements/styled-input.tsx","webpack:///./preact/components/settings/project-settings/frequently-used-tags-form.tsx","webpack:///./preact/components/settings/project-settings/handle-change-form.tsx","webpack:///./preact/components/settings/project-settings/muted-and-blocked-form.tsx","webpack:///./preact/components/settings/project-settings/project-settings-form.tsx","webpack:///./preact/components/settings/project-settings/queue-for-delete-form.tsx","webpack:///./preact/components/pages/project-settings.tsx","webpack:///./preact/components/settings/form-submit-button-row.tsx","webpack:///./preact/components/settings/shared.tsx","webpack:///./preact/components/unfriendly-timestamp.tsx"],"sourcesContent":["import * as LoginV1Types from \"@/shared/api-types/login-v1\";\n\nexport default class AuthHelpers {\n    static async getSalt(email: string): Promise<string> {\n        const url = new URL(\"/api/v1/login/salt\", document.URL);\n        url.searchParams.append(\"email\", email);\n\n        const response = await fetch(url.toString()).then((resp) =>\n            resp.json().then((data) => data as LoginV1Types.GetSaltResp)\n        );\n\n        return response.salt;\n    }\n\n    static async hashPasswordInWorker(\n        email: string,\n        salt: string,\n        password: string\n    ): Promise<string> {\n        // run this slow hash function in the background\n        // const hashWorker = new Worker(\"/static/hash-worker.js\");\n        const hashWorker = new Worker(\n            new URL(\"./hash-worker.ts\", import.meta.url)\n        );\n\n        return new Promise((resolve) => {\n            hashWorker.onmessage = (\n                e: MessageEvent<{\n                    clientHash: string;\n                }>\n            ): void => {\n                resolve(e.data.clientHash);\n            };\n\n            hashWorker.postMessage({ email, password, salt });\n        });\n    }\n}\n","import React, { FunctionComponent, ReactElement, ReactNode } from \"react\";\nimport { InfoBox, InfoBoxLevel } from \"./info-box\";\nimport classNames from \"classnames\";\n\ntype SettingsRowProps = {\n    bigLabel: ReactNode;\n    smallLabel?: string;\n    inputElement: ReactElement<{ id: string }>;\n    infoBoxLevel?: InfoBoxLevel;\n    infoBoxContent?: ReactElement;\n    customDescription?: ReactElement;\n    disabled?: boolean;\n};\n\nexport const SettingsRow: FunctionComponent<SettingsRowProps> = ({\n    bigLabel,\n    smallLabel,\n    inputElement,\n    infoBoxLevel,\n    infoBoxContent,\n    customDescription,\n    disabled,\n}) => {\n    const bigLabelRowSpanClasses = smallLabel ? \"row-span-1\" : \"row-span-2\";\n    const customDescriptionContent = customDescription ?? null;\n\n    return (\n        <div className=\"grid grid-cols-[1fr_min-content] grid-rows-[min-content] items-center gap-2.5 pt-2.5\">\n            <>\n                <label\n                    htmlFor={inputElement.props.id}\n                    className={classNames(\n                        `col-start-1 row-start-1 font-bold`,\n                        bigLabelRowSpanClasses,\n                        { \"text-gray-300\": disabled }\n                    )}\n                >\n                    {bigLabel}\n                </label>\n\n                {smallLabel ? (\n                    <label\n                        htmlFor={inputElement.props.id}\n                        className={classNames(\n                            \"col-start-1 row-start-2 align-middle\",\n                            { \"text-gray-300\": disabled }\n                        )}\n                    >\n                        {smallLabel}\n                    </label>\n                ) : null}\n\n                <div className=\"col-start-2 row-span-2 row-start-1\">\n                    {inputElement}\n                </div>\n\n                {infoBoxLevel ? (\n                    <InfoBox\n                        level={infoBoxLevel}\n                        className=\"col-span-2 col-start-1\"\n                    >\n                        {infoBoxContent}\n                    </InfoBox>\n                ) : (\n                    customDescriptionContent\n                )}\n\n                <hr className=\"col-span-2 col-start-1 w-full border-gray-300\" />\n            </>\n        </div>\n    );\n};\n","import { CheckIcon, XMarkIcon } from \"@heroicons/react/24/outline\";\nimport classNames from \"classnames\";\nimport React, {\n    InputHTMLAttributes,\n    useEffect,\n    useMemo,\n    useState,\n} from \"react\";\nimport {\n    FieldValues,\n    useController,\n    UseControllerProps,\n    UseFormTrigger,\n} from \"react-hook-form\";\n\ntype InputStyle = \"light\" | \"dark\" | \"dynamic\";\n\ntype StyledInputProps<T extends FieldValues> = {\n    style?: InputStyle;\n    showValidity?: boolean;\n} & UseControllerProps<T> & { trigger: UseFormTrigger<T> } & Pick<\n        InputHTMLAttributes<HTMLInputElement>,\n        | \"type\"\n        | \"autoComplete\"\n        | \"placeholder\"\n        | \"max\"\n        | \"min\"\n        | \"step\"\n        | \"readOnly\"\n        | \"disabled\"\n    >;\n\nexport const StyledInput = <T extends FieldValues>({\n    style = \"light\",\n    showValidity = true,\n    name,\n    control,\n    rules,\n    trigger,\n    ...props\n}: StyledInputProps<T>) => {\n    const { field, fieldState } = useController<T>({\n        name,\n        control,\n        rules,\n    });\n    const { name: fieldName, onChange } = field;\n\n    // setup our own ref so we can track field value\n    const [directRef, setDirectRef] = useState<HTMLInputElement | null>();\n    useEffect(() => {\n        field.ref(directRef);\n    }, [directRef, field]);\n\n    const {\n        inputStyleClasses,\n        contentDivStyleClasses,\n        validityIconStyleClasses,\n    } = useMemo(() => {\n        switch (style) {\n            case \"light\":\n                return {\n                    inputStyleClasses: `border-gray-600 text-notBlack\n                        placeholder:text-gray-600\n                        focus:border-notBlack disabled:border-gray-300`,\n                    contentDivStyleClasses: `to-notWhite`,\n                    validityIconStyleClasses: `bg-notWhite`,\n                };\n            case \"dynamic\":\n                return {\n                    inputStyleClasses: \"co-styled-input\",\n                    contentDivStyleClasses: \"co-styled-input-content\",\n                    validityIconStyleClasses: \"co-styled-input-validity-icon\",\n                };\n            case \"dark\":\n            default:\n                return {\n                    inputStyleClasses: `border-gray-400 text-notWhite \n                        placeholder:text-gray-400\n                        focus:border-notWhite read-only:bg-gray-700`,\n                    contentDivStyleClasses: `to-notBlack`,\n                    validityIconStyleClasses: `bg-notBlack`,\n                };\n        }\n    }, [style]);\n\n    // manually validate when we don't get an input event\n    // can happen on browser autofill\n    useEffect(() => {\n        if (\n            directRef &&\n            directRef.value &&\n            directRef.value !== props.defaultValue &&\n            directRef.value !== field.value &&\n            !fieldState.isTouched\n        ) {\n            onChange(directRef.value);\n            void trigger(fieldName, { shouldFocus: true });\n        }\n    }, [\n        directRef,\n        field.value,\n        fieldName,\n        fieldState.isTouched,\n        onChange,\n        props.defaultValue,\n        trigger,\n    ]);\n    return (\n        <div className=\"relative\">\n            <input\n                className={classNames(\n                    `\n                        w-full min-w-[15rem] rounded-lg border-2 bg-transparent\n                    `,\n                    inputStyleClasses\n                )}\n                {...props}\n                {...field}\n                ref={setDirectRef}\n            />\n            {showValidity && !props.readOnly && fieldState.isTouched ? (\n                <>\n                    <div\n                        className={classNames(\n                            `\n                                absolute bottom-0 right-9 top-0 my-auto h-6 w-3 \n                                bg-gradient-to-r from-transparent\n                            `,\n                            contentDivStyleClasses\n                        )}\n                    />\n                    {fieldState.invalid ? (\n                        <XMarkIcon\n                            className={classNames(\n                                `\n                                    absolute bottom-0 right-3 top-0 my-auto h-6 \n                                    w-6 text-red\n                                `,\n                                validityIconStyleClasses\n                            )}\n                        />\n                    ) : (\n                        <CheckIcon\n                            className={classNames(\n                                `\n                                    absolute bottom-0 right-3 top-0 my-auto h-6\n                                    w-6 bg-notWhite text-green\n                                `,\n                                validityIconStyleClasses\n                            )}\n                        />\n                    )}\n                </>\n            ) : null}\n        </div>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport { HashtagIcon } from \"@heroicons/react/20/solid\";\nimport React, { FunctionComponent } from \"react\";\nimport { Controller, SubmitHandler, useForm } from \"react-hook-form\";\nimport { InfoBox } from \"../../elements/info-box\";\nimport { sectionBoxClasses, sectionTitleClasses } from \"../shared\";\nimport { TokenInput } from \"../../token-input\";\nimport { AuthnButton } from \"../../partials/authn-button\";\nimport classNames from \"classnames\";\n\ntype Inputs = {\n    tagsToDisplay: string[];\n};\n\nexport const FrequentlyUsedTagsForm: FunctionComponent = () => {\n    const { data: tagOptionData } =\n        trpc.projects.frequentlyUsedTags.query.useQuery(undefined, {\n            suspense: true,\n        });\n\n    const { data: project } = trpc.projects.currentProject.useQuery(undefined, {\n        suspense: true,\n    });\n    const utils = trpc.useContext();\n\n    const tagOptions = tagOptionData?.tags.map((tag) => tag.content) ?? [];\n\n    const mutateFrequentlyUsedTags =\n        trpc.projects.frequentlyUsedTags.mutation.useMutation();\n    const { handleSubmit, control } = useForm<Inputs>({\n        defaultValues: {\n            tagsToDisplay: project?.frequentlyUsedTags ?? [],\n        },\n    });\n\n    const onSubmit: SubmitHandler<Inputs> = async (values) => {\n        await mutateFrequentlyUsedTags.mutateAsync({\n            tags: values.tagsToDisplay,\n        });\n        await utils.projects.currentProject.invalidate();\n    };\n\n    return (\n        <div\n            // FIXME: theme forced to light here because we haven't rethemed the rest of the site yet\n            data-theme=\"light\"\n            className={classNames(\"co-themed-box\", sectionBoxClasses)}\n        >\n            <form\n                className=\"flex flex-col gap-4\"\n                onSubmit={handleSubmit(onSubmit)}\n            >\n                <h4 className={sectionTitleClasses}>pinned tags</h4>\n\n                <InfoBox level=\"info\">\n                    You can pin any of your top 15 most used tags to showcase on\n                    your page! This gives your readers easy access to a page\n                    with just your posts in that tag, as well as a good way to\n                    tell other users what sort of things they can expect!\n                </InfoBox>\n\n                <div className=\"flex flex-col\">\n                    <Controller\n                        control={control}\n                        name=\"tagsToDisplay\"\n                        render={({ field }) => (\n                            <TokenInput\n                                TokenIcon={HashtagIcon}\n                                setTokens={field.onChange}\n                                tokens={field.value}\n                                getSuggestions={false}\n                                placeholder=\"Pick some tags!\"\n                                customSuggestions={tagOptions}\n                            />\n                        )}\n                    />\n                </div>\n\n                <div className=\"flex w-full flex-row items-center justify-end gap-4 font-bold text-notWhite\">\n                    {mutateFrequentlyUsedTags.isSuccess ? (\n                        <p className=\"text-green\">saved!</p>\n                    ) : null}\n                    {mutateFrequentlyUsedTags.isError ? (\n                        <p className=\"text-red\">\n                            {mutateFrequentlyUsedTags.error.message}\n                        </p>\n                    ) : null}\n\n                    <AuthnButton\n                        type=\"submit\"\n                        disabled={mutateFrequentlyUsedTags.isLoading}\n                        className=\"font-bold\"\n                    >\n                        save tags\n                    </AuthnButton>\n                </div>\n            </form>\n        </div>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport sitemap from \"@/shared/sitemap\";\nimport { FeatureFlag } from \"@/shared/types/feature-flags\";\nimport { ProjectHandle } from \"@/shared/types/ids\";\nimport { useFlag } from \"@unleash/proxy-client-react\";\nimport React, { FunctionComponent } from \"react\";\nimport { SubmitHandler, useForm, Validate } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useCurrentProject } from \"../../../hooks/data-loaders\";\nimport { useDisplayPrefs } from \"../../../hooks/use-display-prefs\";\nimport { InfoBox } from \"../../elements/info-box\";\nimport { SettingsRow } from \"../../elements/settings-row\";\nimport { sectionBoxClasses, sectionTitleClasses } from \"../shared\";\nimport { UnfriendlyTimestamp } from \"../../unfriendly-timestamp\";\nimport { AuthnButton } from \"../../partials/authn-button\";\nimport { StyledInput } from \"../../elements/styled-input\";\n\ntype Inputs = {\n    handle: string;\n};\n\nexport const HandleChangeForm: FunctionComponent = () => {\n    const { t } = useTranslation();\n    const project = useCurrentProject();\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n        trigger,\n        control,\n    } = useForm<Inputs>({\n        defaultValues: {\n            handle: project!.handle,\n        },\n        mode: \"onBlur\",\n    });\n    const checkHandle = trpc.projects.checkHandle.useMutation();\n    const changeHandleMutation = trpc.projects.changeHandle.useMutation();\n    const canChangeHandle = trpc.projects.canChangeHandle.useQuery(undefined, {\n        suspense: true,\n    });\n    const { beatsTimestamps } = useDisplayPrefs();\n\n    const onSubmit: SubmitHandler<Inputs> = async (values) => {\n        return changeHandleMutation\n            .mutateAsync({\n                handle: values.handle as ProjectHandle,\n            })\n            .then(() => location.reload());\n    };\n\n    const validateHandle: Validate<string> = async (handle: string) => {\n        try {\n            const resp = await checkHandle.mutateAsync({\n                handle: handle as ProjectHandle,\n            });\n\n            return resp.valid === true ? true : resp.reason;\n        } catch (e) {\n            return t(\"common:unknown-error\").toString();\n        }\n    };\n\n    return (\n        <div className={sectionBoxClasses}>\n            <form\n                className=\"flex flex-col gap-4\"\n                onSubmit={handleSubmit(onSubmit)}\n            >\n                <h4 className={sectionTitleClasses}>change handle</h4>\n\n                <InfoBox level=\"info\">\n                    <div className=\"prose prose-sm\">\n                        <p>\n                            You can change your page handle here. Handles must\n                            be at least 3 characters long, only contain letters,\n                            numbers, and hyphens (\"-\"), and not already be in\n                            use.\n                        </p>\n                        <p>\n                            You may change your handle up to once every{\" \"}\n                            {beatsTimestamps ? \"1000 beats\" : \"24 hours\"}.{\" \"}\n                            {canChangeHandle.data?.canChange === false ? (\n                                <>\n                                    You've already changed it once today. Wait\n                                    until{\" \"}\n                                    <UnfriendlyTimestamp\n                                        dateISO={\n                                            canChangeHandle.data.nextChangeDate\n                                        }\n                                        // we have to set this to reset the default classes. we don't need anything special tho.\n                                        className=\"\"\n                                    />{\" \"}\n                                    to change it again.\n                                </>\n                            ) : null}\n                        </p>\n                    </div>\n                </InfoBox>\n\n                <div className=\"flex flex-col\">\n                    <SettingsRow\n                        bigLabel=\"new handle\"\n                        inputElement={\n                            <div className=\"flex flex-row items-center gap-2\">\n                                <span className=\"text-xl\">@</span>\n                                <StyledInput\n                                    trigger={trigger}\n                                    name=\"handle\"\n                                    control={control}\n                                    type=\"text\"\n                                    rules={{\n                                        required: \"Handle is required!\",\n                                    }}\n                                />\n                                {errors.handle ? (\n                                    <p className=\"text-red\">\n                                        {errors.handle.message}\n                                    </p>\n                                ) : null}\n                            </div>\n                        }\n                    />\n                </div>\n\n                <div className=\"flex w-full flex-row items-center justify-end gap-4 font-bold text-notWhite\">\n                    {changeHandleMutation.isSuccess ? (\n                        <p className=\"text-green\">saved!</p>\n                    ) : null}\n                    {changeHandleMutation.isError ? (\n                        <p className=\"text-red\">\n                            {changeHandleMutation.error.message}\n                        </p>\n                    ) : null}\n\n                    <AuthnButton\n                        type=\"submit\"\n                        disabled={changeHandleMutation.isLoading}\n                        className=\"font-bold\"\n                    >\n                        change handle\n                    </AuthnButton>\n                </div>\n            </form>\n        </div>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport { useCurrentProject } from \"@/client/preact/hooks/data-loaders\";\nimport sitemap from \"@/shared/sitemap\";\nimport { WireProjectModel } from \"@/shared/types/projects\";\nimport { Disclosure } from \"@headlessui/react\";\nimport { ChevronDownIcon } from \"@heroicons/react/24/solid\";\nimport classNames from \"classnames\";\nimport { t } from \"i18next\";\nimport _ from \"lodash\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { BasicButton } from \"../../elements/basic-button\";\nimport { SimpleModalDialog } from \"../../elements/simple-modal-dialog\";\nimport { sectionBoxClasses, sectionTitleClasses } from \"../shared\";\n\ntype SilencedBlockedProjectCardProps = {\n    project: WireProjectModel;\n    userNote: string | undefined;\n    button: \"unmute\" | \"unblock\";\n};\n\ntype AccordionButtonProps = {\n    label: string;\n    open: boolean;\n};\n\nconst AccordionButton: FunctionComponent<AccordionButtonProps> = (props) => {\n    return (\n        <button className=\"flex w-full flex-row justify-between bg-cherry-500 px-3 py-1 font-bold text-notWhite\">\n            {props.label}\n\n            <ChevronDownIcon\n                className={classNames(\"h-6\", props.open ? \"rotate-180\" : \"\")}\n            />\n        </button>\n    );\n};\n\nconst SilencedBlockedProjectCard: FunctionComponent<\n    SilencedBlockedProjectCardProps\n> = (props) => {\n    const currentProject = useCurrentProject();\n    const unmute = trpc.relationships.unmute.useMutation();\n    const unblock = trpc.relationships.unblock.useMutation();\n    const utils = trpc.useContext();\n    const [isConfirmOpen, setIsConfirmOpen] = useState(false);\n\n    function onClickButton() {\n        setIsConfirmOpen(true);\n    }\n\n    async function onConfirmUnmute() {\n        if (!currentProject) return;\n\n        await unmute.mutateAsync({\n            fromProjectId: currentProject.projectId,\n            toProjectId: props.project.projectId,\n        });\n        await utils.relationships.silencedProjects.invalidate();\n    }\n\n    async function onConfirmUnblock() {\n        if (!currentProject) return;\n\n        await unblock.mutateAsync({\n            fromProjectId: currentProject.projectId,\n            toProjectId: props.project.projectId,\n        });\n        await utils.relationships.blockedProjects.invalidate();\n    }\n\n    let confirmDialog = null;\n    let buttonLabel = \"\";\n\n    switch (props.button) {\n        case \"unmute\":\n            confirmDialog = (\n                <SimpleModalDialog\n                    isOpen={isConfirmOpen}\n                    title={t(\n                        \"client:unsilence-page.confirm-with-handle-title\",\n                        {\n                            defaultValue: \"Unsilence @{{handle}}?\",\n                            handle: props.project.handle,\n                        }\n                    )}\n                    body={t(\"client:unsilence-page.confirm-with-handle-body\", {\n                        defaultValue:\n                            \"Are you sure you want to unsilence @{{handle}}?\",\n                        handle: props.project.handle,\n                    })}\n                    confirm={{\n                        label: t(\"common:unsilence\", \"unsilence\"),\n                    }}\n                    cancel={{\n                        label: t(\"common:cancel\", \"cancel\"),\n                    }}\n                    onConfirm={onConfirmUnmute}\n                    onCancel={() => setIsConfirmOpen(false)}\n                />\n            );\n            buttonLabel = \"unsilence\";\n            break;\n        case \"unblock\":\n            confirmDialog = (\n                <SimpleModalDialog\n                    isOpen={isConfirmOpen}\n                    title={t(\"client:unblock-page.confirm-with-handle-title\", {\n                        defaultValue: \"Unblock @{{handle}}?\",\n                        handle: props.project.handle,\n                    })}\n                    body={t(\"client:unblock-page.confirm-with-handle-body\", {\n                        defaultValue:\n                            \"Are you sure you want to unblock @{{handle}}?\",\n                        handle: props.project.handle,\n                    })}\n                    confirm={{\n                        label: t(\"common:unblock\", \"unblock\"),\n                    }}\n                    cancel={{\n                        label: t(\"common:cancel\", \"cancel\"),\n                    }}\n                    onConfirm={onConfirmUnblock}\n                    onCancel={() => setIsConfirmOpen(false)}\n                />\n            );\n            buttonLabel = \"unblock\";\n            break;\n    }\n\n    return (\n        <>\n            {confirmDialog}\n            <li className=\"grid-cols-max grid-rows-max grid justify-between border-b-[1px] last:border-b-0\">\n                <div className=\"col-start-1 row-start-1\">\n                    {props.project.displayName ? (\n                        <>\n                            <span className=\"font-bold\">\n                                {props.project.displayName}\n                            </span>\n                            &nbsp;\n                        </>\n                    ) : null}\n                    @{props.project.handle} (\n                    <a\n                        href={sitemap.public.project\n                            .mainAppProfile({\n                                projectHandle: props.project.handle,\n                            })\n                            .toString()}\n                        className=\"underline\"\n                    >\n                        profile\n                    </a>\n                    )\n                </div>\n                <BasicButton\n                    extraClasses=\"col-start-2 row-start-1 row-span-2 h-10 w-fit self-center\"\n                    buttonColor=\"stroke\"\n                    onClick={onClickButton}\n                >\n                    {buttonLabel}\n                </BasicButton>\n                {props.userNote ? (\n                    <div className=\"col-start-1 row-start-2 italic\">\n                        user note: {props.userNote}\n                    </div>\n                ) : (\n                    <div className=\"col-start-1 row-start-2 italic\">\n                        (no user note)\n                    </div>\n                )}\n            </li>\n        </>\n    );\n};\n\nexport const SilencedAndBlockedForm: FunctionComponent = () => {\n    const silencedProjects =\n        trpc.relationships.silencedProjects.useInfiniteQuery(\n            {},\n            {\n                suspense: true,\n                staleTime: Infinity,\n                getNextPageParam: (lastPage) => lastPage.nextCursor,\n            }\n        );\n    const blockedProjects = trpc.relationships.blockedProjects.useInfiniteQuery(\n        {},\n        {\n            suspense: true,\n            staleTime: Infinity,\n            getNextPageParam: (lastPage) => lastPage.nextCursor,\n        }\n    );\n\n    const silencedProjectsList = silencedProjects.data\n        ? _.concat(\n              ...silencedProjects.data.pages.map((group) => group.projects)\n          )\n        : [];\n\n    const blockedProjectsList = blockedProjects.data\n        ? _.concat(...blockedProjects.data.pages.map((group) => group.projects))\n        : [];\n\n    return (\n        <div className={sectionBoxClasses}>\n            <h4 className={sectionTitleClasses}>silenced and blocked pages</h4>\n            You can access lists of the pages you've silenced or blocked here,\n            if you want to check or make changes to them.\n            <Disclosure>\n                <Disclosure.Button>\n                    {({ open }) => (\n                        <AccordionButton\n                            label={\n                                open\n                                    ? \"hide silenced pages\"\n                                    : \"show silenced pages\"\n                            }\n                            open={open}\n                        />\n                    )}\n                </Disclosure.Button>\n                <Disclosure.Panel>\n                    <ul className=\"flex max-h-[50vh] flex-col overflow-y-auto\">\n                        {silencedProjectsList.length > 0 ? (\n                            silencedProjectsList.map((project) => (\n                                <SilencedBlockedProjectCard\n                                    key={project.project.projectId}\n                                    project={project.project}\n                                    userNote={project.userNote}\n                                    button={\"unmute\"}\n                                />\n                            ))\n                        ) : (\n                            <div>You have no pages silenced.</div>\n                        )}\n\n                        {silencedProjects.hasNextPage ? (\n                            <BasicButton\n                                buttonSize=\"regular\"\n                                buttonColor=\"stroke\"\n                                extraClasses=\"w-[50%] mt-4 self-center\"\n                                onClick={silencedProjects.fetchNextPage}\n                            >\n                                load more\n                            </BasicButton>\n                        ) : null}\n                    </ul>\n                </Disclosure.Panel>\n            </Disclosure>\n            <Disclosure>\n                <Disclosure.Button>\n                    {({ open }) => (\n                        <AccordionButton\n                            label={\n                                open\n                                    ? \"hide blocked pages\"\n                                    : \"show blocked pages\"\n                            }\n                            open={open}\n                        />\n                    )}\n                </Disclosure.Button>\n                <Disclosure.Panel>\n                    <ul className=\"flex max-h-[50vh] flex-col overflow-y-auto\">\n                        {blockedProjectsList.length > 0 ? (\n                            blockedProjectsList.map((project) => (\n                                <SilencedBlockedProjectCard\n                                    key={project.project.projectId}\n                                    project={project.project}\n                                    userNote={project.userNote}\n                                    button={\"unblock\"}\n                                />\n                            ))\n                        ) : (\n                            <div>You have no pages blocked.</div>\n                        )}\n\n                        {blockedProjects.hasNextPage ? (\n                            <BasicButton\n                                buttonSize=\"regular\"\n                                buttonColor=\"stroke\"\n                                extraClasses=\"w-[50%] mt-4 self-center\"\n                                onClick={blockedProjects.fetchNextPage}\n                            >\n                                load more\n                            </BasicButton>\n                        ) : null}\n                    </ul>\n                </Disclosure.Panel>\n            </Disclosure>\n        </div>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport sitemap from \"@/shared/sitemap\";\nimport {\n    LoggedOutPostVisibility,\n    ProjectPrivacy,\n} from \"@/shared/types/projects\";\nimport React, { FunctionComponent } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { InfoBox } from \"../../elements/info-box\";\nimport { SettingsRow } from \"../../elements/settings-row\";\nimport { sectionBoxClasses, sectionTitleClasses } from \"../shared\";\nimport { AuthnButton } from \"../../partials/authn-button\";\n\ntype Inputs = {\n    private: boolean;\n    adultContent: boolean;\n    loggedOutPostVisibility: LoggedOutPostVisibility;\n\n    // asks\n    asksEnabled: boolean;\n    asksAllowAnon: boolean;\n    asksRequireLoggedInAnon: boolean;\n};\n\nexport const ProjectSettingsForm: FunctionComponent = () => {\n    const { data } = trpc.projects.projectSettings.useQuery(undefined, {\n        suspense: true,\n    });\n    const mutateProjectSettings =\n        trpc.projects.changeProjectSettings.useMutation();\n    const { register, handleSubmit, watch } = useForm<Inputs>({\n        defaultValues: {\n            private: data!.privacy === ProjectPrivacy.Private,\n            adultContent: data!.adultContent,\n            loggedOutPostVisibility: data!.loggedOutPostVisibility,\n            asksEnabled: data!.asks.enabled,\n            asksAllowAnon: data!.asks.allowAnon,\n            asksRequireLoggedInAnon: data!.asks.requireLoggedInAnon,\n        },\n    });\n    const formPrivateValue = watch(\"private\");\n\n    const onSubmit: SubmitHandler<Inputs> = async (values) => {\n        return mutateProjectSettings.mutateAsync({\n            privacy: values.private\n                ? ProjectPrivacy.Private\n                : ProjectPrivacy.Public,\n            adultContent: values.adultContent,\n            loggedOutPostVisibility: values.loggedOutPostVisibility,\n            asks: {\n                enabled: values.asksEnabled,\n                allowAnon: values.asksAllowAnon,\n                requireLoggedInAnon: values.asksRequireLoggedInAnon,\n            },\n        });\n    };\n\n    const subsectionTitleClasses = \"font-atkinson font-bold text-2xl pt-8\";\n\n    const loggedOutPostSelectElement = (\n        <select\n            disabled={formPrivateValue}\n            {...register(\"loggedOutPostVisibility\")}\n        >\n            <option value=\"public\">all posts</option>\n            <option value=\"none\">no posts</option>\n        </select>\n    );\n\n    return (\n        <div className={sectionBoxClasses}>\n            <form\n                className=\"flex flex-col gap-4\"\n                onSubmit={handleSubmit(onSubmit)}\n            >\n                <h4 className={sectionTitleClasses}>page settings</h4>\n\n                <div className=\"flex flex-col\">\n                    <SettingsRow\n                        bigLabel=\"private page?\"\n                        inputElement={\n                            <input\n                                type=\"checkbox\"\n                                {...register(\"private\")}\n                                className=\"rounded-checkbox\"\n                            />\n                        }\n                    />\n\n                    <SettingsRow\n                        bigLabel=\"18+ content?\"\n                        inputElement={\n                            <input\n                                type=\"checkbox\"\n                                {...register(\"adultContent\")}\n                                className=\"rounded-checkbox\"\n                            />\n                        }\n                        infoBoxLevel=\"info\"\n                        infoBoxContent={\n                            <div className=\"prose prose-sm\">\n                                <p>\n                                    This controls the default 18+ content state\n                                    for any post you make. We recommend that\n                                    pages which mostly post adult content enable\n                                    this.\n                                </p>\n                                <p>\n                                    Please note: even if your page is marked as\n                                    18+ content, profile information (avatar and\n                                    header image) must be all-ages appropriate!\n                                    You can read more in our{\" \"}\n                                    <a\n                                        href={sitemap.public\n                                            .staticContent({\n                                                slug: \"community-guidelines\",\n                                            })\n                                            .toString()}\n                                    >\n                                        community guidelines\n                                    </a>\n                                    .\n                                </p>\n                            </div>\n                        }\n                    />\n\n                    {formPrivateValue === false ? (\n                        <SettingsRow\n                            bigLabel=\"which posts should be visible to users who are logged out?\"\n                            inputElement={loggedOutPostSelectElement}\n                        />\n                    ) : (\n                        <SettingsRow\n                            bigLabel=\"which posts should be visible to users who are logged out?\"\n                            inputElement={loggedOutPostSelectElement}\n                            infoBoxLevel=\"info\"\n                            infoBoxContent={\n                                <div className=\"prose prose-sm\">\n                                    <p>\n                                        Because this page is private, none of\n                                        its posts will be visible to users who\n                                        are logged out.\n                                    </p>\n                                </div>\n                            }\n                        />\n                    )}\n\n                    <h5 className={subsectionTitleClasses}>asks</h5>\n                    <SettingsRow\n                        bigLabel=\"asks enabled?\"\n                        inputElement={\n                            <input\n                                type=\"checkbox\"\n                                className=\"rounded-checkbox\"\n                                {...register(\"asksEnabled\")}\n                            />\n                        }\n                    />\n                    {watch(\"asksEnabled\") ? (\n                        <>\n                            <SettingsRow\n                                bigLabel=\"anon asks enabled?\"\n                                inputElement={\n                                    <input\n                                        type=\"checkbox\"\n                                        className=\"rounded-checkbox\"\n                                        {...register(\"asksAllowAnon\")}\n                                    />\n                                }\n                            />\n\n                            {watch(\"asksAllowAnon\") ? (\n                                <SettingsRow\n                                    bigLabel=\"require anon asks to be logged in?\"\n                                    inputElement={\n                                        <input\n                                            type=\"checkbox\"\n                                            className=\"rounded-checkbox\"\n                                            {...register(\n                                                \"asksRequireLoggedInAnon\"\n                                            )}\n                                        />\n                                    }\n                                />\n                            ) : null}\n                        </>\n                    ) : null}\n                </div>\n\n                <div className=\"flex w-full flex-row items-center justify-end gap-4 font-bold text-notWhite\">\n                    {mutateProjectSettings.isSuccess ? (\n                        <p className=\"text-green\">saved!</p>\n                    ) : null}\n                    {mutateProjectSettings.isError ? (\n                        <p className=\"text-red\">\n                            {mutateProjectSettings.error.message}\n                        </p>\n                    ) : null}\n\n                    <AuthnButton\n                        type=\"submit\"\n                        disabled={mutateProjectSettings.isLoading}\n                        className=\"font-bold\"\n                    >\n                        save settings\n                    </AuthnButton>\n                </div>\n            </form>\n        </div>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport React, { FunctionComponent } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { useCurrentProject } from \"../../../hooks/data-loaders\";\nimport { sectionBoxClasses, sectionTitleClasses } from \"../shared\";\nimport { InfoBox, InfoBoxLevel } from \"../../elements/info-box\";\nimport { SettingsRow } from \"../../elements/settings-row\";\nimport { FormSubmitButtonRow } from \"../form-submit-button-row\";\nimport { DateTime } from \"luxon\";\nimport { useUserInfo } from \"@/client/preact/providers/user-info-provider\";\nimport sitemap from \"@/shared/sitemap\";\nimport AuthHelpers from \"@/client/lib/auth-helpers\";\nimport { getVanillaClient } from \"@/client/lib/trpc-vanilla\";\nimport { values } from \"lodash\";\nimport { StyledInput } from \"../../elements/styled-input\";\n\ntype ScheduleDeletionInputs = {\n    confirmHandle: string;\n    password: string;\n    otp: string;\n};\n\nconst InnerScheduleForDeleteForm: FunctionComponent = () => {\n    const userInfo = useUserInfo();\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n        trigger,\n        control,\n        watch,\n    } = useForm<ScheduleDeletionInputs>({\n        defaultValues: {\n            confirmHandle: \"\",\n            password: \"\",\n            otp: \"\",\n        },\n    });\n    const scheduleDeletionMutation = trpc.projects.scheduleDelete.useMutation();\n    const confirmHandle = watch(\"confirmHandle\");\n\n    const onSubmit: SubmitHandler<ScheduleDeletionInputs> = async (values) => {\n        if (!userInfo.email) {\n            throw new Error(\"e-mail is null?\");\n        }\n\n        const email = userInfo.email;\n        const saltResult = await getVanillaClient().login.getSalt.query({\n            email,\n        });\n        const clientHash = await AuthHelpers.hashPasswordInWorker(\n            email,\n            saltResult.salt,\n            values.password\n        );\n\n        await scheduleDeletionMutation.mutateAsync({\n            confirmHandle: values.confirmHandle,\n            clientHash: clientHash,\n            twoFactorToken: values.otp,\n        });\n    };\n\n    return (\n        <div className={sectionBoxClasses}>\n            <form\n                className=\"flex flex-col gap-4\"\n                onSubmit={handleSubmit(onSubmit)}\n            >\n                <h4 className={sectionTitleClasses}>delete page</h4>\n\n                <p className=\"prose\">\n                    If you'd like to delete this page, fill out the information\n                    below. We'll schedule its data to be permanently deleted in\n                    3 days &ndash; to give you a chance to change your mind\n                    &ndash; but with no further action required from you. If you\n                    need to delete it sooner than that, please e-mail us at{\" \"}\n                    <a href=\"mailto:support@cohost.org\">support@cohost.org</a>{\" \"}\n                    and we can help you.\n                </p>\n\n                <SettingsRow\n                    bigLabel=\"confirm page handle\"\n                    inputElement={\n                        <div className=\"flex flex-row items-center gap-2\">\n                            <span className=\"text-xl\">@</span>\n                            <StyledInput\n                                trigger={trigger}\n                                name=\"confirmHandle\"\n                                control={control}\n                                type=\"text\"\n                                showValidity={false}\n                            />\n                        </div>\n                    }\n                />\n\n                <SettingsRow\n                    bigLabel=\"confirm your password\"\n                    disabled={confirmHandle === \"\"}\n                    inputElement={\n                        <StyledInput\n                            trigger={trigger}\n                            name=\"password\"\n                            control={control}\n                            type=\"password\"\n                            showValidity={false}\n                            disabled={confirmHandle === \"\"}\n                        />\n                    }\n                />\n\n                {userInfo.twoFactorActive ? (\n                    <SettingsRow\n                        bigLabel=\"confirm your 2fa code\"\n                        disabled={confirmHandle === \"\"}\n                        inputElement={\n                            <StyledInput\n                                trigger={trigger}\n                                name=\"otp\"\n                                control={control}\n                                type=\"text\"\n                                showValidity={false}\n                                disabled={confirmHandle === \"\"}\n                            />\n                        }\n                    />\n                ) : null}\n\n                <FormSubmitButtonRow\n                    submitMutation={scheduleDeletionMutation}\n                    submitButtonLabel=\"schedule deletion\"\n                />\n            </form>\n        </div>\n    );\n};\n\ntype CancelScheduledDeletionInputs = {\n    confirm: boolean;\n};\n\nconst InnerCancelScheduledDeletionForm: FunctionComponent = () => {\n    const { register, handleSubmit } = useForm<CancelScheduledDeletionInputs>(\n        {}\n    );\n    const currentProject = useCurrentProject();\n    const cancelScheduledDeletionMutation =\n        trpc.projects.cancelScheduledDelete.useMutation();\n\n    const onSubmit: SubmitHandler<CancelScheduledDeletionInputs> = async (\n        values\n    ) => {\n        if (values.confirm) {\n            await cancelScheduledDeletionMutation.mutateAsync();\n        }\n    };\n\n    return currentProject ? (\n        <div className={sectionBoxClasses}>\n            <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"flex flex-col gap-4\"\n            >\n                <h4 className={sectionTitleClasses}>\n                    cancel scheduled deletion\n                </h4>\n\n                <p className=\"prose\">\n                    This page is currently scheduled for deletion. At{\" \"}\n                    <strong>\n                        {DateTime.fromISO(\n                            currentProject.deleteAfter!\n                        ).toLocaleString(DateTime.DATETIME_MED_WITH_WEEKDAY)}\n                    </strong>\n                    , the waiting period will expire and at our next scheduled\n                    maintenance less than 24 hours later, its data will be\n                    permanently deleted. If you've changed your mind, or didn't\n                    intend to request the page's deletion, you can cancel the\n                    deletion here.\n                </p>\n\n                <SettingsRow\n                    bigLabel=\"Please check this checkbox to confirm.\"\n                    inputElement={\n                        <input\n                            type=\"checkbox\"\n                            {...register(\"confirm\", {\n                                required:\n                                    \"You must check the checkbox to confirm.\",\n                            })}\n                            className=\"rounded-checkbox\"\n                        />\n                    }\n                />\n\n                <FormSubmitButtonRow\n                    submitMutation={cancelScheduledDeletionMutation}\n                    submitButtonLabel=\"cancel deletion\"\n                />\n            </form>\n        </div>\n    ) : null;\n};\n\nexport const ScheduleForDeleteForm: FunctionComponent = () => {\n    const project = useCurrentProject();\n\n    if (project) {\n        if (project.isSelfProject) {\n            return (\n                <div className={sectionBoxClasses}>\n                    <h4 className={sectionTitleClasses}>delete page</h4>\n\n                    <p className=\"prose\">\n                        You can't delete this page right now because it's your\n                        main page. However, in the{\" \"}\n                        <a href={sitemap.public.userSettings().toString()}>\n                            user settings\n                        </a>\n                        , you can change your main page to another page you\n                        edit, then delete this one.\n                    </p>\n                </div>\n            );\n        } else {\n            if (project.deleteAfter) {\n                return <InnerCancelScheduledDeletionForm />;\n            } else {\n                return <InnerScheduleForDeleteForm />;\n            }\n        }\n    } else return null;\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport { AccessResult } from \"@/shared/types/access-result\";\nimport React, { FunctionComponent } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { InfoBox } from \"../elements/info-box\";\nimport ProfileView from \"../partials/profile-view\";\nimport { FrequentlyUsedTagsForm } from \"../settings/project-settings/frequently-used-tags-form\";\nimport { HandleChangeForm } from \"../settings/project-settings/handle-change-form\";\nimport { SilencedAndBlockedForm } from \"../settings/project-settings/muted-and-blocked-form\";\nimport { ProjectSettingsForm } from \"../settings/project-settings/project-settings-form\";\nimport { ScheduleForDeleteForm } from \"../settings/project-settings/queue-for-delete-form\";\nimport { useRequiresLogin } from \"../../providers/user-info-provider\";\n\nconst ProjectSettingsPage: FunctionComponent = () => {\n    useRequiresLogin();\n\n    const { data: project } = trpc.projects.currentProject.useQuery(undefined, {\n        suspense: true,\n    });\n    const handle = project ? project.handle : \"(unknown)\";\n\n    return (\n        <div className=\"container mx-auto flex flex-grow flex-col\">\n            <Helmet title=\"page settings\" />\n            <ProfileView\n                project={project!} // we're loading in a suspense so this will always be defined\n                canAccessPermissions={{\n                    canEdit: AccessResult.Allowed,\n                    canInteract: AccessResult.Allowed,\n                    canRead: AccessResult.Allowed,\n                    canShare: AccessResult.Allowed,\n                }}\n            >\n                <div className=\"mt-4 flex w-full flex-col gap-6 lg:mt-0\">\n                    <InfoBox\n                        level=\"info\"\n                        textSize=\"base\"\n                        className=\"not-prose text-notBlack\"\n                    >\n                        you can change settings which apply to @{handle} here.\n                        you can also change settings for other pages you edit by\n                        changing the active page in the menu.\n                    </InfoBox>\n                    <ProjectSettingsForm />\n                    <FrequentlyUsedTagsForm />\n                    <SilencedAndBlockedForm />\n                    <HandleChangeForm />\n                    <ScheduleForDeleteForm />\n                </div>\n            </ProfileView>\n        </div>\n    );\n};\n\nexport default ProjectSettingsPage;\n","import React from \"react\";\nimport { AuthnButton } from \"../partials/authn-button\";\n\ntype Mutation =\n    | {\n          isSuccess: boolean;\n          isError: false;\n          isLoading: boolean;\n          error: null;\n      }\n    | {\n          isSuccess: boolean;\n          isError: true;\n          isLoading: boolean;\n          error: { message: string };\n      };\n\ntype FormSubmitButtonRowProps<TSubmitMutation> = {\n    submitMutation: TSubmitMutation;\n    submitButtonLabel: string;\n};\n\nexport const FormSubmitButtonRow = <TSubmitMutation extends Mutation>(\n    props: FormSubmitButtonRowProps<TSubmitMutation>\n) => {\n    return (\n        <div className=\"flex w-full flex-row items-center justify-end gap-4 font-bold text-notWhite\">\n            {props.submitMutation.isSuccess ? (\n                <p className=\"text-green\">saved!</p>\n            ) : null}\n            {props.submitMutation.isError ? (\n                <p className=\"text-red\">{props.submitMutation.error.message}</p>\n            ) : null}\n\n            <AuthnButton\n                type=\"submit\"\n                disabled={props.submitMutation.isLoading}\n                className=\"font-bold\"\n            >\n                {props.submitButtonLabel}\n            </AuthnButton>\n        </div>\n    );\n};\n","export const sectionBoxClasses =\n    \"cohost-shadow-light dark:cohost-shadow-dark mx-auto flex max-h-min w-full flex-col gap-4 rounded-lg bg-notWhite text-notBlack px-7 py-8\";\nexport const sectionTitleClasses = \"font-atkinson font-bold text-4xl\";\nexport const buttonRowClasses =\n    \"flex w-full flex-row items-center justify-end gap-4 font-bold text-notWhite\";\nexport const subsectionTitleClasses = \"font-atkinson font-bold text-2xl pt-8\";\n","import { fromDateTime } from \"@/client/lib/beats\";\nimport { DateTime } from \"luxon\";\nimport React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { useDisplayPrefs } from \"../hooks/use-display-prefs\";\n\nfunction beatsFormat(dateTime: DateTime): string {\n    return `${dateTime\n        .setZone(\"UTC+1\")\n        .toLocaleString(DateTime.DATE_MED)} ${fromDateTime(dateTime, true)}`;\n}\n\nexport interface UnfriendlyTimestampProps {\n    dateISO: string;\n    link?: URL;\n    className?: string;\n}\n\nexport const UnfriendlyTimestamp: FunctionComponent<\n    UnfriendlyTimestampProps\n> = ({\n    dateISO,\n    link,\n    className = \"block flex-none text-sm text-gray-500 dark:text-gray-300\",\n}) => {\n    const displayPrefs = useDisplayPrefs();\n    const [luxonDT, setLuxonDT] = useState(DateTime.fromISO(dateISO).toUTC());\n    const timestampText = displayPrefs.beatsTimestamps\n        ? beatsFormat(luxonDT)\n        : luxonDT.toLocaleString(DateTime.DATE_MED_WITH_WEEKDAY);\n\n    useEffect(() => {\n        setLuxonDT((current) => current.toLocal());\n    }, []);\n\n    return (\n        <time dateTime={luxonDT.toISO()} className={className}>\n            {link ? (\n                <a href={link.toString()} className=\"hover:underline\">\n                    {timestampText}\n                </a>\n            ) : (\n                timestampText\n            )}\n        </time>\n    );\n};\n"],"names":["AuthHelpers","static","email","url","URL","document","searchParams","append","fetch","toString","then","resp","json","data","salt","password","hashWorker","Worker","Promise","resolve","onmessage","e","clientHash","postMessage","SettingsRow","bigLabel","smallLabel","inputElement","infoBoxLevel","infoBoxContent","customDescription","disabled","bigLabelRowSpanClasses","customDescriptionContent","React","className","htmlFor","props","id","classNames","InfoBox","level","StyledInput","style","showValidity","name","control","rules","trigger","field","fieldState","useController","fieldName","onChange","directRef","setDirectRef","useState","useEffect","ref","inputStyleClasses","contentDivStyleClasses","validityIconStyleClasses","useMemo","value","defaultValue","isTouched","shouldFocus","_extends","readOnly","invalid","XMarkIcon","CheckIcon","FrequentlyUsedTagsForm","tagOptionData","trpc","undefined","suspense","project","utils","tagOptions","tags","map","tag","content","mutateFrequentlyUsedTags","handleSubmit","useForm","defaultValues","tagsToDisplay","frequentlyUsedTags","sectionBoxClasses","onSubmit","async","mutateAsync","values","projects","currentProject","invalidate","sectionTitleClasses","Controller","render","TokenInput","TokenIcon","HashtagIcon","setTokens","tokens","getSuggestions","placeholder","customSuggestions","isSuccess","isError","error","message","AuthnButton","type","isLoading","HandleChangeForm","t","useTranslation","useCurrentProject","register","formState","errors","handle","mode","changeHandleMutation","canChangeHandle","beatsTimestamps","useDisplayPrefs","location","reload","canChange","UnfriendlyTimestamp","dateISO","nextChangeDate","required","AccordionButton","label","ChevronDownIcon","open","SilencedBlockedProjectCard","unmute","unblock","isConfirmOpen","setIsConfirmOpen","confirmDialog","buttonLabel","button","SimpleModalDialog","isOpen","title","body","confirm","cancel","onConfirm","fromProjectId","projectId","toProjectId","relationships","silencedProjects","onCancel","blockedProjects","displayName","href","sitemap","projectHandle","BasicButton","extraClasses","buttonColor","onClick","userNote","SilencedAndBlockedForm","staleTime","Infinity","getNextPageParam","lastPage","nextCursor","silencedProjectsList","_","pages","group","blockedProjectsList","Disclosure","length","key","hasNextPage","buttonSize","fetchNextPage","ProjectSettingsForm","mutateProjectSettings","watch","private","privacy","ProjectPrivacy","adultContent","loggedOutPostVisibility","asksEnabled","asks","enabled","asksAllowAnon","allowAnon","asksRequireLoggedInAnon","requireLoggedInAnon","formPrivateValue","loggedOutPostSelectElement","slug","InnerScheduleForDeleteForm","userInfo","useUserInfo","confirmHandle","otp","scheduleDeletionMutation","Error","saltResult","getVanillaClient","login","getSalt","query","twoFactorToken","twoFactorActive","FormSubmitButtonRow","submitMutation","submitButtonLabel","InnerCancelScheduledDeletionForm","cancelScheduledDeletionMutation","DateTime","deleteAfter","toLocaleString","ScheduleForDeleteForm","isSelfProject","ProjectSettingsPage","useRequiresLogin","Helmet","ProfileView","canAccessPermissions","canEdit","AccessResult","canInteract","canRead","canShare","textSize","buttonRowClasses","subsectionTitleClasses","link","displayPrefs","luxonDT","setLuxonDT","toUTC","timestampText","dateTime","setZone","fromDateTime","current","toLocal","toISO"],"sourceRoot":""}