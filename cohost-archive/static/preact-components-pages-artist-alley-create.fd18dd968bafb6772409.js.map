{"version":3,"file":"preact-components-pages-artist-alley-create.fd18dd968bafb6772409.js","mappings":"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","sources":["webpack:///./preact/components/artist-alley/artist-alley-filter-provider.tsx","webpack:///./preact/components/artist-alley/artist-alley-listing.tsx","webpack:///./preact/components/elements/styled-input.tsx","webpack:///./preact/components/elements/token-multi-select.tsx","webpack:///./preact/components/pages/artist-alley/create.tsx","webpack:///../shared/util/validate-url.ts"],"sourcesContent":["import { CategoryMatch, SortOrder } from \"@/shared/api-types/artist-alley-v1\";\nimport { ArtistAlleyAdultDisplayMode } from \"@/shared/types/artist-alley\";\nimport React, { useContext } from \"react\";\n\nexport const ArtistAlleyFilterProvider = React.createContext<{\n    adultFilterMode: ArtistAlleyAdultDisplayMode;\n    isAdult: boolean;\n    categories: Set<string>;\n    setAdultFilterMode: (mode: ArtistAlleyAdultDisplayMode) => void;\n    categoryMatch: CategoryMatch;\n    setCategoryMatch: (mode: CategoryMatch) => void;\n    sortOrder: SortOrder;\n    setSortOrder: (order: SortOrder) => void;\n}>({\n    adultFilterMode: \"hide\",\n    isAdult: false,\n    categories: new Set(),\n    setAdultFilterMode: () => {},\n    categoryMatch: \"any\",\n    setCategoryMatch: () => {},\n    sortOrder: \"random\",\n    setSortOrder: () => {},\n});\n\nexport const useArtistAlleyFilters = () => {\n    return useContext(ArtistAlleyFilterProvider);\n};\n","import { renderMarkdownReactNoHTML } from \"@/client/lib/markdown/other-rendering\";\nimport { tw } from \"@/client/lib/tw-tagged-literal\";\nimport sitemap from \"@/shared/sitemap\";\nimport {\n    ArtistAlleyWireAttachment,\n    WireArtistAlley,\n} from \"@/shared/types/artist-alley\";\nimport { WireProjectModel } from \"@/shared/types/projects\";\nimport React, { useContext, useMemo, useState } from \"react\";\nimport { useDynamicTheme } from \"../../hooks/dynamic-theme\";\nimport { useDisplayPrefs } from \"../../hooks/use-display-prefs\";\nimport { useImageOptimizer } from \"../../hooks/use-image-optimizer\";\nimport { BasicButton } from \"../elements/basic-button\";\nimport { PlayPauseButton } from \"../elements/play-pause-button\";\nimport { ProjectAvatar } from \"../partials/project-avatar\";\nimport { useArtistAlleyFilters } from \"./artist-alley-filter-provider\";\nimport { Menu } from \"@headlessui/react\";\nimport {\n    EyeIcon as EyeIconOutline,\n    EyeSlashIcon as EyeSlashIconOutline,\n    ShareIcon,\n    ShieldExclamationIcon as ShieldExclamationIconOutline,\n    TrashIcon as TrashIconOutline,\n} from \"@heroicons/react/24/outline\";\nimport {\n    ArrowUturnLeftIcon,\n    EllipsisHorizontalIcon,\n} from \"@heroicons/react/24/solid\";\nimport { MeatballMenuItem } from \"../elements/meatball-menu-item\";\nimport { ReportingUIContext } from \"@/client/reporting/machine\";\n\nconst ASPECT_RATIO = 300 / 250;\n\nconst ArtistAlleyAttachment: React.FC<{\n    attachment: ArtistAlleyWireAttachment;\n}> = ({ attachment }) => {\n    const displayPrefs = useDisplayPrefs();\n    const [src, setSrc] = useState(\n        displayPrefs.gifsStartPaused\n            ? attachment.previewURL\n            : attachment.fileURL\n    );\n    const [isPlaying, setIsPlaying] = useState(!displayPrefs.gifsStartPaused);\n\n    const srcWithDpr = useImageOptimizer(src, 300, ASPECT_RATIO);\n\n    const handlePause = () => {\n        setIsPlaying(false);\n        setSrc(attachment.previewURL);\n    };\n\n    const handlePlay = () => {\n        setIsPlaying(true);\n        setSrc(attachment.fileURL);\n    };\n\n    return (\n        <div className=\"group relative\">\n            <img\n                src={srcWithDpr(1)}\n                srcSet={`\n                ${srcWithDpr(1)} 1x,\n                ${srcWithDpr(2)} 2x,\n                ${srcWithDpr(3)} 3x,\n            `}\n                alt={attachment.altText}\n                className=\"co-border aspect-[300/250] w-full border-b object-cover\"\n            />\n\n            {attachment.previewURL !== attachment.fileURL && (\n                <PlayPauseButton\n                    isPlaying={isPlaying}\n                    showPlay={attachment.previewURL !== attachment.fileURL}\n                    extraClasses=\"absolute bottom-3 right-3 w-12\"\n                    onPlay={handlePlay}\n                    onPause={handlePause}\n                />\n            )}\n        </div>\n    );\n};\n\nconst ArtistAlleyMeatballMenu: React.FC<{ listing: WireArtistAlley }> = ({\n    listing,\n}) => {\n    const reportingUIContext = useContext(ReportingUIContext);\n\n    return (\n        // explicit height is required to vertically align the\n        // meatballs with the rest of the action buttons\n        <Menu as=\"div\" className=\"relative h-6\">\n            <Menu.Button className=\"co-action-button cursor-pointer text-sm font-bold hover:underline\">\n                <EllipsisHorizontalIcon className=\"h-6 w-6 transition-transform ui-open:rotate-90\" />\n            </Menu.Button>\n\n            <Menu.Items className=\"co-meatball-items absolute right-0 top-8 z-30 flex min-w-max flex-col divide-y rounded-lg p-3  focus:!outline-none\">\n                <Menu.Item>\n                    <MeatballMenuItem\n                        disabled={false}\n                        onClick={() => {\n                            reportingUIContext.send({\n                                type: \"START_REPORT\",\n                                artistAlleyListingId: listing.id,\n                            });\n                        }}\n                        ItemIcon={ShieldExclamationIconOutline}\n                        text=\"report\"\n                    />\n                </Menu.Item>\n            </Menu.Items>\n        </Menu>\n    );\n};\n\nexport const ArtistAlleyListing: React.FC<{\n    listing: WireArtistAlley;\n    project: WireProjectModel;\n}> = ({ listing, project }) => {\n    const rendered = useMemo(() => {\n        return renderMarkdownReactNoHTML(listing.body, new Date(), {\n            disableEmbeds: true,\n            externalLinksInNewTab: true,\n            hasCohostPlus: false,\n            renderingContext: \"artistAlley\",\n        });\n    }, [listing.body]);\n\n    const theme = useDynamicTheme();\n\n    return (\n        <div\n            data-theme={theme.current}\n            className=\"co-themed-box co-artist-alley-listing flex w-full flex-col rounded-lg border\"\n        >\n            <div className=\"co-border flex flex-row items-center gap-2 border-b px-2 py-3\">\n                <ProjectAvatar project={project} className=\"h-8\" />\n                <a\n                    href={sitemap.public.project\n                        .mainAppProfile({ projectHandle: project.handle })\n                        .toString()}\n                >\n                    @{project.handle}\n                </a>\n                <div className=\"flex-1\">&nbsp;</div>\n                {listing.adultContent ? (\n                    <span className=\"co-18-plus rounded-lg p-1 text-xs \">\n                        18+\n                    </span>\n                ) : null}\n                <ArtistAlleyMeatballMenu listing={listing} />\n            </div>\n            {listing.attachment && (\n                <ArtistAlleyAttachment attachment={listing.attachment} />\n            )}\n            <div className=\"co-prose prose p-2\">{rendered}</div>\n\n            <div className=\"mx-2 my-3\">\n                <BasicButton\n                    as=\"a\"\n                    buttonColor=\"\"\n                    buttonSize=\"regular\"\n                    href={listing.cta.link}\n                    extraClasses=\"co-cta-button\"\n                    target=\"_blank\"\n                >\n                    {listing.cta.text}\n                </BasicButton>\n            </div>\n\n            {listing.categories.length > 0 && (\n                <ListingTags tags={listing.categories} />\n            )}\n        </div>\n    );\n};\n\nconst ListingTags: React.FC<{ tags: string[] }> = ({ tags }) => {\n    const { categories } = useArtistAlleyFilters();\n    const filteredTags = tags.filter((tag) => tag != \"\");\n\n    return filteredTags.length ? (\n        <div className=\"w-full max-w-full p-3\">\n            <div\n                className={tw`co-tags relative w-full overflow-y-hidden break-words leading-none`}\n            >\n                <div>\n                    {filteredTags.map((tag) => (\n                        <button\n                            key={tag}\n                            className={`mr-2 inline-block text-sm hover:underline ${\n                                // bold currently filtered tags\n                                categories.has(tag) ? \"font-bold\" : \"\"\n                            }`}\n                            onClick={() => {\n                                categories.has(tag)\n                                    ? categories.delete(tag)\n                                    : categories.add(tag);\n                            }}\n                        >\n                            #{tag}\n                        </button>\n                    ))}\n                </div>\n            </div>\n        </div>\n    ) : null;\n};\n","import { CheckIcon, XMarkIcon } from \"@heroicons/react/24/outline\";\nimport classNames from \"classnames\";\nimport React, {\n    InputHTMLAttributes,\n    useEffect,\n    useMemo,\n    useState,\n} from \"react\";\nimport {\n    FieldValues,\n    useController,\n    UseControllerProps,\n    UseFormTrigger,\n} from \"react-hook-form\";\n\ntype InputStyle = \"light\" | \"dark\" | \"dynamic\";\n\ntype StyledInputProps<T extends FieldValues> = {\n    style?: InputStyle;\n    showValidity?: boolean;\n} & UseControllerProps<T> & { trigger: UseFormTrigger<T> } & Pick<\n        InputHTMLAttributes<HTMLInputElement>,\n        | \"type\"\n        | \"autoComplete\"\n        | \"placeholder\"\n        | \"max\"\n        | \"min\"\n        | \"step\"\n        | \"readOnly\"\n        | \"disabled\"\n    >;\n\nexport const StyledInput = <T extends FieldValues>({\n    style = \"light\",\n    showValidity = true,\n    name,\n    control,\n    rules,\n    trigger,\n    ...props\n}: StyledInputProps<T>) => {\n    const { field, fieldState } = useController<T>({\n        name,\n        control,\n        rules,\n    });\n    const { name: fieldName, onChange } = field;\n\n    // setup our own ref so we can track field value\n    const [directRef, setDirectRef] = useState<HTMLInputElement | null>();\n    useEffect(() => {\n        field.ref(directRef);\n    }, [directRef, field]);\n\n    const {\n        inputStyleClasses,\n        contentDivStyleClasses,\n        validityIconStyleClasses,\n    } = useMemo(() => {\n        switch (style) {\n            case \"light\":\n                return {\n                    inputStyleClasses: `border-gray-600 text-notBlack\n                        placeholder:text-gray-600\n                        focus:border-notBlack disabled:border-gray-300`,\n                    contentDivStyleClasses: `to-notWhite`,\n                    validityIconStyleClasses: `bg-notWhite`,\n                };\n            case \"dynamic\":\n                return {\n                    inputStyleClasses: \"co-styled-input\",\n                    contentDivStyleClasses: \"co-styled-input-content\",\n                    validityIconStyleClasses: \"co-styled-input-validity-icon\",\n                };\n            case \"dark\":\n            default:\n                return {\n                    inputStyleClasses: `border-gray-400 text-notWhite \n                        placeholder:text-gray-400\n                        focus:border-notWhite read-only:bg-gray-700`,\n                    contentDivStyleClasses: `to-notBlack`,\n                    validityIconStyleClasses: `bg-notBlack`,\n                };\n        }\n    }, [style]);\n\n    // manually validate when we don't get an input event\n    // can happen on browser autofill\n    useEffect(() => {\n        if (\n            directRef &&\n            directRef.value &&\n            directRef.value !== props.defaultValue &&\n            directRef.value !== field.value &&\n            !fieldState.isTouched\n        ) {\n            onChange(directRef.value);\n            void trigger(fieldName, { shouldFocus: true });\n        }\n    }, [\n        directRef,\n        field.value,\n        fieldName,\n        fieldState.isTouched,\n        onChange,\n        props.defaultValue,\n        trigger,\n    ]);\n    return (\n        <div className=\"relative\">\n            <input\n                className={classNames(\n                    `\n                        w-full min-w-[15rem] rounded-lg border-2 bg-transparent\n                    `,\n                    inputStyleClasses\n                )}\n                {...props}\n                {...field}\n                ref={setDirectRef}\n            />\n            {showValidity && !props.readOnly && fieldState.isTouched ? (\n                <>\n                    <div\n                        className={classNames(\n                            `\n                                absolute bottom-0 right-9 top-0 my-auto h-6 w-3 \n                                bg-gradient-to-r from-transparent\n                            `,\n                            contentDivStyleClasses\n                        )}\n                    />\n                    {fieldState.invalid ? (\n                        <XMarkIcon\n                            className={classNames(\n                                `\n                                    absolute bottom-0 right-3 top-0 my-auto h-6 \n                                    w-6 text-red\n                                `,\n                                validityIconStyleClasses\n                            )}\n                        />\n                    ) : (\n                        <CheckIcon\n                            className={classNames(\n                                `\n                                    absolute bottom-0 right-3 top-0 my-auto h-6\n                                    w-6 bg-notWhite text-green\n                                `,\n                                validityIconStyleClasses\n                            )}\n                        />\n                    )}\n                </>\n            ) : null}\n        </div>\n    );\n};\n","import { tw } from \"@/client/lib/tw-tagged-literal\";\nimport { HashtagIcon } from \"@heroicons/react/20/solid\";\nimport React from \"react\";\nimport {\n    FieldValues,\n    UseControllerProps,\n    useController,\n} from \"react-hook-form\";\ntype TokenMultiSelectProps<T extends FieldValues> = {\n    options: string[];\n} & UseControllerProps<T>;\n\nexport const TokenMultiSelect = <T extends FieldValues>({\n    options,\n    ...props\n}: TokenMultiSelectProps<T>) => {\n    const { field } = useController<T>(props);\n    const selectedOptions = field.value as string[];\n\n    return (\n        <div className=\"flex flex-row flex-wrap gap-2 px-3 py-2\">\n            {options.map((option) => (\n                <div\n                    key={`selected-token-${option}`}\n                    className=\"group h-max cursor-pointer select-none\"\n                >\n                    {/* this weird nested div thing is to prevent a bug caused by having the default click handler and our removal handler on the same element */}\n                    <button\n                        className={tw`co-token flex items-center justify-start gap-1 rounded-lg px-2 py-1 leading-none ${\n                            selectedOptions.includes(option) ? \"co-active\" : \"\"\n                        }`}\n                        onClick={(e) => {\n                            e.stopPropagation();\n                            selectedOptions.includes(option)\n                                ? field.onChange(\n                                      selectedOptions.filter(\n                                          (o) => o !== option\n                                      )\n                                  )\n                                : field.onChange([...selectedOptions, option]);\n                        }}\n                        type=\"button\"\n                    >\n                        <HashtagIcon className=\"inline-block h-3.5\" />\n                        <span className=\"block\">{option}</span>\n                    </button>\n                </div>\n            ))}\n        </div>\n    );\n};\n","import { trpc } from \"@/client/lib/trpc\";\nimport {\n    useCurrentProject,\n    useHasCohostPlus,\n} from \"@/client/preact/hooks/data-loaders\";\nimport { useDynamicTheme } from \"@/client/preact/hooks/dynamic-theme\";\nimport { useSiteConfig } from \"@/client/preact/providers/site-config-provider\";\nimport { useRequiresLogin } from \"@/client/preact/providers/user-info-provider\";\nimport { sitemap } from \"@/shared/sitemap\";\nimport { WireArtistAlley } from \"@/shared/types/artist-alley\";\nimport { ArtistAlleyAdId } from \"@/shared/types/ids\";\nimport { isValidAttachmentContentType } from \"@/shared/util/site-config\";\nimport { validateUrl } from \"@/shared/util/validate-url\";\nimport { ArrowUpTrayIcon } from \"@heroicons/react/20/solid\";\nimport { DevTool } from \"@hookform/devtools\";\nimport axios from \"axios\";\nimport normalizeUrl from \"normalize-url\";\nimport React, { useCallback } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport {\n    Controller,\n    FieldError,\n    SubmitHandler,\n    useForm,\n} from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { ArtistAlleyListing } from \"../../artist-alley/artist-alley-listing\";\nimport { DropZone } from \"../../elements/drop-zone\";\nimport { InfoBox } from \"../../elements/info-box\";\nimport { StyledInput } from \"../../elements/styled-input\";\nimport { TokenMultiSelect } from \"../../elements/token-multi-select\";\nimport { ControllableExpandingTextArea } from \"../../expanding-text-area\";\nimport { FilePicker } from \"../../file-selector\";\nimport LazyDnD from \"../../lazy-dnd\";\nimport { SidebarMenu } from \"../../sidebar-menu\";\n\nconst BODY_LIMIT = 280;\n\nconst InputRow: React.FC<\n    React.PropsWithChildren<{ label: string; smallLabel?: React.ReactNode }>\n> = ({ label, children, smallLabel }) => {\n    return (\n        <label className=\"flex flex-col gap-1\">\n            <span className=\"font-bold\">{label}</span>\n            {children}\n            {smallLabel ? <span className=\"text-sm\">{smallLabel}</span> : null}\n        </label>\n    );\n};\n\ntype Inputs = {\n    body: string;\n    adult: boolean;\n    ctaText: string;\n    ctaLink: string;\n    attachmentFiles: File[] | undefined;\n    attachmentAltText: string | undefined;\n    categories: string[];\n    notes: string;\n    // we want it to be a number but. browsers\n    numWeeks: string;\n};\nexport const ArtistAlleyCreatePage: React.FC = () => {\n    useRequiresLogin();\n\n    const createListingMutation = trpc.artistAlley.createListing.useMutation();\n\n    const {\n        control,\n        register,\n        handleSubmit,\n        trigger,\n        watch,\n        setValue,\n        setError,\n        formState,\n        clearErrors,\n        getValues,\n    } = useForm<Inputs>({\n        defaultValues: {\n            adult: false,\n            body: \"\",\n            ctaLink: \"\",\n            ctaText: \"\",\n            attachmentFiles: undefined,\n            attachmentAltText: \"\",\n            categories: [],\n            notes: \"\",\n            numWeeks: \"1\",\n        },\n    });\n\n    const [allCategories] = trpc.artistAlley.getCategories.useSuspenseQuery();\n\n    const bodyLength = watch(\"body\").length;\n\n    const onSubmit: SubmitHandler<Inputs> = useCallback(\n        async (data) => {\n            let attachment = undefined;\n\n            if (data.attachmentFiles && data.attachmentFiles[0]) {\n                console.log(data.attachmentFiles);\n                const file = data.attachmentFiles[0];\n                attachment = {\n                    filename: file.name,\n                    contentLength: file.size,\n                    contentType: file.type,\n                    altText: data.attachmentAltText ?? \"\",\n                };\n            }\n\n            const initialResult = await createListingMutation.mutateAsync({\n                body: data.body,\n                adult: data.adult,\n                cta: {\n                    text: data.ctaText,\n                    link: data.ctaLink,\n                },\n                categories: data.categories,\n                numWeeks: parseInt(data.numWeeks),\n                attachment,\n                notes: data.notes,\n            });\n\n            if (initialResult.attachmentDetails && data.attachmentFiles) {\n                const file = data.attachmentFiles[0];\n                const formData = new FormData();\n                for (const name in initialResult.attachmentDetails\n                    .requiredFields) {\n                    formData.append(\n                        name,\n                        initialResult.attachmentDetails.requiredFields[name]\n                    );\n                }\n                formData.append(\"file\", file);\n                formData.append(\"Content-Type\", file.type);\n                await axios.post(\n                    initialResult.attachmentDetails.url,\n                    formData,\n                    {\n                        withCredentials: false,\n                    }\n                );\n            }\n\n            window.location.href = initialResult.stripeRedirectUrl;\n        },\n        [createListingMutation]\n    );\n\n    const previewAttachment = watch(\"attachmentFiles\")?.[0];\n\n    const currentProject = useCurrentProject();\n    const objectURL = previewAttachment\n        ? URL.createObjectURL(previewAttachment)\n        : \"\";\n\n    const previewListing: WireArtistAlley = {\n        adultContent: watch(\"adult\", false),\n        attachment: previewAttachment\n            ? {\n                  altText: watch(\"attachmentAltText\") ?? \"\",\n                  fileURL: objectURL,\n                  previewURL: objectURL,\n              }\n            : null,\n        body: watch(\"body\"),\n        categories: watch(\"categories\"),\n        createdAt: new Date().toISOString(),\n        cta: {\n            link: watch(\"ctaLink\"),\n            text: watch(\"ctaText\"),\n        },\n        expiresAt: new Date().toISOString(),\n        projectId: currentProject!.projectId,\n        id: ArtistAlleyAdId.parse(\"1\"),\n    };\n\n    const theme = useDynamicTheme();\n\n    const siteConfig = useSiteConfig();\n    const hasCohostPlus = useHasCohostPlus();\n    const maxSize = hasCohostPlus\n        ? siteConfig.limits.attachmentSize.cohostPlus\n        : siteConfig.limits.attachmentSize.normal;\n\n    const validateAttachment = useCallback(\n        (fileList: File[] | undefined) => {\n            if (fileList === undefined) {\n                return true;\n            }\n\n            console.log(fileList);\n\n            if (!fileList.length) {\n                return true;\n            } else if (fileList.length > 1) {\n                return `You can only choose one image!`;\n            } else if (fileList[0].size > maxSize) {\n                return `image must be less than ${Math.round(\n                    maxSize / 1024 / 1024\n                )}mb!`;\n            }\n\n            const contentTypeValidationResult = isValidAttachmentContentType(\n                siteConfig,\n                fileList[0].type\n            );\n            if (\n                !contentTypeValidationResult.valid ||\n                contentTypeValidationResult.kind !== \"image\"\n            ) {\n                return `must be an image!`;\n            }\n\n            return true;\n        },\n        [maxSize, siteConfig]\n    );\n\n    const handleFileDrop = useCallback(\n        (files: File[]) => {\n            const validationResult = validateAttachment(files);\n\n            if (validationResult !== true) {\n                setError(\"attachmentFiles\", {\n                    message: validationResult,\n                    type: \"custom\",\n                });\n                return;\n            }\n\n            clearErrors(\"attachmentFiles\");\n            setValue(\"attachmentFiles\", files);\n        },\n        [clearErrors, setError, setValue, validateAttachment]\n    );\n\n    return (\n        <div className=\"container mx-auto mt-12 grid grid-cols-1 gap-16 lg:grid-cols-4\">\n            <Helmet title=\"create a listing - artist alley\" />\n            <SidebarMenu />\n            <LazyDnD>\n                <DropZone\n                    handleFileDrop={handleFileDrop}\n                    className=\"col-span-1 lg:col-span-2\"\n                >\n                    <div\n                        className=\"co-themed-box co-settings flex flex-col gap-3 rounded-lg p-3\"\n                        data-theme={theme.current}\n                    >\n                        <h1 className=\"co-settings-header\">create a listing</h1>\n\n                        <InfoBox level=\"post-box-info\">\n                            <div className=\"co-prose prose prose-sm\">\n                                <p>\n                                    artist alley listings are subject to the{\" \"}\n                                    <a\n                                        href={sitemap.public\n                                            .staticContent({\n                                                slug: \"community-guidelines\",\n                                            })\n                                            .toString()}\n                                    >\n                                        standard cohost community guidelines\n                                    </a>\n                                    , as well as{\" \"}\n                                    <a href=\"https://help.antisoftware.club/support/solutions/articles/62000231419-artist-alley-community-guidelines\">\n                                        an additional set specific to listings\n                                    </a>\n                                    .\n                                </p>\n                            </div>\n                        </InfoBox>\n\n                        <form\n                            onSubmit={handleSubmit(onSubmit)}\n                            className=\"flex flex-col gap-3\"\n                        >\n                            <InputRow\n                                label=\"listing image\"\n                                smallLabel={\n                                    <>\n                                        not required, but definitely\n                                        recommended. this will be displayed at a\n                                        resolution of 300x250. for best results\n                                        on high-density screens, we recommend\n                                        your image be at least 600x500.\n                                    </>\n                                }\n                            >\n                                <Controller\n                                    control={control}\n                                    name=\"attachmentFiles\"\n                                    render={({ field, fieldState }) => (\n                                        <FilePicker\n                                            onFilesPicked={(fileList) => {\n                                                const validationResult =\n                                                    validateAttachment(\n                                                        Array.from(fileList)\n                                                    );\n\n                                                if (validationResult !== true) {\n                                                    setError(\n                                                        \"attachmentFiles\",\n                                                        {\n                                                            message:\n                                                                validationResult,\n                                                            type: \"custom\",\n                                                        }\n                                                    );\n                                                    return;\n                                                }\n\n                                                clearErrors(\"attachmentFiles\");\n                                                field.onChange(fileList);\n                                            }}\n                                        >\n                                            <button\n                                                type=\"button\"\n                                                className=\"co-filled-button flex w-max flex-row items-center gap-1 rounded-lg px-3 py-2.5\"\n                                            >\n                                                <ArrowUpTrayIcon className=\"inline-block h-5 w-5\" />\n                                                {previewAttachment\n                                                    ? \"replace image\"\n                                                    : \"choose image\"}\n                                            </button>\n                                        </FilePicker>\n                                    )}\n                                />\n                                {previewAttachment ? (\n                                    <button\n                                        type=\"button\"\n                                        className=\"underline\"\n                                        onClick={(e) => {\n                                            setValue(\n                                                \"attachmentFiles\",\n                                                undefined\n                                            );\n                                            setValue(\n                                                \"attachmentAltText\",\n                                                undefined\n                                            );\n                                            clearErrors([\n                                                \"attachmentFiles\",\n                                                \"attachmentAltText\",\n                                            ]);\n                                            e.preventDefault();\n                                        }}\n                                    >\n                                        remove image\n                                    </button>\n                                ) : null}\n                                {formState.errors.attachmentFiles && (\n                                    <span className=\"text-red\">\n                                        {\n                                            // genuinely unsure why the typing is convinced this is an array\n                                            (\n                                                formState.errors\n                                                    .attachmentFiles as unknown as\n                                                    | FieldError\n                                                    | undefined\n                                            )?.message\n                                        }\n                                    </span>\n                                )}\n                            </InputRow>\n                            {previewAttachment ? (\n                                <InputRow\n                                    label=\"alt text\"\n                                    smallLabel=\"required if you're uploading an image\"\n                                >\n                                    <StyledInput\n                                        control={control}\n                                        name=\"attachmentAltText\"\n                                        trigger={trigger}\n                                        type=\"text\"\n                                        style=\"dynamic\"\n                                        placeholder=\"it's a picture of eggbug\"\n                                        rules={{\n                                            validate: {\n                                                required: (value) => {\n                                                    if (\n                                                        !value &&\n                                                        getValues(\n                                                            \"attachmentFiles\"\n                                                        )?.length\n                                                    ) {\n                                                        return \"alt text is required\";\n                                                    }\n                                                    return true;\n                                                },\n                                            },\n                                        }}\n                                    />\n                                    {formState.errors.attachmentAltText && (\n                                        <span className=\"text-red\">\n                                            {\n                                                formState.errors\n                                                    .attachmentAltText?.message\n                                            }\n                                        </span>\n                                    )}\n                                </InputRow>\n                            ) : null}\n\n                            <hr />\n\n                            <InputRow label=\"body\">\n                                <div className=\"flex flex-row items-start\">\n                                    <ControllableExpandingTextArea\n                                        control={control}\n                                        name=\"body\"\n                                        minRows={4}\n                                        autoComplete=\"off\"\n                                        placeholder=\"body goes here\"\n                                        className=\"co-styled-input rounded-lg border-2\"\n                                        rules={{\n                                            maxLength: {\n                                                message: `must be under ${BODY_LIMIT} characters`,\n                                                value: BODY_LIMIT,\n                                            },\n                                            required: {\n                                                message: \"required\",\n                                                value: true,\n                                            },\n                                        }}\n                                    />\n                                    {bodyLength >= BODY_LIMIT * 0.75 ? (\n                                        <span\n                                            className={`flex-shrink-0 p-2 tabular-nums ${\n                                                bodyLength > BODY_LIMIT\n                                                    ? \"text-red\"\n                                                    : \"text-gray-600\"\n                                            }`}\n                                        >\n                                            {BODY_LIMIT - bodyLength}\n                                        </span>\n                                    ) : null}\n                                </div>\n                                {formState.errors.body && (\n                                    <span className=\"text-red\">\n                                        {formState.errors.body?.message}\n                                    </span>\n                                )}\n                                <InfoBox level=\"post-box-info\">\n                                    supports most markdown! does not support\n                                    HTML, headers, or images. max 280\n                                    characters.\n                                </InfoBox>\n                            </InputRow>\n\n                            <hr />\n\n                            <InputRow\n                                label=\"button text\"\n                                smallLabel=\"35 characters max\"\n                            >\n                                <StyledInput\n                                    control={control}\n                                    name=\"ctaText\"\n                                    trigger={trigger}\n                                    type=\"text\"\n                                    style=\"dynamic\"\n                                    placeholder=\"it's eggbug\"\n                                    rules={{\n                                        minLength: 1,\n                                        maxLength: {\n                                            message:\n                                                \"must be under 35 characters\",\n                                            value: 35,\n                                        },\n                                        required: {\n                                            message: \"required\",\n                                            value: true,\n                                        },\n                                    }}\n                                />\n                                {formState.errors.ctaText && (\n                                    <span className=\"text-red\">\n                                        {formState.errors.ctaText.message}\n                                    </span>\n                                )}\n                            </InputRow>\n                            <InputRow\n                                label=\"button link\"\n                                smallLabel=\"it's gotta be a URL\"\n                            >\n                                <StyledInput\n                                    control={control}\n                                    name=\"ctaLink\"\n                                    trigger={trigger}\n                                    type=\"text\"\n                                    style=\"dynamic\"\n                                    placeholder=\"https://cohost.org/eggbug\"\n                                    rules={{\n                                        required: {\n                                            message: \"required\",\n                                            value: true,\n                                        },\n                                        validate: (value) => {\n                                            try {\n                                                const parseResult = z\n                                                    .string()\n                                                    .url()\n                                                    .safeParse(value);\n\n                                                if (!parseResult.success) {\n                                                    return \"invalid URL\";\n                                                }\n\n                                                const result = validateUrl(\n                                                    normalizeUrl(\n                                                        parseResult.data,\n                                                        {\n                                                            stripAuthentication:\n                                                                true,\n                                                            // not removing query parameters here so people can set their own\n                                                            // UTM/etc. params\n                                                            stripWWW: false,\n                                                        }\n                                                    )\n                                                );\n\n                                                if (!result.valid) {\n                                                    return \"invalid URL\";\n                                                }\n\n                                                return true;\n                                            } catch (e) {\n                                                return \"invalid URL\";\n                                            }\n                                        },\n                                    }}\n                                />\n                                {formState.errors.ctaLink && (\n                                    <span className=\"text-red\">\n                                        {formState.errors.ctaLink.message}\n                                    </span>\n                                )}\n                            </InputRow>\n\n                            <hr />\n\n                            <InputRow label=\"listing categories\">\n                                <InfoBox level=\"post-box-info\">\n                                    these are the categories you ad will appear\n                                    in. choose however many you want, but you\n                                    need at least one.\n                                </InfoBox>\n                                <TokenMultiSelect\n                                    control={control}\n                                    name=\"categories\"\n                                    options={allCategories}\n                                    rules={{\n                                        validate: (value) => {\n                                            value = value as string[];\n\n                                            if (value.length === 0) {\n                                                return \"you need at least one category\";\n                                            }\n                                        },\n                                    }}\n                                />\n                                {formState.errors.categories && (\n                                    <span className=\"text-red\">\n                                        {\n                                            (\n                                                formState.errors\n                                                    .categories as unknown as FieldError\n                                            ).message\n                                        }\n                                    </span>\n                                )}\n                            </InputRow>\n\n                            <hr />\n\n                            <label className=\"flex flex-row items-center justify-between\">\n                                <span className=\"font-bold\">\n                                    this listing contains 18+ content\n                                </span>\n                                <input\n                                    type=\"checkbox\"\n                                    {...register(\"adult\")}\n                                    className=\"rounded-checkbox\"\n                                />\n                            </label>\n\n                            <hr />\n\n                            <label className=\"flex flex-row items-center justify-between\">\n                                <div className=\"flex flex-col gap-2\">\n                                    <span className=\"font-bold\">\n                                        how many weeks should this listing run?\n                                    </span>\n                                    <span className=\"text-sm\">\n                                        listings are $10/week\n                                    </span>\n                                </div>\n                                <StyledInput\n                                    type=\"number\"\n                                    style=\"dynamic\"\n                                    control={control}\n                                    trigger={trigger}\n                                    rules={{\n                                        min: 1,\n                                        max: 4,\n                                        required: true,\n                                    }}\n                                    name=\"numWeeks\"\n                                    min={1}\n                                    max={4}\n                                    step={1}\n                                />\n                            </label>\n\n                            <hr />\n\n                            <InputRow label=\"anything else to tell us?\">\n                                <InfoBox level=\"post-box-info\">\n                                    <div className=\"co-prose prose prose-sm\">\n                                        <p>\n                                            you can put any notes you want us to\n                                            see here. these won't be publicly\n                                            visible, but can be helpful for us\n                                            during review.\n                                        </p>\n                                        <p>\n                                            we would especially appreciate any\n                                            categories you think this listing\n                                            fits in to that we don't already\n                                            have! if we decide to add them,\n                                            we'll apply them to your listing\n                                            automatically.\n                                        </p>\n                                    </div>\n                                </InfoBox>\n                                <ControllableExpandingTextArea\n                                    minRows={3}\n                                    control={control}\n                                    name=\"notes\"\n                                    autoComplete=\"off\"\n                                    placeholder=\"thank you for inventing eggbug\"\n                                    className=\"co-styled-input rounded-lg border-2\"\n                                />\n                            </InputRow>\n                            <button\n                                className=\"co-filled-button w-max self-end rounded-lg px-3 py-2.5 font-bold\"\n                                type=\"submit\"\n                                disabled={formState.isSubmitting}\n                            >\n                                continue to payment\n                            </button>\n                        </form>\n                        {process.env.NODE_ENV === \"development\" ? (\n                            <DevTool control={control} />\n                        ) : null}\n                    </div>\n                </DropZone>\n            </LazyDnD>\n            <div>\n                <div\n                    className=\"co-settings co-themed-box flex flex-col gap-4 rounded-lg p-3\"\n                    data-theme={theme.current}\n                >\n                    <h2 className=\"co-settings-header\">preview</h2>\n                    <InfoBox level=\"post-box-info\">\n                        this is what your listing will look like to others!\n                    </InfoBox>\n                    <div className=\"mx-auto w-full max-w-[300px]\">\n                        <ArtistAlleyListing\n                            listing={previewListing}\n                            project={currentProject!}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ArtistAlleyCreatePage;\n","type ValidateUrlResult =\n    | {\n          valid: true;\n          url: string;\n      }\n    | { valid: false };\n\nexport function validateUrl(urlString: string): ValidateUrlResult {\n    let urlObj;\n\n    try {\n        urlObj = new URL(urlString);\n    } catch (e) {\n        return { valid: false };\n    }\n\n    if (urlObj.protocol !== \"https:\" && urlObj.protocol !== \"http:\") {\n        return { valid: false };\n    }\n\n    return {\n        valid: true,\n        url: urlObj.toString(),\n    };\n}\n"],"names":["ArtistAlleyFilterProvider","React","adultFilterMode","isAdult","categories","Set","setAdultFilterMode","categoryMatch","setCategoryMatch","sortOrder","setSortOrder","useArtistAlleyFilters","useContext","ArtistAlleyAttachment","attachment","displayPrefs","useDisplayPrefs","src","setSrc","useState","gifsStartPaused","previewURL","fileURL","isPlaying","setIsPlaying","srcWithDpr","useImageOptimizer","className","srcSet","alt","altText","PlayPauseButton","showPlay","extraClasses","onPlay","handlePlay","onPause","handlePause","ArtistAlleyMeatballMenu","listing","reportingUIContext","ReportingUIContext","Menu","as","EllipsisHorizontalIcon","MeatballMenuItem","disabled","onClick","send","type","artistAlleyListingId","id","ItemIcon","ShieldExclamationIconOutline","text","ArtistAlleyListing","project","rendered","useMemo","renderMarkdownReactNoHTML","body","Date","disableEmbeds","externalLinksInNewTab","hasCohostPlus","renderingContext","theme","useDynamicTheme","current","ProjectAvatar","href","sitemap","projectHandle","handle","toString","adultContent","BasicButton","buttonColor","buttonSize","cta","link","target","length","ListingTags","tags","filteredTags","filter","tag","tw","map","key","has","delete","add","StyledInput","style","showValidity","name","control","rules","trigger","props","field","fieldState","useController","fieldName","onChange","directRef","setDirectRef","useEffect","ref","inputStyleClasses","contentDivStyleClasses","validityIconStyleClasses","value","defaultValue","isTouched","shouldFocus","_extends","classNames","readOnly","invalid","XMarkIcon","CheckIcon","TokenMultiSelect","options","selectedOptions","option","includes","e","stopPropagation","o","HashtagIcon","InputRow","label","children","smallLabel","ArtistAlleyCreatePage","useRequiresLogin","createListingMutation","trpc","register","handleSubmit","watch","setValue","setError","formState","clearErrors","getValues","useForm","defaultValues","adult","ctaLink","ctaText","attachmentFiles","undefined","attachmentAltText","notes","numWeeks","allCategories","bodyLength","onSubmit","useCallback","async","data","console","log","file","filename","contentLength","size","contentType","initialResult","mutateAsync","parseInt","attachmentDetails","formData","FormData","requiredFields","append","axios","url","withCredentials","window","location","stripeRedirectUrl","previewAttachment","currentProject","useCurrentProject","objectURL","URL","createObjectURL","previewListing","createdAt","toISOString","expiresAt","projectId","ArtistAlleyAdId","siteConfig","useSiteConfig","maxSize","useHasCohostPlus","limits","attachmentSize","cohostPlus","normal","validateAttachment","fileList","Math","round","contentTypeValidationResult","isValidAttachmentContentType","valid","kind","handleFileDrop","files","validationResult","message","Helmet","title","SidebarMenu","LazyDnD","DropZone","InfoBox","level","slug","Controller","render","FilePicker","onFilesPicked","Array","from","ArrowUpTrayIcon","preventDefault","errors","placeholder","validate","required","ControllableExpandingTextArea","minRows","autoComplete","maxLength","BODY_LIMIT","minLength","parseResult","z","safeParse","success","validateUrl","normalizeUrl","stripAuthentication","stripWWW","min","max","step","isSubmitting","urlString","urlObj","protocol"],"sourceRoot":""}