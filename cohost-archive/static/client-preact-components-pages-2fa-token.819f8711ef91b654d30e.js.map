{"version":3,"file":"client-preact-components-pages-2fa-token.819f8711ef91b654d30e.js","mappings":"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","sources":["webpack:///../node_modules/.pnpm/@mpth+react-no-ssr@1.0.1_react@18.0.0/node_modules/@mpth/react-no-ssr/dist/index.js","webpack:///./preact/components/elements/styled-input.tsx","webpack:///./preact/components/pages/2fa-token.tsx","webpack:///./preact/components/partials/authn-input.tsx","webpack:///../node_modules/.pnpm/@heroicons+react@2.0.13_react@18.0.0/node_modules/@heroicons/react/24/outline/esm/ChevronDoubleLeftIcon.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\nvar NoSSR = function (_a) {\n    var children = _a.children, _b = _a.fallback, fallback = _b === void 0 ? null : _b;\n    var _c = React.useState(false), mounted = _c[0], setMounted = _c[1];\n    React.useEffect(function () { return setMounted(true); }, []);\n    if (!mounted) {\n        return fallback;\n    }\n    return children;\n};\nexports.default = NoSSR;\n","import { CheckIcon, XMarkIcon } from \"@heroicons/react/24/outline\";\nimport classNames from \"classnames\";\nimport React, {\n    InputHTMLAttributes,\n    useEffect,\n    useMemo,\n    useState,\n} from \"react\";\nimport {\n    FieldValues,\n    useController,\n    UseControllerProps,\n    UseFormTrigger,\n} from \"react-hook-form\";\n\ntype InputStyle = \"light\" | \"dark\" | \"dynamic\";\n\ntype StyledInputProps<T extends FieldValues> = {\n    style?: InputStyle;\n    showValidity?: boolean;\n} & UseControllerProps<T> & { trigger: UseFormTrigger<T> } & Pick<\n        InputHTMLAttributes<HTMLInputElement>,\n        | \"type\"\n        | \"autoComplete\"\n        | \"placeholder\"\n        | \"max\"\n        | \"min\"\n        | \"step\"\n        | \"readOnly\"\n        | \"disabled\"\n    >;\n\nexport const StyledInput = <T extends FieldValues>({\n    style = \"light\",\n    showValidity = true,\n    name,\n    control,\n    rules,\n    trigger,\n    ...props\n}: StyledInputProps<T>) => {\n    const { field, fieldState } = useController<T>({\n        name,\n        control,\n        rules,\n    });\n    const { name: fieldName, onChange } = field;\n\n    // setup our own ref so we can track field value\n    const [directRef, setDirectRef] = useState<HTMLInputElement | null>();\n    useEffect(() => {\n        field.ref(directRef);\n    }, [directRef, field]);\n\n    const {\n        inputStyleClasses,\n        contentDivStyleClasses,\n        validityIconStyleClasses,\n    } = useMemo(() => {\n        switch (style) {\n            case \"light\":\n                return {\n                    inputStyleClasses: `border-gray-600 text-notBlack\n                        placeholder:text-gray-600\n                        focus:border-notBlack disabled:border-gray-300`,\n                    contentDivStyleClasses: `to-notWhite`,\n                    validityIconStyleClasses: `bg-notWhite`,\n                };\n            case \"dynamic\":\n                return {\n                    inputStyleClasses: \"co-styled-input\",\n                    contentDivStyleClasses: \"co-styled-input-content\",\n                    validityIconStyleClasses: \"co-styled-input-validity-icon\",\n                };\n            case \"dark\":\n            default:\n                return {\n                    inputStyleClasses: `border-gray-400 text-notWhite \n                        placeholder:text-gray-400\n                        focus:border-notWhite read-only:bg-gray-700`,\n                    contentDivStyleClasses: `to-notBlack`,\n                    validityIconStyleClasses: `bg-notBlack`,\n                };\n        }\n    }, [style]);\n\n    // manually validate when we don't get an input event\n    // can happen on browser autofill\n    useEffect(() => {\n        if (\n            directRef &&\n            directRef.value &&\n            directRef.value !== props.defaultValue &&\n            directRef.value !== field.value &&\n            !fieldState.isTouched\n        ) {\n            onChange(directRef.value);\n            void trigger(fieldName, { shouldFocus: true });\n        }\n    }, [\n        directRef,\n        field.value,\n        fieldName,\n        fieldState.isTouched,\n        onChange,\n        props.defaultValue,\n        trigger,\n    ]);\n    return (\n        <div className=\"relative\">\n            <input\n                className={classNames(\n                    `\n                        w-full min-w-[15rem] rounded-lg border-2 bg-transparent\n                    `,\n                    inputStyleClasses\n                )}\n                {...props}\n                {...field}\n                ref={setDirectRef}\n            />\n            {showValidity && !props.readOnly && fieldState.isTouched ? (\n                <>\n                    <div\n                        className={classNames(\n                            `\n                                absolute bottom-0 right-9 top-0 my-auto h-6 w-3 \n                                bg-gradient-to-r from-transparent\n                            `,\n                            contentDivStyleClasses\n                        )}\n                    />\n                    {fieldState.invalid ? (\n                        <XMarkIcon\n                            className={classNames(\n                                `\n                                    absolute bottom-0 right-3 top-0 my-auto h-6 \n                                    w-6 text-red\n                                `,\n                                validityIconStyleClasses\n                            )}\n                        />\n                    ) : (\n                        <CheckIcon\n                            className={classNames(\n                                `\n                                    absolute bottom-0 right-3 top-0 my-auto h-6\n                                    w-6 bg-notWhite text-green\n                                `,\n                                validityIconStyleClasses\n                            )}\n                        />\n                    )}\n                </>\n            ) : null}\n        </div>\n    );\n};\n","import sitemap from \"@/shared/sitemap\";\nimport { ChevronDoubleLeftIcon } from \"@heroicons/react/24/outline\";\nimport { Helmet } from \"react-helmet-async\";\nimport { CohostLogo } from \"../icons/cohost-logo\";\nimport NoSSR from \"@mpth/react-no-ssr\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { AuthnButton } from \"../partials/authn-button\";\nimport { AuthnInput } from \"../partials/authn-input\";\nimport { trpc } from \"@/client/lib/trpc\";\nimport { TRPCClientError } from \"@trpc/client\";\nimport type { AppRouter } from \"@/src/routes/api/trpc-type\";\n\nexport type TwoFactorTokenFormProps = {\n    redirectTo?: string;\n};\n\ntype Inputs = {\n    token: string;\n};\n\nconst TwoFactorTokenForm: FunctionComponent<TwoFactorTokenFormProps> = ({\n    redirectTo = \"/\",\n}) => {\n    const { t } = useTranslation();\n    const [submitting, setSubmitting] = useState(false);\n    const [formError, setFormError] = useState(\"\");\n    const {\n        handleSubmit,\n        control,\n        formState: { errors },\n        trigger,\n    } = useForm<Inputs>({\n        mode: \"onTouched\",\n    });\n    const [retriesRemaining, setRetriesRemaining] = useState<\n        number | undefined\n    >(undefined);\n    const send2FAToken = trpc.login.send2FAToken.useMutation();\n\n    const onSubmit: SubmitHandler<Inputs> = async ({ token }) => {\n        setSubmitting(true);\n        setFormError(\"\");\n\n        try {\n            await send2FAToken.mutateAsync({ token });\n            location.replace(redirectTo);\n        } catch (e) {\n            if (!(e instanceof TRPCClientError)) setFormError(\"error\");\n\n            const error = e as TRPCClientError<AppRouter>;\n\n            switch (error.data?.errorCode) {\n                case \"incorrect-totp\":\n                    if (error.data?.retriesRemaining !== undefined) {\n                        setRetriesRemaining(error.data.retriesRemaining);\n                        break;\n                    } else {\n                        // reset the state machine by reloading\n                        location.reload();\n                        break;\n                    }\n                default:\n                    setFormError(error.message);\n            }\n        } finally {\n            setSubmitting(false);\n        }\n    };\n\n    return (\n        <NoSSR\n            fallback={\n                <div className=\"prose prose-invert text-notWhite\">\n                    <p>Loading...</p>\n                    <p>If you keep seeing this, try refreshing!</p>\n                </div>\n            }\n        >\n            <form\n                className=\"flex flex-col gap-4\"\n                id=\"login-form\"\n                onSubmit={handleSubmit(onSubmit)}\n            >\n                <h1 className=\"text-xl capitalize\">{t(\"common:login\")}</h1>\n                {formError ? (\n                    <div className=\"max-w-prose rounded-lg border-red-500 bg-red-300 p-3 text-notBlack\">\n                        {formError}\n                    </div>\n                ) : null}\n                <div className=\"flex flex-col gap-2\">\n                    <label htmlFor=\"token\" className=\"text-lg\">\n                        {t(\"client:login.2fa-token\", {\n                            defaultValue: \"your 2fa code:\",\n                        })}\n                    </label>\n                    <AuthnInput\n                        trigger={trigger}\n                        type=\"text\"\n                        autoComplete=\"one-time-code\"\n                        name=\"token\"\n                        rules={{\n                            required: t(\n                                \"client:login.token.required\",\n                                \"2FA code can't be empty!\"\n                            ).toString(),\n                            minLength: 6,\n                            // no max length (recovery secret is longer than 6\n                            // chars)\n                        }}\n                        control={control}\n                    />\n                    {retriesRemaining ? (\n                        <div className=\"text-sm text-notWhite\" role=\"alert\">\n                            incorrect code. retries left: {retriesRemaining}.\n                        </div>\n                    ) : null}\n                </div>\n                <AuthnButton type=\"submit\" disabled={submitting}>\n                    {t(\"common:login\")}\n                </AuthnButton>\n            </form>\n        </NoSSR>\n    );\n};\n\nexport const TwoFactorTokenPage: FunctionComponent<TwoFactorTokenFormProps> = ({\n    redirectTo,\n}) => {\n    const { t } = useTranslation();\n\n    return (\n        <>\n            <Helmet title=\"login\" />\n            <CohostLogo className=\"-ml-6 text-notWhite lg:-ml-12\" />\n            <TwoFactorTokenForm redirectTo={redirectTo} />\n            <a\n                href={sitemap.public.welcome().toString()}\n                className=\"flex items-center gap-1 capitalize text-mango hover:underline\"\n            >\n                <ChevronDoubleLeftIcon className=\"h-6 w-6\" />\n                {t(\"common:back-button\")}\n            </a>\n        </>\n    );\n};\n\nTwoFactorTokenPage.displayName = \"2fa-token\";\nexport default TwoFactorTokenPage;\n","import React from \"react\";\nimport {\n    FieldValues,\n    UseControllerProps,\n    UseFormTrigger,\n} from \"react-hook-form\";\nimport { StyledInput } from \"../elements/styled-input\";\n\nexport type AuthnInputProps<T extends FieldValues> = UseControllerProps<T> & {\n    trigger: UseFormTrigger<T>;\n} & Pick<\n        React.InputHTMLAttributes<HTMLInputElement>,\n        \"type\" | \"autoComplete\" | \"placeholder\" | \"max\" | \"readOnly\"\n    >;\n\n/** @deprecated */\nexport const AuthnInput = <T extends FieldValues>({\n    ...props\n}: AuthnInputProps<T>) => <StyledInput style=\"dark\" {...props} />;\n","import * as React from \"react\";\n\nfunction ChevronDoubleLeftIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M18.75 19.5l-7.5-7.5 7.5-7.5m-6 15L5.25 12l7.5-7.5\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ChevronDoubleLeftIcon);\nexport default ForwardRef;"],"names":["React","exports","_a","children","_b","fallback","_c","useState","mounted","setMounted","useEffect","StyledInput","style","showValidity","name","control","rules","trigger","props","field","fieldState","useController","fieldName","onChange","directRef","setDirectRef","ref","inputStyleClasses","contentDivStyleClasses","validityIconStyleClasses","useMemo","value","defaultValue","isTouched","shouldFocus","className","_extends","classNames","readOnly","invalid","XMarkIcon","CheckIcon","TwoFactorTokenForm","redirectTo","t","useTranslation","submitting","setSubmitting","formError","setFormError","handleSubmit","formState","errors","useForm","mode","retriesRemaining","setRetriesRemaining","undefined","send2FAToken","trpc","NoSSR","id","onSubmit","async","token","mutateAsync","location","replace","e","TRPCClientError","error","data","errorCode","reload","message","htmlFor","AuthnInput","type","autoComplete","required","toString","minLength","role","AuthnButton","disabled","TwoFactorTokenPage","Helmet","title","CohostLogo","href","sitemap","ChevronDoubleLeftIcon","displayName","ForwardRef","titleId","svgRef","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d"],"sourceRoot":""}